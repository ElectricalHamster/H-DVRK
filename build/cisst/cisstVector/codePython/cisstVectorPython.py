# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cisstVectorPython
else:
    import _cisstVectorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstVectorPython.delete_SwigPyIterator

    def value(self):
        return _cisstVectorPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstVectorPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstVectorPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstVectorPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstVectorPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstVectorPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstVectorPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstVectorPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstVectorPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstVectorPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstVectorPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstVectorPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstVectorPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstVectorPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstVectorPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstVectorPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cisstVectorPython:
_cisstVectorPython.SwigPyIterator_swigregister(SwigPyIterator)

import cisstCommonPython
class vctFrm3(object):
    r"""Proxy of C++ vctFrameBase< vctRot3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DIMENSION = _cisstVectorPython.vctFrm3_DIMENSION
    

    def __init__(self):
        r"""__init__(vctFrm3 self) -> vctFrm3"""
        _cisstVectorPython.vctFrm3_swiginit(self, _cisstVectorPython.new_vctFrm3())

    @staticmethod
    def Identity():
        r"""Identity() -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_Identity()

    def Assign(self, otherFrame):
        r"""Assign(vctFrm3 self, vctFrm3 otherFrame) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_Assign(self, otherFrame)

    def Translation(self, *args):
        r"""
        Translation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::TranslationType const
        Translation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::TranslationType &
        """
        return _cisstVectorPython.vctFrm3_Translation(self, *args)

    def Rotation(self, *args):
        r"""
        Rotation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::RotationType const
        Rotation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::RotationType &
        """
        return _cisstVectorPython.vctFrm3_Rotation(self, *args)

    def IsNormalized(self, *args):
        r"""IsNormalized(vctFrm3 self, vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type tolerance=TypeTraits::Tolerance()) -> bool"""
        return _cisstVectorPython.vctFrm3_IsNormalized(self, *args)

    def NormalizedSelf(self):
        r"""NormalizedSelf(vctFrm3 self) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_NormalizedSelf(self)

    def InverseSelf(self):
        r"""InverseSelf(vctFrm3 self) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_InverseSelf(self)

    def InverseOf(self, otherFrame):
        r"""InverseOf(vctFrm3 self, vctFrm3 otherFrame) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_InverseOf(self, otherFrame)

    def __eq__(self, other):
        r"""__eq__(vctFrm3 self, vctFrm3 other) -> bool"""
        return _cisstVectorPython.vctFrm3___eq__(self, other)

    def __str__(self):
        r"""__str__(vctFrm3 self) -> std::string"""
        return _cisstVectorPython.vctFrm3___str__(self)
    __swig_destroy__ = _cisstVectorPython.delete_vctFrm3

# Register vctFrm3 in _cisstVectorPython:
_cisstVectorPython.vctFrm3_swigregister(vctFrm3)

def vctFrm3_Identity():
    r"""vctFrm3_Identity() -> vctFrm3"""
    return _cisstVectorPython.vctFrm3_Identity()


def __str__(order):
    r"""__str__(vctEulerRotation3Order::OrderType order) -> std::string"""
    return _cisstVectorPython.__str__(order)
class vctEulerRotation3Base(object):
    r"""Proxy of C++ vctEulerRotation3Base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vctEulerRotation3Base self) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, vctEulerRotation3Base other) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, double phi, double theta, double psi) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, double * angles) -> vctEulerRotation3Base
        __init__(vctEulerRotation3Base self, vct3 const & angles) -> vctEulerRotation3Base
        """
        _cisstVectorPython.vctEulerRotation3Base_swiginit(self, _cisstVectorPython.new_vctEulerRotation3Base(*args))
    __swig_destroy__ = _cisstVectorPython.delete_vctEulerRotation3Base

    def phi(self):
        r"""phi(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_phi(self)

    def theta(self):
        r"""theta(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_theta(self)

    def psi(self):
        r"""psi(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_psi(self)

    def alpha(self):
        r"""alpha(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_alpha(self)

    def beta(self):
        r"""beta(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_beta(self)

    def gamma(self):
        r"""gamma(vctEulerRotation3Base self) -> double"""
        return _cisstVectorPython.vctEulerRotation3Base_gamma(self)

    def Assign(self, phi, theta, psi):
        r"""Assign(vctEulerRotation3Base self, double phi, double theta, double psi)"""
        return _cisstVectorPython.vctEulerRotation3Base_Assign(self, phi, theta, psi)

    def InverseSelf(self):
        r"""InverseSelf(vctEulerRotation3Base self) -> vctEulerRotation3Base"""
        return _cisstVectorPython.vctEulerRotation3Base_InverseSelf(self)

    def NormalizedSelf(self):
        r"""NormalizedSelf(vctEulerRotation3Base self) -> vctEulerRotation3Base"""
        return _cisstVectorPython.vctEulerRotation3Base_NormalizedSelf(self)

    def IsNormalized(self, *args):
        r"""IsNormalized(vctEulerRotation3Base self, double tolerance=cmnTypeTraits< double >::Tolerance()) -> bool"""
        return _cisstVectorPython.vctEulerRotation3Base_IsNormalized(self, *args)

# Register vctEulerRotation3Base in _cisstVectorPython:
_cisstVectorPython.vctEulerRotation3Base_swigregister(vctEulerRotation3Base)

class vctEulerZYZRotation3(vctEulerRotation3Base):
    r"""Proxy of C++ vctEulerRotation3< vctEulerRotation3Order::ZYZ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vctEulerZYZRotation3 self) -> vctEulerZYZRotation3
        __init__(vctEulerZYZRotation3 self, vctEulerZYZRotation3 other) -> vctEulerZYZRotation3
        __init__(vctEulerZYZRotation3 self, double phi, double theta, double psi) -> vctEulerZYZRotation3
        __init__(vctEulerZYZRotation3 self, double * angles) -> vctEulerZYZRotation3
        __init__(vctEulerZYZRotation3 self, vct3 const & angles) -> vctEulerZYZRotation3
        """
        _cisstVectorPython.vctEulerZYZRotation3_swiginit(self, _cisstVectorPython.new_vctEulerZYZRotation3(*args))
    __swig_destroy__ = _cisstVectorPython.delete_vctEulerZYZRotation3

    def GetAngles(self, *args):
        r"""
        GetAngles(vctEulerZYZRotation3 self) -> vct3 const
        GetAngles(vctEulerZYZRotation3 self) -> vct3 &
        """
        return _cisstVectorPython.vctEulerZYZRotation3_GetAngles(self, *args)

    def GetAnglesInDegrees(self):
        r"""GetAnglesInDegrees(vctEulerZYZRotation3 self) -> vct3"""
        return _cisstVectorPython.vctEulerZYZRotation3_GetAnglesInDegrees(self)

    def InverseOf(self, otherRotation):
        r"""InverseOf(vctEulerZYZRotation3 self, vctEulerZYZRotation3 otherRotation) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_InverseOf(self, otherRotation)

    def NormalizedOf(self, otherRotation):
        r"""NormalizedOf(vctEulerZYZRotation3 self, vctEulerZYZRotation3 otherRotation) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_NormalizedOf(self, otherRotation)

    def Normalized(self):
        r"""Normalized(vctEulerZYZRotation3 self) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_Normalized(self)

    def __eq__(self, other):
        r"""__eq__(vctEulerZYZRotation3 self, vctEulerZYZRotation3 other) -> bool"""
        return _cisstVectorPython.vctEulerZYZRotation3___eq__(self, other)

    def __str__(self):
        r"""__str__(vctEulerZYZRotation3 self) -> std::string"""
        return _cisstVectorPython.vctEulerZYZRotation3___str__(self)

    def From(self, matrixRot):
        r"""From(vctEulerZYZRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_From(self, matrixRot)

    def FromNormalized(self, matrixRot):
        r"""FromNormalized(vctEulerZYZRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_FromNormalized(self, matrixRot)

    def FromRaw(self, matrixRot):
        r"""FromRaw(vctEulerZYZRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYZRotation3"""
        return _cisstVectorPython.vctEulerZYZRotation3_FromRaw(self, matrixRot)

# Register vctEulerZYZRotation3 in _cisstVectorPython:
_cisstVectorPython.vctEulerZYZRotation3_swigregister(vctEulerZYZRotation3)

class vctEulerZYXRotation3(vctEulerRotation3Base):
    r"""Proxy of C++ vctEulerRotation3< vctEulerRotation3Order::ZYX > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vctEulerZYXRotation3 self) -> vctEulerZYXRotation3
        __init__(vctEulerZYXRotation3 self, vctEulerZYXRotation3 other) -> vctEulerZYXRotation3
        __init__(vctEulerZYXRotation3 self, double phi, double theta, double psi) -> vctEulerZYXRotation3
        __init__(vctEulerZYXRotation3 self, double * angles) -> vctEulerZYXRotation3
        __init__(vctEulerZYXRotation3 self, vct3 const & angles) -> vctEulerZYXRotation3
        """
        _cisstVectorPython.vctEulerZYXRotation3_swiginit(self, _cisstVectorPython.new_vctEulerZYXRotation3(*args))
    __swig_destroy__ = _cisstVectorPython.delete_vctEulerZYXRotation3

    def GetAngles(self, *args):
        r"""
        GetAngles(vctEulerZYXRotation3 self) -> vct3 const
        GetAngles(vctEulerZYXRotation3 self) -> vct3 &
        """
        return _cisstVectorPython.vctEulerZYXRotation3_GetAngles(self, *args)

    def GetAnglesInDegrees(self):
        r"""GetAnglesInDegrees(vctEulerZYXRotation3 self) -> vct3"""
        return _cisstVectorPython.vctEulerZYXRotation3_GetAnglesInDegrees(self)

    def InverseOf(self, otherRotation):
        r"""InverseOf(vctEulerZYXRotation3 self, vctEulerZYXRotation3 otherRotation) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_InverseOf(self, otherRotation)

    def NormalizedOf(self, otherRotation):
        r"""NormalizedOf(vctEulerZYXRotation3 self, vctEulerZYXRotation3 otherRotation) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_NormalizedOf(self, otherRotation)

    def Normalized(self):
        r"""Normalized(vctEulerZYXRotation3 self) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_Normalized(self)

    def __eq__(self, other):
        r"""__eq__(vctEulerZYXRotation3 self, vctEulerZYXRotation3 other) -> bool"""
        return _cisstVectorPython.vctEulerZYXRotation3___eq__(self, other)

    def __str__(self):
        r"""__str__(vctEulerZYXRotation3 self) -> std::string"""
        return _cisstVectorPython.vctEulerZYXRotation3___str__(self)

    def From(self, matrixRot):
        r"""From(vctEulerZYXRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_From(self, matrixRot)

    def FromNormalized(self, matrixRot):
        r"""FromNormalized(vctEulerZYXRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_FromNormalized(self, matrixRot)

    def FromRaw(self, matrixRot):
        r"""FromRaw(vctEulerZYXRotation3 self, vctDynamicMatrix< double > const & matrixRot) -> vctEulerZYXRotation3"""
        return _cisstVectorPython.vctEulerZYXRotation3_FromRaw(self, matrixRot)

# Register vctEulerZYXRotation3 in _cisstVectorPython:
_cisstVectorPython.vctEulerZYXRotation3_swigregister(vctEulerZYXRotation3)



