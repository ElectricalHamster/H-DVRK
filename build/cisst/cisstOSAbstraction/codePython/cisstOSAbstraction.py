# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cisstOSAbstractionPython
else:
    import _cisstOSAbstractionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstOSAbstractionPython.delete_SwigPyIterator

    def value(self):
        return _cisstOSAbstractionPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstOSAbstractionPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstOSAbstractionPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstOSAbstractionPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstOSAbstractionPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstOSAbstractionPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstOSAbstractionPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstOSAbstractionPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstOSAbstractionPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstOSAbstractionPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstOSAbstractionPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstOSAbstractionPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstOSAbstractionPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstOSAbstractionPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstOSAbstractionPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstOSAbstractionPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstOSAbstractionPython.ios_base_erase_event
    imbue_event = _cisstOSAbstractionPython.ios_base_imbue_event
    copyfmt_event = _cisstOSAbstractionPython.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _cisstOSAbstractionPython.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _cisstOSAbstractionPython.ios_base_flags(self, *args)

    def setf(self, *args):
        return _cisstOSAbstractionPython.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _cisstOSAbstractionPython.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _cisstOSAbstractionPython.ios_base_precision(self, *args)

    def width(self, *args):
        return _cisstOSAbstractionPython.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _cisstOSAbstractionPython.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _cisstOSAbstractionPython.ios_base_imbue(self, __loc)

    def getloc(self):
        return _cisstOSAbstractionPython.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _cisstOSAbstractionPython.ios_base_xalloc()

    def iword(self, __ix):
        return _cisstOSAbstractionPython.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _cisstOSAbstractionPython.ios_base_pword(self, __ix)
    __swig_destroy__ = _cisstOSAbstractionPython.delete_ios_base

# Register ios_base in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.ios_base_swigregister(ios_base)
cvar = _cisstOSAbstractionPython.cvar
ios_base.boolalpha = _cisstOSAbstractionPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstOSAbstractionPython.cvar.ios_base_dec
ios_base.fixed = _cisstOSAbstractionPython.cvar.ios_base_fixed
ios_base.hex = _cisstOSAbstractionPython.cvar.ios_base_hex
ios_base.internal = _cisstOSAbstractionPython.cvar.ios_base_internal
ios_base.left = _cisstOSAbstractionPython.cvar.ios_base_left
ios_base.oct = _cisstOSAbstractionPython.cvar.ios_base_oct
ios_base.right = _cisstOSAbstractionPython.cvar.ios_base_right
ios_base.scientific = _cisstOSAbstractionPython.cvar.ios_base_scientific
ios_base.showbase = _cisstOSAbstractionPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstOSAbstractionPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstOSAbstractionPython.cvar.ios_base_showpos
ios_base.skipws = _cisstOSAbstractionPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstOSAbstractionPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstOSAbstractionPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstOSAbstractionPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstOSAbstractionPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstOSAbstractionPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstOSAbstractionPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstOSAbstractionPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstOSAbstractionPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstOSAbstractionPython.cvar.ios_base_goodbit
ios_base.app = _cisstOSAbstractionPython.cvar.ios_base_app
ios_base.ate = _cisstOSAbstractionPython.cvar.ios_base_ate
ios_base.binary = _cisstOSAbstractionPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstOSAbstractionPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstOSAbstractionPython.cvar.ios_base_out
ios_base.trunc = _cisstOSAbstractionPython.cvar.ios_base_trunc
ios_base.beg = _cisstOSAbstractionPython.cvar.ios_base_beg
ios_base.cur = _cisstOSAbstractionPython.cvar.ios_base_cur
ios_base.end = _cisstOSAbstractionPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _cisstOSAbstractionPython.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return _cisstOSAbstractionPython.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _cisstOSAbstractionPython.ios_rdstate(self)

    def clear(self, *args):
        return _cisstOSAbstractionPython.ios_clear(self, *args)

    def setstate(self, __state):
        return _cisstOSAbstractionPython.ios_setstate(self, __state)

    def good(self):
        return _cisstOSAbstractionPython.ios_good(self)

    def eof(self):
        return _cisstOSAbstractionPython.ios_eof(self)

    def fail(self):
        return _cisstOSAbstractionPython.ios_fail(self)

    def bad(self):
        return _cisstOSAbstractionPython.ios_bad(self)

    def exceptions(self, *args):
        return _cisstOSAbstractionPython.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _cisstOSAbstractionPython.ios_swiginit(self, _cisstOSAbstractionPython.new_ios(__sb))
    __swig_destroy__ = _cisstOSAbstractionPython.delete_ios

    def tie(self, *args):
        return _cisstOSAbstractionPython.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _cisstOSAbstractionPython.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _cisstOSAbstractionPython.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _cisstOSAbstractionPython.ios_fill(self, *args)

    def imbue(self, __loc):
        return _cisstOSAbstractionPython.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _cisstOSAbstractionPython.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _cisstOSAbstractionPython.ios_widen(self, __c)

# Register ios in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.ios_swigregister(ios)

class streambuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstOSAbstractionPython.delete_streambuf

    def pubimbue(self, __loc):
        return _cisstOSAbstractionPython.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _cisstOSAbstractionPython.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _cisstOSAbstractionPython.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _cisstOSAbstractionPython.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _cisstOSAbstractionPython.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _cisstOSAbstractionPython.streambuf_pubsync(self)

    def in_avail(self):
        return _cisstOSAbstractionPython.streambuf_in_avail(self)

    def snextc(self):
        return _cisstOSAbstractionPython.streambuf_snextc(self)

    def sbumpc(self):
        return _cisstOSAbstractionPython.streambuf_sbumpc(self)

    def sgetc(self):
        return _cisstOSAbstractionPython.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _cisstOSAbstractionPython.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _cisstOSAbstractionPython.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _cisstOSAbstractionPython.streambuf_sungetc(self)

    def sputc(self, __c):
        return _cisstOSAbstractionPython.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _cisstOSAbstractionPython.streambuf_sputn(self, __s, __n)

# Register streambuf in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstOSAbstractionPython.ostream_swiginit(self, _cisstOSAbstractionPython.new_ostream(__sb))
    __swig_destroy__ = _cisstOSAbstractionPython.delete_ostream

    def __lshift__(self, *args):
        return _cisstOSAbstractionPython.ostream___lshift__(self, *args)

    def put(self, __c):
        return _cisstOSAbstractionPython.ostream_put(self, __c)

    def write(self, __s, __n):
        return _cisstOSAbstractionPython.ostream_write(self, __s, __n)

    def flush(self):
        return _cisstOSAbstractionPython.ostream_flush(self)

    def tellp(self):
        return _cisstOSAbstractionPython.ostream_tellp(self)

    def seekp(self, *args):
        return _cisstOSAbstractionPython.ostream_seekp(self, *args)

# Register ostream in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstOSAbstractionPython.istream_swiginit(self, _cisstOSAbstractionPython.new_istream(__sb))
    __swig_destroy__ = _cisstOSAbstractionPython.delete_istream

    def __rshift__(self, *args):
        return _cisstOSAbstractionPython.istream___rshift__(self, *args)

    def gcount(self):
        return _cisstOSAbstractionPython.istream_gcount(self)

    def get(self, *args):
        return _cisstOSAbstractionPython.istream_get(self, *args)

    def getline(self, *args):
        return _cisstOSAbstractionPython.istream_getline(self, *args)

    def ignore(self, *args):
        return _cisstOSAbstractionPython.istream_ignore(self, *args)

    def peek(self):
        return _cisstOSAbstractionPython.istream_peek(self)

    def read(self, __s, __n):
        return _cisstOSAbstractionPython.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _cisstOSAbstractionPython.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _cisstOSAbstractionPython.istream_putback(self, __c)

    def unget(self):
        return _cisstOSAbstractionPython.istream_unget(self)

    def sync(self):
        return _cisstOSAbstractionPython.istream_sync(self)

    def tellg(self):
        return _cisstOSAbstractionPython.istream_tellg(self)

    def seekg(self, *args):
        return _cisstOSAbstractionPython.istream_seekg(self, *args)

# Register istream in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstOSAbstractionPython.iostream_swiginit(self, _cisstOSAbstractionPython.new_iostream(__sb))
    __swig_destroy__ = _cisstOSAbstractionPython.delete_iostream

# Register iostream in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.iostream_swigregister(iostream)

endl_cb_ptr = _cisstOSAbstractionPython.endl_cb_ptr
endl = _cisstOSAbstractionPython.endl
ends_cb_ptr = _cisstOSAbstractionPython.ends_cb_ptr
ends = _cisstOSAbstractionPython.ends
flush_cb_ptr = _cisstOSAbstractionPython.flush_cb_ptr
flush = _cisstOSAbstractionPython.flush
import cisstCommonPython
class osaAbsoluteTime(object):
    r"""Proxy of C++ osaAbsoluteTime class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sec = property(_cisstOSAbstractionPython.osaAbsoluteTime_sec_get, _cisstOSAbstractionPython.osaAbsoluteTime_sec_set, doc=r"""sec : long""")
    nsec = property(_cisstOSAbstractionPython.osaAbsoluteTime_nsec_get, _cisstOSAbstractionPython.osaAbsoluteTime_nsec_set, doc=r"""nsec : long""")

    def __init__(self, *args):
        r"""
        __init__(osaAbsoluteTime self) -> osaAbsoluteTime
        __init__(osaAbsoluteTime self, long seconds, long nanoseconds) -> osaAbsoluteTime
        """
        _cisstOSAbstractionPython.osaAbsoluteTime_swiginit(self, _cisstOSAbstractionPython.new_osaAbsoluteTime(*args))
    __swig_destroy__ = _cisstOSAbstractionPython.delete_osaAbsoluteTime

    def ToSeconds(self):
        r"""ToSeconds(osaAbsoluteTime self) -> double"""
        return _cisstOSAbstractionPython.osaAbsoluteTime_ToSeconds(self)

    def FromSeconds(self, timeInSeconds):
        r"""FromSeconds(osaAbsoluteTime self, double timeInSeconds)"""
        return _cisstOSAbstractionPython.osaAbsoluteTime_FromSeconds(self, timeInSeconds)

# Register osaAbsoluteTime in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.osaAbsoluteTime_swigregister(osaAbsoluteTime)

class osaTimeServer(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ osaTimeServer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstOSAbstractionPython.osaTimeServer_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstOSAbstractionPython.osaTimeServer_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstOSAbstractionPython.osaTimeServer_ClassServices()

    def __init__(self):
        r"""__init__(osaTimeServer self) -> osaTimeServer"""
        _cisstOSAbstractionPython.osaTimeServer_swiginit(self, _cisstOSAbstractionPython.new_osaTimeServer())
    __swig_destroy__ = _cisstOSAbstractionPython.delete_osaTimeServer

    def SetTimeOrigin(self):
        r"""SetTimeOrigin(osaTimeServer self)"""
        return _cisstOSAbstractionPython.osaTimeServer_SetTimeOrigin(self)

    def SetTimeOriginFrom(self, other):
        r"""SetTimeOriginFrom(osaTimeServer self, osaTimeServer other)"""
        return _cisstOSAbstractionPython.osaTimeServer_SetTimeOriginFrom(self, other)

    def GetTimeOrigin(self, origin):
        r"""GetTimeOrigin(osaTimeServer self, osaAbsoluteTime origin) -> bool"""
        return _cisstOSAbstractionPython.osaTimeServer_GetTimeOrigin(self, origin)

    def GetRelativeTime(self):
        r"""GetRelativeTime(osaTimeServer self) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_GetRelativeTime(self)

    def GetAbsoluteTimeInSeconds(self):
        r"""GetAbsoluteTimeInSeconds(osaTimeServer self) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_GetAbsoluteTimeInSeconds(self)

    def GetAbsoluteTime(self):
        r"""GetAbsoluteTime(osaTimeServer self) -> osaAbsoluteTime"""
        return _cisstOSAbstractionPython.osaTimeServer_GetAbsoluteTime(self)

    def EstimateDrift(self):
        r"""EstimateDrift(osaTimeServer self) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_EstimateDrift(self)

    def RelativeToAbsolute(self, relative, absolute):
        r"""RelativeToAbsolute(osaTimeServer self, double relative, osaAbsoluteTime absolute)"""
        return _cisstOSAbstractionPython.osaTimeServer_RelativeToAbsolute(self, relative, absolute)

    def AbsoluteToRelative(self, absolute):
        r"""AbsoluteToRelative(osaTimeServer self, osaAbsoluteTime absolute) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_AbsoluteToRelative(self, absolute)

# Register osaTimeServer in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.osaTimeServer_swigregister(osaTimeServer)

def osaTimeServer_ClassServices():
    r"""osaTimeServer_ClassServices() -> cmnClassServicesBase"""
    return _cisstOSAbstractionPython.osaTimeServer_ClassServices()

class osaSerialPort(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ osaSerialPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstOSAbstractionPython.osaSerialPort_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstOSAbstractionPython.osaSerialPort_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstOSAbstractionPython.osaSerialPort_ClassServices()
    BaudRate300 = _cisstOSAbstractionPython.osaSerialPort_BaudRate300
    
    BaudRate1200 = _cisstOSAbstractionPython.osaSerialPort_BaudRate1200
    
    BaudRate9600 = _cisstOSAbstractionPython.osaSerialPort_BaudRate9600
    
    BaudRate19200 = _cisstOSAbstractionPython.osaSerialPort_BaudRate19200
    
    BaudRate38400 = _cisstOSAbstractionPython.osaSerialPort_BaudRate38400
    
    BaudRate57600 = _cisstOSAbstractionPython.osaSerialPort_BaudRate57600
    
    BaudRate115200 = _cisstOSAbstractionPython.osaSerialPort_BaudRate115200
    
    CharacterSize5 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize5
    
    CharacterSize6 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize6
    
    CharacterSize7 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize7
    
    CharacterSize8 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize8
    
    ParityCheckingNone = _cisstOSAbstractionPython.osaSerialPort_ParityCheckingNone
    
    ParityCheckingEven = _cisstOSAbstractionPython.osaSerialPort_ParityCheckingEven
    
    ParityCheckingOdd = _cisstOSAbstractionPython.osaSerialPort_ParityCheckingOdd
    
    FlowControlNone = _cisstOSAbstractionPython.osaSerialPort_FlowControlNone
    
    FlowControlSoftware = _cisstOSAbstractionPython.osaSerialPort_FlowControlSoftware
    
    FlowControlHardware = _cisstOSAbstractionPython.osaSerialPort_FlowControlHardware
    
    StopBitsOne = _cisstOSAbstractionPython.osaSerialPort_StopBitsOne
    
    StopBitsTwo = _cisstOSAbstractionPython.osaSerialPort_StopBitsTwo
    

    def __init__(self):
        r"""__init__(osaSerialPort self) -> osaSerialPort"""
        _cisstOSAbstractionPython.osaSerialPort_swiginit(self, _cisstOSAbstractionPython.new_osaSerialPort())
    __swig_destroy__ = _cisstOSAbstractionPython.delete_osaSerialPort

    def SetBaudRate(self, baudRate):
        r"""SetBaudRate(osaSerialPort self, osaSerialPort::BaudRateType const & baudRate)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetBaudRate(self, baudRate)

    def SetCharacterSize(self, characterSize):
        r"""SetCharacterSize(osaSerialPort self, osaSerialPort::CharacterSizeType const & characterSize)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetCharacterSize(self, characterSize)

    def SetParityChecking(self, parityChecking):
        r"""SetParityChecking(osaSerialPort self, osaSerialPort::ParityCheckingType const & parityChecking)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetParityChecking(self, parityChecking)

    def SetStopBits(self, stopBits):
        r"""SetStopBits(osaSerialPort self, osaSerialPort::StopBitsType const & stopBits)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetStopBits(self, stopBits)

    def SetFlowControl(self, flowControl):
        r"""SetFlowControl(osaSerialPort self, osaSerialPort::FlowControlType const & flowControl)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetFlowControl(self, flowControl)

    def SetPortName(self, portName):
        r"""SetPortName(osaSerialPort self, std::string const & portName)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetPortName(self, portName)

    def GetPortName(self):
        r"""GetPortName(osaSerialPort self) -> std::string"""
        return _cisstOSAbstractionPython.osaSerialPort_GetPortName(self)

    def SetPortNumber(self, portNumber):
        r"""SetPortNumber(osaSerialPort self, unsigned int portNumber) -> std::string"""
        return _cisstOSAbstractionPython.osaSerialPort_SetPortNumber(self, portNumber)

    def Open(self, blocking=False):
        r"""Open(osaSerialPort self, bool blocking=False) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Open(self, blocking)

    def Configure(self):
        r"""Configure(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Configure(self)

    def Close(self):
        r"""Close(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Close(self)

    def IsOpened(self):
        r"""IsOpened(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_IsOpened(self)

    def Write(self, *args):
        r"""
        Write(osaSerialPort self, char const * data, int nBytes) -> int
        Write(osaSerialPort self, unsigned char const * data, int nBytes) -> int
        Write(osaSerialPort self, std::string const & data) -> int
        """
        return _cisstOSAbstractionPython.osaSerialPort_Write(self, *args)

    def Read(self, *args):
        r"""
        Read(osaSerialPort self, char * data, int nBytes) -> int
        Read(osaSerialPort self, unsigned char * data, int nBytes) -> int
        """
        return _cisstOSAbstractionPython.osaSerialPort_Read(self, *args)

    def WriteBreak(self, breakLengthInSeconds):
        r"""WriteBreak(osaSerialPort self, double breakLengthInSeconds) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_WriteBreak(self, breakLengthInSeconds)

    def Flush(self):
        r"""Flush(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Flush(self)

# Register osaSerialPort in _cisstOSAbstractionPython:
_cisstOSAbstractionPython.osaSerialPort_swigregister(osaSerialPort)

def osaSerialPort_ClassServices():
    r"""osaSerialPort_ClassServices() -> cmnClassServicesBase"""
    return _cisstOSAbstractionPython.osaSerialPort_ClassServices()



