# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cisstMultiTaskPython
else:
    import _cisstMultiTaskPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_SwigPyIterator

    def value(self):
        return _cisstMultiTaskPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstMultiTaskPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstMultiTaskPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstMultiTaskPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstMultiTaskPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstMultiTaskPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstMultiTaskPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstMultiTaskPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstMultiTaskPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstMultiTaskPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstMultiTaskPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstMultiTaskPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstMultiTaskPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstMultiTaskPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstMultiTaskPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstMultiTaskPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cisstMultiTaskPython:
_cisstMultiTaskPython.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstMultiTaskPython.ios_base_erase_event
    imbue_event = _cisstMultiTaskPython.ios_base_imbue_event
    copyfmt_event = _cisstMultiTaskPython.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _cisstMultiTaskPython.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _cisstMultiTaskPython.ios_base_flags(self, *args)

    def setf(self, *args):
        return _cisstMultiTaskPython.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _cisstMultiTaskPython.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _cisstMultiTaskPython.ios_base_precision(self, *args)

    def width(self, *args):
        return _cisstMultiTaskPython.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _cisstMultiTaskPython.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _cisstMultiTaskPython.ios_base_imbue(self, __loc)

    def getloc(self):
        return _cisstMultiTaskPython.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _cisstMultiTaskPython.ios_base_xalloc()

    def iword(self, __ix):
        return _cisstMultiTaskPython.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _cisstMultiTaskPython.ios_base_pword(self, __ix)
    __swig_destroy__ = _cisstMultiTaskPython.delete_ios_base

# Register ios_base in _cisstMultiTaskPython:
_cisstMultiTaskPython.ios_base_swigregister(ios_base)
cvar = _cisstMultiTaskPython.cvar
ios_base.boolalpha = _cisstMultiTaskPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstMultiTaskPython.cvar.ios_base_dec
ios_base.fixed = _cisstMultiTaskPython.cvar.ios_base_fixed
ios_base.hex = _cisstMultiTaskPython.cvar.ios_base_hex
ios_base.internal = _cisstMultiTaskPython.cvar.ios_base_internal
ios_base.left = _cisstMultiTaskPython.cvar.ios_base_left
ios_base.oct = _cisstMultiTaskPython.cvar.ios_base_oct
ios_base.right = _cisstMultiTaskPython.cvar.ios_base_right
ios_base.scientific = _cisstMultiTaskPython.cvar.ios_base_scientific
ios_base.showbase = _cisstMultiTaskPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstMultiTaskPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstMultiTaskPython.cvar.ios_base_showpos
ios_base.skipws = _cisstMultiTaskPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstMultiTaskPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstMultiTaskPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstMultiTaskPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstMultiTaskPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstMultiTaskPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstMultiTaskPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstMultiTaskPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstMultiTaskPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstMultiTaskPython.cvar.ios_base_goodbit
ios_base.app = _cisstMultiTaskPython.cvar.ios_base_app
ios_base.ate = _cisstMultiTaskPython.cvar.ios_base_ate
ios_base.binary = _cisstMultiTaskPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstMultiTaskPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstMultiTaskPython.cvar.ios_base_out
ios_base.trunc = _cisstMultiTaskPython.cvar.ios_base_trunc
ios_base.beg = _cisstMultiTaskPython.cvar.ios_base_beg
ios_base.cur = _cisstMultiTaskPython.cvar.ios_base_cur
ios_base.end = _cisstMultiTaskPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _cisstMultiTaskPython.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return _cisstMultiTaskPython.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _cisstMultiTaskPython.ios_rdstate(self)

    def clear(self, *args):
        return _cisstMultiTaskPython.ios_clear(self, *args)

    def setstate(self, __state):
        return _cisstMultiTaskPython.ios_setstate(self, __state)

    def good(self):
        return _cisstMultiTaskPython.ios_good(self)

    def eof(self):
        return _cisstMultiTaskPython.ios_eof(self)

    def fail(self):
        return _cisstMultiTaskPython.ios_fail(self)

    def bad(self):
        return _cisstMultiTaskPython.ios_bad(self)

    def exceptions(self, *args):
        return _cisstMultiTaskPython.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _cisstMultiTaskPython.ios_swiginit(self, _cisstMultiTaskPython.new_ios(__sb))
    __swig_destroy__ = _cisstMultiTaskPython.delete_ios

    def tie(self, *args):
        return _cisstMultiTaskPython.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _cisstMultiTaskPython.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _cisstMultiTaskPython.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _cisstMultiTaskPython.ios_fill(self, *args)

    def imbue(self, __loc):
        return _cisstMultiTaskPython.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _cisstMultiTaskPython.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _cisstMultiTaskPython.ios_widen(self, __c)

# Register ios in _cisstMultiTaskPython:
_cisstMultiTaskPython.ios_swigregister(ios)

class streambuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_streambuf

    def pubimbue(self, __loc):
        return _cisstMultiTaskPython.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _cisstMultiTaskPython.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _cisstMultiTaskPython.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _cisstMultiTaskPython.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _cisstMultiTaskPython.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _cisstMultiTaskPython.streambuf_pubsync(self)

    def in_avail(self):
        return _cisstMultiTaskPython.streambuf_in_avail(self)

    def snextc(self):
        return _cisstMultiTaskPython.streambuf_snextc(self)

    def sbumpc(self):
        return _cisstMultiTaskPython.streambuf_sbumpc(self)

    def sgetc(self):
        return _cisstMultiTaskPython.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _cisstMultiTaskPython.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _cisstMultiTaskPython.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _cisstMultiTaskPython.streambuf_sungetc(self)

    def sputc(self, __c):
        return _cisstMultiTaskPython.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _cisstMultiTaskPython.streambuf_sputn(self, __s, __n)

# Register streambuf in _cisstMultiTaskPython:
_cisstMultiTaskPython.streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstMultiTaskPython.ostream_swiginit(self, _cisstMultiTaskPython.new_ostream(__sb))
    __swig_destroy__ = _cisstMultiTaskPython.delete_ostream

    def __lshift__(self, *args):
        return _cisstMultiTaskPython.ostream___lshift__(self, *args)

    def put(self, __c):
        return _cisstMultiTaskPython.ostream_put(self, __c)

    def write(self, __s, __n):
        return _cisstMultiTaskPython.ostream_write(self, __s, __n)

    def flush(self):
        return _cisstMultiTaskPython.ostream_flush(self)

    def tellp(self):
        return _cisstMultiTaskPython.ostream_tellp(self)

    def seekp(self, *args):
        return _cisstMultiTaskPython.ostream_seekp(self, *args)

# Register ostream in _cisstMultiTaskPython:
_cisstMultiTaskPython.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstMultiTaskPython.istream_swiginit(self, _cisstMultiTaskPython.new_istream(__sb))
    __swig_destroy__ = _cisstMultiTaskPython.delete_istream

    def __rshift__(self, *args):
        return _cisstMultiTaskPython.istream___rshift__(self, *args)

    def gcount(self):
        return _cisstMultiTaskPython.istream_gcount(self)

    def get(self, *args):
        return _cisstMultiTaskPython.istream_get(self, *args)

    def getline(self, *args):
        return _cisstMultiTaskPython.istream_getline(self, *args)

    def ignore(self, *args):
        return _cisstMultiTaskPython.istream_ignore(self, *args)

    def peek(self):
        return _cisstMultiTaskPython.istream_peek(self)

    def read(self, __s, __n):
        return _cisstMultiTaskPython.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _cisstMultiTaskPython.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _cisstMultiTaskPython.istream_putback(self, __c)

    def unget(self):
        return _cisstMultiTaskPython.istream_unget(self)

    def sync(self):
        return _cisstMultiTaskPython.istream_sync(self)

    def tellg(self):
        return _cisstMultiTaskPython.istream_tellg(self)

    def seekg(self, *args):
        return _cisstMultiTaskPython.istream_seekg(self, *args)

# Register istream in _cisstMultiTaskPython:
_cisstMultiTaskPython.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstMultiTaskPython.iostream_swiginit(self, _cisstMultiTaskPython.new_iostream(__sb))
    __swig_destroy__ = _cisstMultiTaskPython.delete_iostream

# Register iostream in _cisstMultiTaskPython:
_cisstMultiTaskPython.iostream_swigregister(iostream)

endl_cb_ptr = _cisstMultiTaskPython.endl_cb_ptr
endl = _cisstMultiTaskPython.endl
ends_cb_ptr = _cisstMultiTaskPython.ends_cb_ptr
ends = _cisstMultiTaskPython.ends
flush_cb_ptr = _cisstMultiTaskPython.flush_cb_ptr
flush = _cisstMultiTaskPython.flush
import cisstCommonPython
import cisstVectorPython
import cisstOSAbstractionPython

import time

class mtsStringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsStringVector self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsStringVector self) -> bool"""
        return _cisstMultiTaskPython.mtsStringVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsStringVector self) -> bool"""
        return _cisstMultiTaskPython.mtsStringVector___bool__(self)

    def __len__(self):
        r"""__len__(mtsStringVector self) -> std::vector< std::string >::size_type"""
        return _cisstMultiTaskPython.mtsStringVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, mtsStringVector v)
        """
        return _cisstMultiTaskPython.mtsStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _cisstMultiTaskPython.mtsStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsStringVector self, std::vector< std::string >::difference_type i)
        __delitem__(mtsStringVector self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsStringVector self, PySliceObject * slice) -> mtsStringVector
        __getitem__(mtsStringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsStringVector self, PySliceObject * slice, mtsStringVector v)
        __setitem__(mtsStringVector self, PySliceObject * slice)
        __setitem__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsStringVector___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsStringVector self) -> std::vector< std::string >::value_type"""
        return _cisstMultiTaskPython.mtsStringVector_pop(self)

    def append(self, x):
        r"""append(mtsStringVector self, std::vector< std::string >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsStringVector_append(self, x)

    def empty(self):
        r"""empty(mtsStringVector self) -> bool"""
        return _cisstMultiTaskPython.mtsStringVector_empty(self)

    def size(self):
        r"""size(mtsStringVector self) -> std::vector< std::string >::size_type"""
        return _cisstMultiTaskPython.mtsStringVector_size(self)

    def swap(self, v):
        r"""swap(mtsStringVector self, mtsStringVector v)"""
        return _cisstMultiTaskPython.mtsStringVector_swap(self, v)

    def begin(self):
        r"""begin(mtsStringVector self) -> std::vector< std::string >::iterator"""
        return _cisstMultiTaskPython.mtsStringVector_begin(self)

    def end(self):
        r"""end(mtsStringVector self) -> std::vector< std::string >::iterator"""
        return _cisstMultiTaskPython.mtsStringVector_end(self)

    def rbegin(self):
        r"""rbegin(mtsStringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsStringVector_rbegin(self)

    def rend(self):
        r"""rend(mtsStringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsStringVector_rend(self)

    def clear(self):
        r"""clear(mtsStringVector self)"""
        return _cisstMultiTaskPython.mtsStringVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsStringVector self) -> std::vector< std::string >::allocator_type"""
        return _cisstMultiTaskPython.mtsStringVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsStringVector self)"""
        return _cisstMultiTaskPython.mtsStringVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsStringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(mtsStringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _cisstMultiTaskPython.mtsStringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsStringVector self) -> mtsStringVector
        __init__(mtsStringVector self, mtsStringVector other) -> mtsStringVector
        __init__(mtsStringVector self, std::vector< std::string >::size_type size) -> mtsStringVector
        __init__(mtsStringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> mtsStringVector
        """
        _cisstMultiTaskPython.mtsStringVector_swiginit(self, _cisstMultiTaskPython.new_mtsStringVector(*args))

    def push_back(self, x):
        r"""push_back(mtsStringVector self, std::vector< std::string >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsStringVector_push_back(self, x)

    def front(self):
        r"""front(mtsStringVector self) -> std::vector< std::string >::value_type const &"""
        return _cisstMultiTaskPython.mtsStringVector_front(self)

    def back(self):
        r"""back(mtsStringVector self) -> std::vector< std::string >::value_type const &"""
        return _cisstMultiTaskPython.mtsStringVector_back(self)

    def assign(self, n, x):
        r"""assign(mtsStringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsStringVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsStringVector self, std::vector< std::string >::size_type new_size)
        resize(mtsStringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsStringVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsStringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(mtsStringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsStringVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsStringVector self, std::vector< std::string >::size_type n)"""
        return _cisstMultiTaskPython.mtsStringVector_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsStringVector self) -> std::vector< std::string >::size_type"""
        return _cisstMultiTaskPython.mtsStringVector_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStringVector

# Register mtsStringVector in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStringVector_swigregister(mtsStringVector)

class mtsDoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsDoubleVector self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsDoubleVector self) -> bool"""
        return _cisstMultiTaskPython.mtsDoubleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsDoubleVector self) -> bool"""
        return _cisstMultiTaskPython.mtsDoubleVector___bool__(self)

    def __len__(self):
        r"""__len__(mtsDoubleVector self) -> std::vector< double >::size_type"""
        return _cisstMultiTaskPython.mtsDoubleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> mtsDoubleVector"""
        return _cisstMultiTaskPython.mtsDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, mtsDoubleVector v)
        """
        return _cisstMultiTaskPython.mtsDoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _cisstMultiTaskPython.mtsDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsDoubleVector self, std::vector< double >::difference_type i)
        __delitem__(mtsDoubleVector self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsDoubleVector self, PySliceObject * slice) -> mtsDoubleVector
        __getitem__(mtsDoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _cisstMultiTaskPython.mtsDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsDoubleVector self, PySliceObject * slice, mtsDoubleVector v)
        __setitem__(mtsDoubleVector self, PySliceObject * slice)
        __setitem__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsDoubleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsDoubleVector self) -> std::vector< double >::value_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_pop(self)

    def append(self, x):
        r"""append(mtsDoubleVector self, std::vector< double >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsDoubleVector_append(self, x)

    def empty(self):
        r"""empty(mtsDoubleVector self) -> bool"""
        return _cisstMultiTaskPython.mtsDoubleVector_empty(self)

    def size(self):
        r"""size(mtsDoubleVector self) -> std::vector< double >::size_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_size(self)

    def swap(self, v):
        r"""swap(mtsDoubleVector self, mtsDoubleVector v)"""
        return _cisstMultiTaskPython.mtsDoubleVector_swap(self, v)

    def begin(self):
        r"""begin(mtsDoubleVector self) -> std::vector< double >::iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_begin(self)

    def end(self):
        r"""end(mtsDoubleVector self) -> std::vector< double >::iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_end(self)

    def rbegin(self):
        r"""rbegin(mtsDoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_rbegin(self)

    def rend(self):
        r"""rend(mtsDoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_rend(self)

    def clear(self):
        r"""clear(mtsDoubleVector self)"""
        return _cisstMultiTaskPython.mtsDoubleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsDoubleVector self) -> std::vector< double >::allocator_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsDoubleVector self)"""
        return _cisstMultiTaskPython.mtsDoubleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsDoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(mtsDoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _cisstMultiTaskPython.mtsDoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleVector self) -> mtsDoubleVector
        __init__(mtsDoubleVector self, mtsDoubleVector other) -> mtsDoubleVector
        __init__(mtsDoubleVector self, std::vector< double >::size_type size) -> mtsDoubleVector
        __init__(mtsDoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> mtsDoubleVector
        """
        _cisstMultiTaskPython.mtsDoubleVector_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleVector(*args))

    def push_back(self, x):
        r"""push_back(mtsDoubleVector self, std::vector< double >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsDoubleVector_push_back(self, x)

    def front(self):
        r"""front(mtsDoubleVector self) -> std::vector< double >::value_type const &"""
        return _cisstMultiTaskPython.mtsDoubleVector_front(self)

    def back(self):
        r"""back(mtsDoubleVector self) -> std::vector< double >::value_type const &"""
        return _cisstMultiTaskPython.mtsDoubleVector_back(self)

    def assign(self, n, x):
        r"""assign(mtsDoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsDoubleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsDoubleVector self, std::vector< double >::size_type new_size)
        resize(mtsDoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsDoubleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsDoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(mtsDoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsDoubleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsDoubleVector self, std::vector< double >::size_type n)"""
        return _cisstMultiTaskPython.mtsDoubleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsDoubleVector self) -> std::vector< double >::size_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleVector

# Register mtsDoubleVector in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleVector_swigregister(mtsDoubleVector)

MTS_COMPONENT_POLICY = _cisstMultiTaskPython.MTS_COMPONENT_POLICY

MTS_COMMANDS_SHOULD_NOT_BE_QUEUED = _cisstMultiTaskPython.MTS_COMMANDS_SHOULD_NOT_BE_QUEUED

MTS_COMMANDS_SHOULD_BE_QUEUED = _cisstMultiTaskPython.MTS_COMMANDS_SHOULD_BE_QUEUED

MTS_INTERFACE_COMMAND_POLICY = _cisstMultiTaskPython.MTS_INTERFACE_COMMAND_POLICY

MTS_COMMAND_QUEUED = _cisstMultiTaskPython.MTS_COMMAND_QUEUED

MTS_COMMAND_NOT_QUEUED = _cisstMultiTaskPython.MTS_COMMAND_NOT_QUEUED

MTS_INTERFACE_EVENT_POLICY = _cisstMultiTaskPython.MTS_INTERFACE_EVENT_POLICY

MTS_EVENT_QUEUED = _cisstMultiTaskPython.MTS_EVENT_QUEUED

MTS_EVENT_NOT_QUEUED = _cisstMultiTaskPython.MTS_EVENT_NOT_QUEUED

MTS_OPTIONAL = _cisstMultiTaskPython.MTS_OPTIONAL

MTS_REQUIRED = _cisstMultiTaskPython.MTS_REQUIRED

MTS_BLOCKING = _cisstMultiTaskPython.MTS_BLOCKING

MTS_NOT_BLOCKING = _cisstMultiTaskPython.MTS_NOT_BLOCKING

class mtsExecutionResult(object):
    r"""Proxy of C++ mtsExecutionResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsExecutionResult
    UNDEFINED = _cisstMultiTaskPython.mtsExecutionResult_UNDEFINED
    
    COMMAND_SUCCEEDED = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_SUCCEEDED
    
    COMMAND_QUEUED = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_QUEUED
    
    FUNCTION_NOT_BOUND = _cisstMultiTaskPython.mtsExecutionResult_FUNCTION_NOT_BOUND
    
    COMMAND_HAS_NO_MAILBOX = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_HAS_NO_MAILBOX
    
    COMMAND_DISABLED = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_DISABLED
    
    INTERFACE_COMMAND_MAILBOX_FULL = _cisstMultiTaskPython.mtsExecutionResult_INTERFACE_COMMAND_MAILBOX_FULL
    
    COMMAND_ARGUMENT_QUEUE_FULL = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_ARGUMENT_QUEUE_FULL
    
    INVALID_INPUT_TYPE = _cisstMultiTaskPython.mtsExecutionResult_INVALID_INPUT_TYPE
    
    METHOD_OR_FUNCTION_FAILED = _cisstMultiTaskPython.mtsExecutionResult_METHOD_OR_FUNCTION_FAILED
    
    NETWORK_ERROR = _cisstMultiTaskPython.mtsExecutionResult_NETWORK_ERROR
    
    INVALID_COMMAND_ID = _cisstMultiTaskPython.mtsExecutionResult_INVALID_COMMAND_ID
    
    ARGUMENT_DYNAMIC_CREATION_FAILED = _cisstMultiTaskPython.mtsExecutionResult_ARGUMENT_DYNAMIC_CREATION_FAILED
    
    SERIALIZATION_ERROR = _cisstMultiTaskPython.mtsExecutionResult_SERIALIZATION_ERROR
    
    DESERIALIZATION_ERROR = _cisstMultiTaskPython.mtsExecutionResult_DESERIALIZATION_ERROR
    
    NO_FINISHED_EVENT = _cisstMultiTaskPython.mtsExecutionResult_NO_FINISHED_EVENT
    

    @staticmethod
    def EnumToString(value):
        r"""EnumToString(mtsExecutionResult::Enum const & value) -> std::string"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumToString(value)

    @staticmethod
    def EnumFromString(value):
        r"""EnumFromString(std::string const & value) -> mtsExecutionResult::Enum"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumFromString(value)

    @staticmethod
    def EnumVectorInt():
        r"""EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorInt()

    @staticmethod
    def EnumVectorString():
        r"""EnumVectorString() -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorString()

    def GetValue(self, placeHolder):
        r"""GetValue(mtsExecutionResult self, mtsExecutionResult::Enum & placeHolder)"""
        return _cisstMultiTaskPython.mtsExecutionResult_GetValue(self, placeHolder)

    def SetValue(self, newValue):
        r"""SetValue(mtsExecutionResult self, mtsExecutionResult::Enum const & newValue)"""
        return _cisstMultiTaskPython.mtsExecutionResult_SetValue(self, newValue)

    def Value(self, *args):
        r"""
        Value(mtsExecutionResult self) -> mtsExecutionResult::Enum const
        Value(mtsExecutionResult self) -> mtsExecutionResult::Enum &
        """
        return _cisstMultiTaskPython.mtsExecutionResult_Value(self, *args)

    def __eq__(self, state):
        r"""__eq__(mtsExecutionResult self, mtsExecutionResult state) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult___eq__(self, state)

    def __ne__(self, state):
        r"""__ne__(mtsExecutionResult self, mtsExecutionResult state) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult___ne__(self, state)

    def GetResult(self):
        r"""GetResult(mtsExecutionResult self) -> mtsExecutionResult::Enum"""
        return _cisstMultiTaskPython.mtsExecutionResult_GetResult(self)

    def IsOK(self):
        r"""IsOK(mtsExecutionResult self) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult_IsOK(self)

    def __nonzero__(self):
        return _cisstMultiTaskPython.mtsExecutionResult___nonzero__(self)
    __bool__ = __nonzero__



    def __init__(self, *args):
        r"""
        __init__(mtsExecutionResult self) -> mtsExecutionResult
        __init__(mtsExecutionResult self, mtsExecutionResult other) -> mtsExecutionResult
        __init__(mtsExecutionResult self, mtsExecutionResult::Enum const & newValue) -> mtsExecutionResult
        """
        _cisstMultiTaskPython.mtsExecutionResult_swiginit(self, _cisstMultiTaskPython.new_mtsExecutionResult(*args))

    def Copy(self, source):
        r"""Copy(mtsExecutionResult self, mtsExecutionResult source)"""
        return _cisstMultiTaskPython.mtsExecutionResult_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsExecutionResult self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsExecutionResult self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsExecutionResult_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsExecutionResult self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsExecutionResult self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsExecutionResult self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsExecutionResult_DeSerializeText(self, *args)

    def __str__(self, *args):
        r"""
        __str__(mtsExecutionResult self, mtsExecutionResult::Enum const & value) -> std::string const
        __str__(mtsExecutionResult self) -> std::string
        """
        return _cisstMultiTaskPython.mtsExecutionResult___str__(self, *args)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsExecutionResult self) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsExecutionResult self) -> size_t"""
        return _cisstMultiTaskPython.mtsExecutionResult_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsExecutionResult self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsExecutionResult_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsExecutionResult self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsExecutionResult_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsExecutionResult self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsExecutionResult self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsExecutionResult_DeSerializeTextJSON(self, jsonValue)

# Register mtsExecutionResult in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsExecutionResult_swigregister(mtsExecutionResult)
InvalidConnectionID = cvar.InvalidConnectionID

def mtsExecutionResult_EnumToString(value):
    r"""mtsExecutionResult_EnumToString(mtsExecutionResult::Enum const & value) -> std::string"""
    return _cisstMultiTaskPython.mtsExecutionResult_EnumToString(value)

def mtsExecutionResult_EnumFromString(value):
    r"""mtsExecutionResult_EnumFromString(std::string const & value) -> mtsExecutionResult::Enum"""
    return _cisstMultiTaskPython.mtsExecutionResult_EnumFromString(value)

def mtsExecutionResult_EnumVectorInt():
    r"""mtsExecutionResult_EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
    return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorInt()

def mtsExecutionResult_EnumVectorString():
    r"""mtsExecutionResult_EnumVectorString() -> mtsStringVector"""
    return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorString()


def cmnDataHumanReadable_mtsExecutionResult_Enum(data):
    r"""cmnDataHumanReadable_mtsExecutionResult_Enum(mtsExecutionResult::Enum const & data) -> std::string"""
    return _cisstMultiTaskPython.cmnDataHumanReadable_mtsExecutionResult_Enum(data)
class mtsGenericObject(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ mtsGenericObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTimestamp(self, newValue):
        r"""SetTimestamp(mtsGenericObject self, double const & newValue)"""
        return _cisstMultiTaskPython.mtsGenericObject_SetTimestamp(self, newValue)

    def Timestamp(self, *args):
        r"""
        Timestamp(mtsGenericObject self) -> double const
        Timestamp(mtsGenericObject self) -> double &
        """
        return _cisstMultiTaskPython.mtsGenericObject_Timestamp(self, *args)

    def GetTimestamp(self, *args):
        r"""
        GetTimestamp(mtsGenericObject self, double & placeHolder)
        GetTimestamp(mtsGenericObject self) -> double const &
        """
        return _cisstMultiTaskPython.mtsGenericObject_GetTimestamp(self, *args)

    def SetAutomaticTimestamp(self, newValue):
        r"""SetAutomaticTimestamp(mtsGenericObject self, bool const & newValue)"""
        return _cisstMultiTaskPython.mtsGenericObject_SetAutomaticTimestamp(self, newValue)

    def AutomaticTimestamp(self, *args):
        r"""
        AutomaticTimestamp(mtsGenericObject self) -> bool const
        AutomaticTimestamp(mtsGenericObject self) -> bool &
        """
        return _cisstMultiTaskPython.mtsGenericObject_AutomaticTimestamp(self, *args)

    def GetAutomaticTimestamp(self, *args):
        r"""
        GetAutomaticTimestamp(mtsGenericObject self, bool & placeHolder)
        GetAutomaticTimestamp(mtsGenericObject self) -> bool const &
        """
        return _cisstMultiTaskPython.mtsGenericObject_GetAutomaticTimestamp(self, *args)

    def SetValid(self, newValue):
        r"""SetValid(mtsGenericObject self, bool const & newValue)"""
        return _cisstMultiTaskPython.mtsGenericObject_SetValid(self, newValue)

    def Valid(self, *args):
        r"""
        Valid(mtsGenericObject self) -> bool const
        Valid(mtsGenericObject self) -> bool &
        """
        return _cisstMultiTaskPython.mtsGenericObject_Valid(self, *args)

    def GetValid(self, *args):
        r"""
        GetValid(mtsGenericObject self, bool & placeHolder)
        GetValid(mtsGenericObject self) -> bool const &
        """
        return _cisstMultiTaskPython.mtsGenericObject_GetValid(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsGenericObject

    def SetTimestampIfAutomatic(self, timestamp):
        r"""SetTimestampIfAutomatic(mtsGenericObject self, double timestamp) -> bool"""
        return _cisstMultiTaskPython.mtsGenericObject_SetTimestampIfAutomatic(self, timestamp)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsGenericObject self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsGenericObject_ScalarDescription(self, *args)

# Register mtsGenericObject in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsGenericObject_swigregister(mtsGenericObject)

class mtsCommandBase(object):
    r"""Proxy of C++ mtsCommandBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandBase

    def __str__(self):
        r"""__str__(mtsCommandBase self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandBase___str__(self)

    def NumberOfArguments(self):
        r"""NumberOfArguments(mtsCommandBase self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandBase_NumberOfArguments(self)

    def Returns(self):
        r"""Returns(mtsCommandBase self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandBase_Returns(self)

    def Enable(self):
        r"""Enable(mtsCommandBase self)"""
        return _cisstMultiTaskPython.mtsCommandBase_Enable(self)

    def Disable(self):
        r"""Disable(mtsCommandBase self)"""
        return _cisstMultiTaskPython.mtsCommandBase_Disable(self)

    def IsEnabled(self):
        r"""IsEnabled(mtsCommandBase self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandBase_IsEnabled(self)

    def IsDisabled(self):
        r"""IsDisabled(mtsCommandBase self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandBase_IsDisabled(self)

    def GetName(self):
        r"""GetName(mtsCommandBase self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsCommandBase_GetName(self)

# Register mtsCommandBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandBase_swigregister(mtsCommandBase)

class mtsCommandVoid(mtsCommandBase):
    r"""Proxy of C++ mtsCommandVoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsCommandVoid self) -> mtsCommandVoid
        __init__(mtsCommandVoid self, mtsCallableVoidBase * callable, std::string const & name) -> mtsCommandVoid
        """
        _cisstMultiTaskPython.mtsCommandVoid_swiginit(self, _cisstMultiTaskPython.new_mtsCommandVoid(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoid

    def Execute(self, *args):
        r"""
        Execute(mtsCommandVoid self, mtsBlockingType MARKED_AS_UNUSEDblocking) -> mtsExecutionResult
        Execute(mtsCommandVoid self, mtsBlockingType blocking, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandVoid_Execute(self, *args)

    def GetCallable(self):
        r"""GetCallable(mtsCommandVoid self) -> mtsCallableVoidBase *"""
        return _cisstMultiTaskPython.mtsCommandVoid_GetCallable(self)

    def __call__(self):
        return self.Execute(MTS_NOT_BLOCKING).GetResult()


# Register mtsCommandVoid in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandVoid_swigregister(mtsCommandVoid)

class mtsCommandVoidReturn(mtsCommandBase):
    r"""Proxy of C++ mtsCommandVoidReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsCommandVoidReturn self) -> mtsCommandVoidReturn
        __init__(mtsCommandVoidReturn self, std::string const & name) -> mtsCommandVoidReturn
        __init__(mtsCommandVoidReturn self, mtsCallableVoidReturnBase * callable, std::string const & name, mtsGenericObject resultPrototype) -> mtsCommandVoidReturn
        """
        _cisstMultiTaskPython.mtsCommandVoidReturn_swiginit(self, _cisstMultiTaskPython.new_mtsCommandVoidReturn(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoidReturn

    def Execute(self, *args):
        r"""
        Execute(mtsCommandVoidReturn self, mtsGenericObject result) -> mtsExecutionResult
        Execute(mtsCommandVoidReturn self, mtsGenericObject result, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandVoidReturn_Execute(self, *args)

    def GetCallable(self):
        r"""GetCallable(mtsCommandVoidReturn self) -> mtsCallableVoidReturnBase *"""
        return _cisstMultiTaskPython.mtsCommandVoidReturn_GetCallable(self)

    def GetResultPrototype(self):
        r"""GetResultPrototype(mtsCommandVoidReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandVoidReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmpObject = self.GetResultPrototype().Services().Create()
            self.ArgumentType = tmpObject.__class__
        except Exception as e:
            print('VoidReturn command ' + self.GetName() + ': ' + str(e))


    def __call__(self):
    # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetResultPrototype())
        except Exception:
            argument = self.GetResultPrototype()
    # Probably should check return value below
        self.Execute(argument)
    # If argument has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument


# Register mtsCommandVoidReturn in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandVoidReturn_swigregister(mtsCommandVoidReturn)

class mtsCommandRead(mtsCommandBase):
    r"""Proxy of C++ mtsCommandRead class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsCommandRead self) -> mtsCommandRead
        __init__(mtsCommandRead self, std::string const & name) -> mtsCommandRead
        __init__(mtsCommandRead self, mtsCallableReadBase * callable, std::string const & name, mtsGenericObject argumentPrototype) -> mtsCommandRead
        """
        _cisstMultiTaskPython.mtsCommandRead_swiginit(self, _cisstMultiTaskPython.new_mtsCommandRead(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandRead

    def Execute(self, *args):
        r"""
        Execute(mtsCommandRead self, mtsGenericObject argument) -> mtsExecutionResult
        Execute(mtsCommandRead self, mtsGenericObject argument, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandRead_Execute(self, *args)

    def GetCallable(self):
        r"""GetCallable(mtsCommandRead self) -> mtsCallableReadBase *"""
        return _cisstMultiTaskPython.mtsCommandRead_GetCallable(self)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsCommandRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandRead_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        r"""GetResultPrototype(mtsCommandRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandRead_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmpObject = self.GetArgumentPrototype().Services().Create()
            self.ArgumentType = tmpObject.__class__
        except Exception as e:
            print('Read command ' + self.GetName() + ': ' + str(e))
        except AttributeError as e:
            print('Read command ' + self.GetName() + ': ' + str(e))


    def __call__(self):
    # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetArgumentPrototype())
        except Exception:
            argument = self.GetArgumentPrototype()
    # Probably should check return value below
        self.Execute(argument)
    # If argument has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument


# Register mtsCommandRead in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandRead_swigregister(mtsCommandRead)

class mtsCommandWriteBase(mtsCommandBase):
    r"""Proxy of C++ mtsCommandWriteBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteBase

    def Execute(self, *args):
        r"""
        Execute(mtsCommandWriteBase self, mtsGenericObject argument, mtsBlockingType blocking) -> mtsExecutionResult
        Execute(mtsCommandWriteBase self, mtsGenericObject argument, mtsBlockingType blocking, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandWriteBase_Execute(self, *args)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsCommandWriteBase self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandWriteBase_GetArgumentPrototype(self)

    def GetArgumentClassServices(self):
        r"""GetArgumentClassServices(mtsCommandWriteBase self) -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsCommandWriteBase_GetArgumentClassServices(self)

    def UpdateFromC(self):
        try:
            tmpObject = self.GetArgumentClassServices().Create()
            self.ArgumentType = tmpObject.__class__
        except Exception as e:
            print('Write command ' + self.GetName() + ': ' + str(e))

    def __call__(self, argument):
        if isinstance(argument, self.ArgumentType):
            return self.Execute(argument, MTS_NOT_BLOCKING).GetResult()
        else:
            realArgument = self.ArgumentType(argument)
            return self.Execute(realArgument, MTS_NOT_BLOCKING).GetResult()


# Register mtsCommandWriteBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandWriteBase_swigregister(mtsCommandWriteBase)

class mtsCommandWriteReturn(mtsCommandBase):
    r"""Proxy of C++ mtsCommandWriteReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsCommandWriteReturn self) -> mtsCommandWriteReturn
        __init__(mtsCommandWriteReturn self, std::string const & name) -> mtsCommandWriteReturn
        __init__(mtsCommandWriteReturn self, mtsCallableWriteReturnBase * callable, std::string const & name, mtsGenericObject argumentPrototype, mtsGenericObject resultPrototype) -> mtsCommandWriteReturn
        """
        _cisstMultiTaskPython.mtsCommandWriteReturn_swiginit(self, _cisstMultiTaskPython.new_mtsCommandWriteReturn(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteReturn

    def Execute(self, *args):
        r"""
        Execute(mtsCommandWriteReturn self, mtsGenericObject argument, mtsGenericObject result) -> mtsExecutionResult
        Execute(mtsCommandWriteReturn self, mtsGenericObject argument, mtsGenericObject result, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandWriteReturn_Execute(self, *args)

    def GetCallable(self):
        r"""GetCallable(mtsCommandWriteReturn self) -> mtsCallableWriteReturnBase *"""
        return _cisstMultiTaskPython.mtsCommandWriteReturn_GetCallable(self)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsCommandWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandWriteReturn_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        r"""GetResultPrototype(mtsCommandWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandWriteReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmp1Object = self.GetArgumentPrototype().Services().Create()
            self.ArgumentType = tmp1Object.__class__
            tmp2Object = self.GetResultPrototype().Services().Create()
            self.ResultType = tmp2Object.__class__
        except Exception as e:
            print('WriteReturn command ' + self.GetName() + ': ' + str(e))

    def __call__(self, argument):
        result = self.ResultType(self.GetResultPrototype())
    # Probably should check return value of self.Execute
        if isinstance(argument, self.ArgumentType):
            self.Execute(argument, result)
        else:
            realArgument = self.ArgumentType(argument1)
            self.Execute(realArgument, result)
    # If result has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(result,"GetDataCopy"):
            return result.GetDataCopy()
        else:
            return result


# Register mtsCommandWriteReturn in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandWriteReturn_swigregister(mtsCommandWriteReturn)

class mtsCommandQualifiedRead(mtsCommandBase):
    r"""Proxy of C++ mtsCommandQualifiedRead class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsCommandQualifiedRead self) -> mtsCommandQualifiedRead
        __init__(mtsCommandQualifiedRead self, std::string const & name) -> mtsCommandQualifiedRead
        __init__(mtsCommandQualifiedRead self, mtsCallableQualifiedReadBase * callable, std::string const & name, mtsGenericObject argument1Prototype, mtsGenericObject argument2Prototype) -> mtsCommandQualifiedRead
        """
        _cisstMultiTaskPython.mtsCommandQualifiedRead_swiginit(self, _cisstMultiTaskPython.new_mtsCommandQualifiedRead(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandQualifiedRead

    def Execute(self, *args):
        r"""
        Execute(mtsCommandQualifiedRead self, mtsGenericObject argument1, mtsGenericObject argument2) -> mtsExecutionResult
        Execute(mtsCommandQualifiedRead self, mtsGenericObject argument1, mtsGenericObject argument2, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_Execute(self, *args)

    def GetCallable(self):
        r"""GetCallable(mtsCommandQualifiedRead self) -> mtsCallableQualifiedReadBase *"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetCallable(self)

    def GetArgument1Prototype(self):
        r"""GetArgument1Prototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetArgument1Prototype(self)

    def GetArgument2Prototype(self):
        r"""GetArgument2Prototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetArgument2Prototype(self)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        r"""GetResultPrototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmp1Object = self.GetArgument1Prototype().Services().Create()
            self.Argument1Type = tmp1Object.__class__
            tmp2Object = self.GetArgument2Prototype().Services().Create()
            self.Argument2Type = tmp2Object.__class__
        except Exception as e:
            print('Qualified read command ' + self.GetName() + ': ' + str(e))

    def __call__(self, argument1):
        argument2 = self.Argument2Type(self.GetArgument2Prototype())
    # Probably should check return value of self.Execute
        if isinstance(argument1, self.Argument1Type):
            self.Execute(argument1, argument2)
        else:
            realArgument1 = self.Argument1Type(argument1)
            self.Execute(realArgument1, argument2)
    # If argument2 has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument2,"GetDataCopy"):
            return argument2.GetDataCopy()
        else:
            return argument2


# Register mtsCommandQualifiedRead in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandQualifiedRead_swigregister(mtsCommandQualifiedRead)

class mtsEventReceiverBase(object):
    r"""Proxy of C++ mtsEventReceiverBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventReceiverBase

    def SetName(self, name):
        r"""SetName(mtsEventReceiverBase self, std::string const & name)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_SetName(self, name)

    def GetName(self):
        r"""GetName(mtsEventReceiverBase self) -> std::string"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_GetName(self)

    def SetRequired(self, name, req):
        r"""SetRequired(mtsEventReceiverBase self, std::string const & name, mtsInterfaceRequired req)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_SetRequired(self, name, req)

    def SetThreadSignal(self, signal):
        r"""SetThreadSignal(mtsEventReceiverBase self, osaThreadSignal * signal)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_SetThreadSignal(self, signal)

    def ClearWait(self):
        r"""ClearWait(mtsEventReceiverBase self)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_ClearWait(self)

    def PrepareToWait(self):
        r"""PrepareToWait(mtsEventReceiverBase self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_PrepareToWait(self)

    def Wait(self):
        r"""Wait(mtsEventReceiverBase self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_Wait(self)

    def WaitWithTimeout(self, timeoutInSec):
        r"""WaitWithTimeout(mtsEventReceiverBase self, double timeoutInSec) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_WaitWithTimeout(self, timeoutInSec)

    def Detach(self):
        r"""Detach(mtsEventReceiverBase self)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_Detach(self)

# Register mtsEventReceiverBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventReceiverBase_swigregister(mtsEventReceiverBase)

class mtsEventReceiverVoid(mtsEventReceiverBase):
    r"""Proxy of C++ mtsEventReceiverVoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(mtsEventReceiverVoid self) -> mtsEventReceiverVoid"""
        _cisstMultiTaskPython.mtsEventReceiverVoid_swiginit(self, _cisstMultiTaskPython.new_mtsEventReceiverVoid())
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventReceiverVoid

    def GetCommand(self):
        r"""GetCommand(mtsEventReceiverVoid self) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_GetCommand(self)

    def SetHandlerCommand(self, commandHandler):
        r"""SetHandlerCommand(mtsEventReceiverVoid self, mtsCommandVoid commandHandler)"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_SetHandlerCommand(self, commandHandler)

    def SetHandler(self, function, queueingPolicy=MTS_INTERFACE_EVENT_POLICY):
        r"""SetHandler(mtsEventReceiverVoid self, void (*)(void) function, mtsEventQueueingPolicy queueingPolicy=MTS_INTERFACE_EVENT_POLICY) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_SetHandler(self, function, queueingPolicy)

    def RemoveHandler(self):
        r"""RemoveHandler(mtsEventReceiverVoid self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_RemoveHandler(self)

# Register mtsEventReceiverVoid in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventReceiverVoid_swigregister(mtsEventReceiverVoid)

class mtsEventReceiverWrite(mtsEventReceiverBase):
    r"""Proxy of C++ mtsEventReceiverWrite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(mtsEventReceiverWrite self) -> mtsEventReceiverWrite"""
        _cisstMultiTaskPython.mtsEventReceiverWrite_swiginit(self, _cisstMultiTaskPython.new_mtsEventReceiverWrite())
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventReceiverWrite

    def GetCommand(self):
        r"""GetCommand(mtsEventReceiverWrite self) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsEventReceiverWrite_GetCommand(self)

    def SetHandlerCommand(self, commandHandler):
        r"""SetHandlerCommand(mtsEventReceiverWrite self, mtsCommandWriteBase commandHandler)"""
        return _cisstMultiTaskPython.mtsEventReceiverWrite_SetHandlerCommand(self, commandHandler)

    def Wait(self, *args):
        r"""
        Wait(mtsEventReceiverWrite self) -> bool
        Wait(mtsEventReceiverWrite self, mtsGenericObject obj) -> bool
        """
        return _cisstMultiTaskPython.mtsEventReceiverWrite_Wait(self, *args)

    def WaitWithTimeout(self, *args):
        r"""
        WaitWithTimeout(mtsEventReceiverWrite self, double timeoutInSec) -> bool
        WaitWithTimeout(mtsEventReceiverWrite self, double timeoutInSec, mtsGenericObject obj) -> bool
        """
        return _cisstMultiTaskPython.mtsEventReceiverWrite_WaitWithTimeout(self, *args)

    def RemoveHandler(self):
        r"""RemoveHandler(mtsEventReceiverWrite self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverWrite_RemoveHandler(self)

# Register mtsEventReceiverWrite in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventReceiverWrite_swigregister(mtsEventReceiverWrite)

class mtsFunctionBase(object):
    r"""Proxy of C++ mtsFunctionBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Detach(self):
        r"""Detach(mtsFunctionBase self) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionBase_Detach(self)

    def IsValid(self):
        r"""IsValid(mtsFunctionBase self) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionBase_IsValid(self)

    def InitCompletionCommand(self, name):
        r"""InitCompletionCommand(mtsFunctionBase self, std::string const & name)"""
        return _cisstMultiTaskPython.mtsFunctionBase_InitCompletionCommand(self, name)

    def SetThreadSignal(self, threadSignal):
        r"""SetThreadSignal(mtsFunctionBase self, osaThreadSignal * threadSignal)"""
        return _cisstMultiTaskPython.mtsFunctionBase_SetThreadSignal(self, threadSignal)

    def ThreadSignalWait(self):
        r"""ThreadSignalWait(mtsFunctionBase self)"""
        return _cisstMultiTaskPython.mtsFunctionBase_ThreadSignalWait(self)

    def WaitForResult(self, *args):
        r"""
        WaitForResult(mtsFunctionBase self, mtsGenericObject arg) -> mtsExecutionResult
        WaitForResult(mtsFunctionBase self) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsFunctionBase_WaitForResult(self, *args)

# Register mtsFunctionBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionBase_swigregister(mtsFunctionBase)

class mtsFunctionVoid(mtsFunctionBase):
    r"""Proxy of C++ mtsFunctionVoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, isProxy=False):
        r"""__init__(mtsFunctionVoid self, bool const isProxy=False) -> mtsFunctionVoid"""
        _cisstMultiTaskPython.mtsFunctionVoid_swiginit(self, _cisstMultiTaskPython.new_mtsFunctionVoid(isProxy))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionVoid

    def Bind(self, command):
        r"""Bind(mtsFunctionVoid self, mtsCommandVoid command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionVoid_Bind(self, command)

    def __call__(self):
        r"""__call__(mtsFunctionVoid self) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoid___call__(self)

    def Execute(self):
        r"""Execute(mtsFunctionVoid self) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoid_Execute(self)

    def ExecuteBlocking(self):
        r"""ExecuteBlocking(mtsFunctionVoid self) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoid_ExecuteBlocking(self)

    def GetCommand(self):
        r"""GetCommand(mtsFunctionVoid self) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsFunctionVoid_GetCommand(self)

    def __call__(self):
        return self.Execute().GetResult()


# Register mtsFunctionVoid in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionVoid_swigregister(mtsFunctionVoid)

class mtsFunctionVoidReturn(mtsFunctionBase):
    r"""Proxy of C++ mtsFunctionVoidReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, isProxy=False):
        r"""__init__(mtsFunctionVoidReturn self, bool const isProxy=False) -> mtsFunctionVoidReturn"""
        _cisstMultiTaskPython.mtsFunctionVoidReturn_swiginit(self, _cisstMultiTaskPython.new_mtsFunctionVoidReturn(isProxy))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionVoidReturn

    def Bind(self, command):
        r"""Bind(mtsFunctionVoidReturn self, mtsCommandVoidReturn command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_Bind(self, command)

    def __call__(self, result):
        r"""__call__(mtsFunctionVoidReturn self, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn___call__(self, result)

    def ExecuteGeneric(self, result):
        r"""ExecuteGeneric(mtsFunctionVoidReturn self, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_ExecuteGeneric(self, result)

    def GetCommand(self):
        r"""GetCommand(mtsFunctionVoidReturn self) -> mtsCommandVoidReturn"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_GetCommand(self)

    def GetResultPrototype(self):
        r"""GetResultPrototype(mtsFunctionVoidReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmpObject = self.GetResultPrototype().Services().Create()
                self.ArgumentType = tmpObject.__class__
            except Exception as e:
                print('VoidReturn function ' + self.GetCommand().GetName() + ': ' + str(e))
        else:
            print('VoidReturn function not valid')


    def __call__(self):
    # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetResultPrototype())
        except Exception:
            argument = self.GetResultPrototype()
    # Probably should check return value below
        self.ExecuteGeneric(argument)
    # If argument has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument


# Register mtsFunctionVoidReturn in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionVoidReturn_swigregister(mtsFunctionVoidReturn)

class mtsFunctionRead(mtsFunctionBase):
    r"""Proxy of C++ mtsFunctionRead class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(mtsFunctionRead self) -> mtsFunctionRead"""
        _cisstMultiTaskPython.mtsFunctionRead_swiginit(self, _cisstMultiTaskPython.new_mtsFunctionRead())
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionRead

    def Bind(self, command):
        r"""Bind(mtsFunctionRead self, mtsCommandRead command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionRead_Bind(self, command)

    def __call__(self, argument):
        r"""__call__(mtsFunctionRead self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionRead___call__(self, argument)

    def ExecuteGeneric(self, argument):
        r"""ExecuteGeneric(mtsFunctionRead self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionRead_ExecuteGeneric(self, argument)

    def GetCommand(self):
        r"""GetCommand(mtsFunctionRead self) -> mtsCommandRead"""
        return _cisstMultiTaskPython.mtsFunctionRead_GetCommand(self)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsFunctionRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionRead_GetArgumentPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmpObject = self.GetArgumentPrototype().Services().Create()
                self.ArgumentType = tmpObject.__class__
            except Exception as e:
                print('Read function ' + self.GetCommand().GetName() + ': ' + str(e))
        else:
            print('Read function not valid')


    def __call__(self):
    # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetArgumentPrototype())
        except Exception:
            argument = self.GetArgumentPrototype()
    # Probably should check return value below
        self.ExecuteGeneric(argument)
    # If argument has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument


# Register mtsFunctionRead in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionRead_swigregister(mtsFunctionRead)

class mtsFunctionWrite(mtsFunctionBase):
    r"""Proxy of C++ mtsFunctionWrite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, isProxy=False):
        r"""__init__(mtsFunctionWrite self, bool const isProxy=False) -> mtsFunctionWrite"""
        _cisstMultiTaskPython.mtsFunctionWrite_swiginit(self, _cisstMultiTaskPython.new_mtsFunctionWrite(isProxy))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionWrite

    def Bind(self, command):
        r"""Bind(mtsFunctionWrite self, mtsCommandWriteBase command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionWrite_Bind(self, command)

    def __call__(self, argument):
        r"""__call__(mtsFunctionWrite self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWrite___call__(self, argument)

    def ExecuteGeneric(self, argument):
        r"""ExecuteGeneric(mtsFunctionWrite self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWrite_ExecuteGeneric(self, argument)

    def ExecuteBlockingGeneric(self, argument):
        r"""ExecuteBlockingGeneric(mtsFunctionWrite self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWrite_ExecuteBlockingGeneric(self, argument)

    def GetCommand(self):
        r"""GetCommand(mtsFunctionWrite self) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsFunctionWrite_GetCommand(self)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsFunctionWrite self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionWrite_GetArgumentPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmpObject = self.GetArgumentPrototype().Services().Create()
                self.ArgumentType = tmpObject.__class__
            except Exception as e:
                print('Write function ' + self.GetCommand().GetName() + ': ' + str(e))
        else:
            print('Write function not valid')

    def __call__(self, argument):
        if isinstance(argument, self.ArgumentType):
            return self.ExecuteGeneric(argument).GetResult()
        else:
            realArgument = self.ArgumentType(argument)
            return self.ExecuteGeneric(realArgument).GetResult()


# Register mtsFunctionWrite in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionWrite_swigregister(mtsFunctionWrite)

class mtsFunctionWriteReturn(mtsFunctionBase):
    r"""Proxy of C++ mtsFunctionWriteReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, isProxy=False):
        r"""__init__(mtsFunctionWriteReturn self, bool const isProxy=False) -> mtsFunctionWriteReturn"""
        _cisstMultiTaskPython.mtsFunctionWriteReturn_swiginit(self, _cisstMultiTaskPython.new_mtsFunctionWriteReturn(isProxy))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionWriteReturn

    def Bind(self, command):
        r"""Bind(mtsFunctionWriteReturn self, mtsCommandWriteReturn command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_Bind(self, command)

    def __call__(self, argument, result):
        r"""__call__(mtsFunctionWriteReturn self, mtsGenericObject argument, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn___call__(self, argument, result)

    def ExecuteGeneric(self, argument, result):
        r"""ExecuteGeneric(mtsFunctionWriteReturn self, mtsGenericObject argument, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_ExecuteGeneric(self, argument, result)

    def GetCommand(self):
        r"""GetCommand(mtsFunctionWriteReturn self) -> mtsCommandWriteReturn"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_GetCommand(self)

    def GetArgumentPrototype(self):
        r"""GetArgumentPrototype(mtsFunctionWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        r"""GetResultPrototype(mtsFunctionWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmp1Object = self.GetArgumentPrototype().Services().Create()
                self.ArgumentType = tmp1Object.__class__
                tmp2Object = self.GetResultPrototype().Services().Create()
                self.ResultType = tmp2Object.__class__
            except Exception as e:
                print('WriteReturn function ' + self.GetCommand().GetName() + ': ' + str(e))
        else:
            print('WriteReturn function not valid')

    def __call__(self, argument):
        result = self.ResultType(self.GetResultPrototype())
    # Probably should check return value of self.Execute
        if isinstance(argument, self.ArgumentType):
            self.ExecuteGeneric(argument, result)
        else:
            realArgument = self.ArgumentType(argument1)
            self.ExecuteGeneric(realArgument, result)
    # If result has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(result,"GetDataCopy"):
            return result.GetDataCopy()
        else:
            return result


# Register mtsFunctionWriteReturn in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionWriteReturn_swigregister(mtsFunctionWriteReturn)

class mtsFunctionQualifiedRead(mtsFunctionBase):
    r"""Proxy of C++ mtsFunctionQualifiedRead class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(mtsFunctionQualifiedRead self) -> mtsFunctionQualifiedRead"""
        _cisstMultiTaskPython.mtsFunctionQualifiedRead_swiginit(self, _cisstMultiTaskPython.new_mtsFunctionQualifiedRead())
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionQualifiedRead

    def Bind(self, command):
        r"""Bind(mtsFunctionQualifiedRead self, mtsCommandQualifiedRead command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_Bind(self, command)

    def __call__(self, qualifier, argument):
        r"""__call__(mtsFunctionQualifiedRead self, mtsGenericObject qualifier, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead___call__(self, qualifier, argument)

    def ExecuteGeneric(self, qualifier, argument):
        r"""ExecuteGeneric(mtsFunctionQualifiedRead self, mtsGenericObject qualifier, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_ExecuteGeneric(self, qualifier, argument)

    def GetCommand(self):
        r"""GetCommand(mtsFunctionQualifiedRead self) -> mtsCommandQualifiedRead"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_GetCommand(self)

    def GetArgument1Prototype(self):
        r"""GetArgument1Prototype(mtsFunctionQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_GetArgument1Prototype(self)

    def GetArgument2Prototype(self):
        r"""GetArgument2Prototype(mtsFunctionQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_GetArgument2Prototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmp1Object = self.GetArgument1Prototype().Services().Create()
                self.Argument1Type = tmp1Object.__class__
                tmp2Object = self.GetArgument2Prototype().Services().Create()
                self.Argument2Type = tmp2Object.__class__
            except Exception as e:
                print('Qualified read function ' + self.GetCommand().GetName() + ': ' + str(e))
        else:
            print('QualifiedRead function not valid')

    def __call__(self, argument1):
        argument2 = self.Argument2Type(self.GetArgument2Prototype())
    # Probably should check return value of self.Execute
        if isinstance(argument1, self.Argument1Type):
            self.ExecuteGeneric(argument1, argument2)
        else:
            realArgument1 = self.Argument1Type(argument1)
            self.ExecuteGeneric(realArgument1, argument2)
    # If argument2 has a GetDataCopy method, we assume it is derived from
    # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument2,"GetDataCopy"):
            return argument2.GetDataCopy()
        else:
            return argument2


# Register mtsFunctionQualifiedRead in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFunctionQualifiedRead_swigregister(mtsFunctionQualifiedRead)

class mtsComponent(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ mtsComponent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponent_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponent_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponent_ClassServices()

    def __init__(self, deviceName):
        r"""__init__(mtsComponent self, std::string const & deviceName) -> mtsComponent"""
        _cisstMultiTaskPython.mtsComponent_swiginit(self, _cisstMultiTaskPython.new_mtsComponent(deviceName))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponent

    def ConfigureJSON(self, configuration):
        r"""ConfigureJSON(mtsComponent self, Json::Value const & configuration)"""
        return _cisstMultiTaskPython.mtsComponent_ConfigureJSON(self, configuration)

    def GetName(self, *args):
        r"""
        GetName(mtsComponent self) -> std::string const
        GetName(mtsComponent self, std::string & placeHolder)
        """
        return _cisstMultiTaskPython.mtsComponent_GetName(self, *args)

    def SetName(self, componentName):
        r"""SetName(mtsComponent self, std::string const & componentName)"""
        return _cisstMultiTaskPython.mtsComponent_SetName(self, componentName)

    def Configure(self, *args):
        r"""Configure(mtsComponent self, std::string const & filename="")"""
        return _cisstMultiTaskPython.mtsComponent_Configure(self, *args)

    def Create(self):
        r"""Create(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Create(self)

    def CreateAndWait(self, timeoutInSeconds):
        r"""CreateAndWait(mtsComponent self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_CreateAndWait(self, timeoutInSeconds)

    def Start(self):
        r"""Start(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Start(self)

    def StartAndWait(self, timeoutInSeconds):
        r"""StartAndWait(mtsComponent self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_StartAndWait(self, timeoutInSeconds)

    def Suspend(self):
        r"""Suspend(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Suspend(self)

    def Kill(self):
        r"""Kill(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Kill(self)

    def KillAndWait(self, timeoutInSeconds):
        r"""KillAndWait(mtsComponent self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_KillAndWait(self, timeoutInSeconds)

    def Startup(self):
        r"""Startup(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Startup(self)

    def Cleanup(self):
        r"""Cleanup(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Cleanup(self)

    def AddInterfaceProvided(self, interfaceProvidedName, queueingPolicy=MTS_COMPONENT_POLICY):
        r"""AddInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceProvided(self, interfaceProvidedName, queueingPolicy)

    def AddInterfaceProvidedWithoutSystemEvents(self, interfaceProvidedName, queueingPolicy=MTS_COMPONENT_POLICY, isProxy=False):
        r"""AddInterfaceProvidedWithoutSystemEvents(mtsComponent self, std::string const & interfaceProvidedName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY, bool isProxy=False) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceProvidedWithoutSystemEvents(self, interfaceProvidedName, queueingPolicy, isProxy)

    def AddInterfaceOutput(self, interfaceOutputName):
        r"""AddInterfaceOutput(mtsComponent self, std::string const & interfaceOutputName) -> mtsInterfaceOutput *"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceOutput(self, interfaceOutputName)

    def GetNamesOfInterfacesProvidedOrOutput(self):
        r"""GetNamesOfInterfacesProvidedOrOutput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesProvidedOrOutput(self)

    def GetNamesOfInterfacesProvided(self):
        r"""GetNamesOfInterfacesProvided(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesProvided(self)

    def GetNamesOfInterfacesOutput(self):
        r"""GetNamesOfInterfacesOutput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesOutput(self)

    def InterfaceExists(self, interfaceName, lod=0x04):
        r"""InterfaceExists(mtsComponent self, std::string const & interfaceName, cmnLogLevel lod=0x04) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_InterfaceExists(self, interfaceName, lod)

    def InterfaceProvidedOrOutputExists(self, interfaceName, lod=0x04):
        r"""InterfaceProvidedOrOutputExists(mtsComponent self, std::string const & interfaceName, cmnLogLevel lod=0x04) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_InterfaceProvidedOrOutputExists(self, interfaceName, lod)

    def InterfaceRequiredOrInputExists(self, interfaceName, lod=0x04):
        r"""InterfaceRequiredOrInputExists(mtsComponent self, std::string const & interfaceName, cmnLogLevel lod=0x04) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_InterfaceRequiredOrInputExists(self, interfaceName, lod)

    def GetInterfaceProvided(self, interfaceProvidedName):
        r"""GetInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceProvided(self, interfaceProvidedName)

    def GetInterfaceOutput(self, interfaceOutputName):
        r"""GetInterfaceOutput(mtsComponent self, std::string const & interfaceOutputName) -> mtsInterfaceOutput *"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceOutput(self, interfaceOutputName)

    def GetNumberOfInterfacesProvided(self):
        r"""GetNumberOfInterfacesProvided(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesProvided(self)

    def GetNumberOfInterfacesOutput(self):
        r"""GetNumberOfInterfacesOutput(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesOutput(self)

    def RemoveInterfaceProvided(self, interfaceProvidedName, skipDisconnect=False):
        r"""RemoveInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName, bool const skipDisconnect=False) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_RemoveInterfaceProvided(self, interfaceProvidedName, skipDisconnect)

    def AddInterfaceRequired(self, interfaceRequiredName, isRequired=MTS_REQUIRED):
        r"""AddInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName, mtsRequiredType isRequired=MTS_REQUIRED) -> mtsInterfaceRequired"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceRequired(self, interfaceRequiredName, isRequired)

    def AddInterfaceRequiredWithoutSystemEventHandlers(self, interfaceRequiredName, isRequired=MTS_REQUIRED):
        r"""AddInterfaceRequiredWithoutSystemEventHandlers(mtsComponent self, std::string const & interfaceRequiredName, mtsRequiredType isRequired=MTS_REQUIRED) -> mtsInterfaceRequired"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceRequiredWithoutSystemEventHandlers(self, interfaceRequiredName, isRequired)

    def AddInterfaceInput(self, interfaceInputName):
        r"""AddInterfaceInput(mtsComponent self, std::string const & interfaceInputName) -> mtsInterfaceInput *"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceInput(self, interfaceInputName)

    def GetNamesOfInterfacesRequiredOrInput(self):
        r"""GetNamesOfInterfacesRequiredOrInput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesRequiredOrInput(self)

    def GetNamesOfInterfacesRequired(self):
        r"""GetNamesOfInterfacesRequired(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesRequired(self)

    def GetNamesOfInterfacesInput(self):
        r"""GetNamesOfInterfacesInput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesInput(self)

    def GetInterfaceProvidedFor(self, interfaceRequiredName):
        r"""GetInterfaceProvidedFor(mtsComponent self, std::string const & interfaceRequiredName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceProvidedFor(self, interfaceRequiredName)

    def GetInterfaceRequired(self, interfaceRequiredName):
        r"""GetInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName) -> mtsInterfaceRequired"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceRequired(self, interfaceRequiredName)

    def GetInterfaceInput(self, interfaceInputName):
        r"""GetInterfaceInput(mtsComponent self, std::string const & interfaceInputName) -> mtsInterfaceInput *"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceInput(self, interfaceInputName)

    def GetNumberOfInterfacesRequired(self):
        r"""GetNumberOfInterfacesRequired(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesRequired(self)

    def GetNumberOfInterfacesInput(self):
        r"""GetNumberOfInterfacesInput(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesInput(self)

    def RemoveInterfaceRequired(self, interfaceRequiredName, skipDisconnect=False):
        r"""RemoveInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName, bool const skipDisconnect=False) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_RemoveInterfaceRequired(self, interfaceRequiredName, skipDisconnect)

    def GetManagerComponentServices(self, *args):
        r"""
        GetManagerComponentServices(mtsComponent self) -> mtsManagerComponentServices
        GetManagerComponentServices(mtsComponent self) -> mtsManagerComponentServices
        """
        return _cisstMultiTaskPython.mtsComponent_GetManagerComponentServices(self, *args)

    def GetStateTable(self, stateTableName):
        r"""GetStateTable(mtsComponent self, std::string const & stateTableName) -> mtsStateTable *"""
        return _cisstMultiTaskPython.mtsComponent_GetStateTable(self, stateTableName)

    def AddStateTable(self, existingStateTable, addInterfaceProvided=True):
        r"""AddStateTable(mtsComponent self, mtsStateTable * existingStateTable, bool addInterfaceProvided=True) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_AddStateTable(self, existingStateTable, addInterfaceProvided)

    def UseSeparateLogFileDefault(self, forwardToLogger=True):
        r"""UseSeparateLogFileDefault(mtsComponent self, bool forwardToLogger=True)"""
        return _cisstMultiTaskPython.mtsComponent_UseSeparateLogFileDefault(self, forwardToLogger)

    def UseSeparateLogFileDefaultWithDate(self, forwardToLogger=True):
        r"""UseSeparateLogFileDefaultWithDate(mtsComponent self, bool forwardToLogger=True)"""
        return _cisstMultiTaskPython.mtsComponent_UseSeparateLogFileDefaultWithDate(self, forwardToLogger)

    def UseSeparateLogFile(self, filename, forwardToLogger=True):
        r"""UseSeparateLogFile(mtsComponent self, std::string const & filename, bool forwardToLogger=True)"""
        return _cisstMultiTaskPython.mtsComponent_UseSeparateLogFile(self, filename, forwardToLogger)

    def AreAllInterfacesRequiredConnected(self, log=False):
        r"""AreAllInterfacesRequiredConnected(mtsComponent self, bool const log=False) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_AreAllInterfacesRequiredConnected(self, log)

    def IsRunning(self):
        r"""IsRunning(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsRunning(self)

    def Running(self):
        r"""Running(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_Running(self)

    def IsStarted(self):
        r"""IsStarted(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsStarted(self)

    def IsTerminated(self):
        r"""IsTerminated(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsTerminated(self)

    def IsEndTask(self):
        r"""IsEndTask(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsEndTask(self)

    def GetState(self, *args):
        r"""
        GetState(mtsComponent self) -> mtsComponentState
        GetState(mtsComponent self, mtsComponentState state)
        """
        return _cisstMultiTaskPython.mtsComponent_GetState(self, *args)

    def WaitForState(self, desiredState, timeout):
        r"""WaitForState(mtsComponent self, mtsComponentState desiredState, double timeout) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_WaitForState(self, desiredState, timeout)

    def SetReplayMode(self):
        r"""SetReplayMode(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_SetReplayMode(self)

    def SetReplayData(self, stateTableName, fileName):
        r"""SetReplayData(mtsComponent self, std::string const & stateTableName, std::string const & fileName) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_SetReplayData(self, stateTableName, fileName)

    def SetReplayTime(self, time):
        r"""SetReplayTime(mtsComponent self, double const time) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_SetReplayTime(self, time)

    def UpdateFromC(self):
        interfaces = mtsComponent.GetNamesOfInterfacesProvided(self)
        for interface in interfaces:
            interfaceNoSpace = interface.replace(' ', '')
            interfaceFrontEnd = mtsComponent.GetInterfaceProvided(self, interface)
            self.__dict__[interfaceNoSpace] = mtsInterfaceProvided.GetEndUserInterface(interfaceFrontEnd, 'Python')
            self.__dict__[interfaceNoSpace].UpdateFromC()
        interfaces = mtsComponent.GetNamesOfInterfacesRequired(self)
        for interface in interfaces:
            interfaceNoSpace = interface.replace(' ', '')
            self.__dict__[interfaceNoSpace] = mtsComponent.GetInterfaceRequired(self, interface)
    # Only call UpdateFromC if required interface is connected to a provided interface
            if self.__dict__[interfaceNoSpace].GetConnectedInterface():
                self.__dict__[interfaceNoSpace].UpdateFromC()

    def AddInterfaceRequiredFromProvided(self, interfaceProvided):
        if not isinstance(interfaceProvided, mtsInterfaceProvidedDescription):
            print('Parameter must be of type mtsInterfaceProvidedDescription')
            return
        interfaceProvidedNoSpace = interfaceProvided.InterfaceName.replace(' ', '')
        interfaceRequired = self.AddInterfaceRequired('RequiredFor'+interfaceProvidedNoSpace, MTS_OPTIONAL)
        if not interfaceRequired:
            return
        self.__dict__[interfaceRequired.GetName()] = interfaceRequired
        for command in interfaceProvided.CommandsVoid:
            func = mtsFunctionVoid()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
    #for command in interfaceProvided.CommandsVoidReturn:
    #    func = mtsFunctionVoidReturn()
    #    interfaceRequired.AddFunction(command.Name, func)
    #    func.thisown = 0
        for command in interfaceProvided.CommandsWrite:
            func = mtsFunctionWrite()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
    #for command in interfaceProvided.CommandsWriteReturn:
    #    func = mtsFunctionWriteReturn()
    #    interfaceRequired.AddFunction(command.Name, func)
    #    func.thisown = 0
        for command in interfaceProvided.CommandsQualifiedRead:
            func = mtsFunctionQualifiedRead()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
        for command in interfaceProvided.CommandsRead:
            func = mtsFunctionRead()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
        return interfaceRequired

    # otherComponentInterface should be a tuple ('process', 'component', 'interfaceProvided')
    # or ('component', 'interfaceProvided')
    def AddInterfaceRequiredAndConnect(self, otherComponentInterface, connectionAttempts = 1):
        try:
            localProcessName = mtsManagerLocal_GetInstance().GetProcessName()
            num = len(otherComponentInterface)
            if 2 <= num <= 3:
                interfaceName = otherComponentInterface[num-1]
                componentName = otherComponentInterface[num-2]
                if num == 3:
                    processName = otherComponentInterface[num-3]
                else:
                    processName = localProcessName
    # Now do the work here
                manager = self.GetManagerComponentServices()
                if not manager:
                    print('Could not get manager component services')
                    return
                interfaceDescription = manager.GetInterfaceProvidedDescription(processName, componentName, interfaceName)
                if not interfaceDescription.InterfaceName:
                    print('No provided interface (empty string)')
                    return
                interfaceRequired = self.AddInterfaceRequiredFromProvided(interfaceDescription)
                attempt = 0
                while (attempt < connectionAttempts):
                    attempt = attempt + 1
                    print('Trying to connect: ' + interfaceRequired.GetName() + ' - attempt # ' + str(attempt))
                    manager.Connect(localProcessName, self.GetName(), interfaceRequired.GetName(), processName, componentName, interfaceName)
    # PK TEMP: need time.sleep until blocking commands supported over network
                    time.sleep(2.0)
                    interfaceRequired.UpdateFromC()
                    if interfaceRequired.GetConnectedInterface():
                        print('Required interface ' + interfaceRequired.GetName() + ' connected.')
                        return interfaceRequired
                print('Unable to add required interface for ' + interfaceName)
            else:
                print('Parameter error: must specify (process, component, interface) or (component, interface)')
        except TypeError as e:
            print('Parameter error: must specify (process, component, interface) or (component, interface), caught exception: ' + str(e))


# Register mtsComponent in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponent_swigregister(mtsComponent)

def mtsComponent_ClassServices():
    r"""mtsComponent_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponent_ClassServices()


def mtsObjectName(*args):
    r"""
    mtsObjectName(void const * MARKED_AS_UNUSEDobject) -> std::string
    mtsObjectName(mtsGenericObject object) -> std::string
    mtsObjectName(mtsComponent object) -> std::string
    """
    return _cisstMultiTaskPython.mtsObjectName(*args)
class mtsComponentConstructorNameAndInt(mtsGenericObject):
    r"""Proxy of C++ mtsComponentConstructorNameAndArg< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_ClassServices()
    Name = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Name_set, doc=r"""Name : std::string""")
    Arg = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Arg_set, doc=r"""Arg : int""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentConstructorNameAndInt self) -> mtsComponentConstructorNameAndInt
        __init__(mtsComponentConstructorNameAndInt self, std::string const & name, int const & arg) -> mtsComponentConstructorNameAndInt
        """
        _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_swiginit(self, _cisstMultiTaskPython.new_mtsComponentConstructorNameAndInt(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndInt

# Register mtsComponentConstructorNameAndInt in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentConstructorNameAndInt_swigregister(mtsComponentConstructorNameAndInt)

def mtsComponentConstructorNameAndInt_ClassServices():
    r"""mtsComponentConstructorNameAndInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_ClassServices()

class mtsComponentConstructorNameAndUInt(mtsGenericObject):
    r"""Proxy of C++ mtsComponentConstructorNameAndArg< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_ClassServices()
    Name = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Name_set, doc=r"""Name : std::string""")
    Arg = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Arg_set, doc=r"""Arg : unsigned int""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentConstructorNameAndUInt self) -> mtsComponentConstructorNameAndUInt
        __init__(mtsComponentConstructorNameAndUInt self, std::string const & name, unsigned int const & arg) -> mtsComponentConstructorNameAndUInt
        """
        _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_swiginit(self, _cisstMultiTaskPython.new_mtsComponentConstructorNameAndUInt(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndUInt

# Register mtsComponentConstructorNameAndUInt in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_swigregister(mtsComponentConstructorNameAndUInt)

def mtsComponentConstructorNameAndUInt_ClassServices():
    r"""mtsComponentConstructorNameAndUInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_ClassServices()

class mtsComponentConstructorNameAndLong(mtsGenericObject):
    r"""Proxy of C++ mtsComponentConstructorNameAndArg< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_ClassServices()
    Name = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Name_set, doc=r"""Name : std::string""")
    Arg = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Arg_set, doc=r"""Arg : long""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentConstructorNameAndLong self) -> mtsComponentConstructorNameAndLong
        __init__(mtsComponentConstructorNameAndLong self, std::string const & name, long const & arg) -> mtsComponentConstructorNameAndLong
        """
        _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_swiginit(self, _cisstMultiTaskPython.new_mtsComponentConstructorNameAndLong(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndLong

# Register mtsComponentConstructorNameAndLong in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentConstructorNameAndLong_swigregister(mtsComponentConstructorNameAndLong)

def mtsComponentConstructorNameAndLong_ClassServices():
    r"""mtsComponentConstructorNameAndLong_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_ClassServices()

class mtsComponentConstructorNameAndULong(mtsGenericObject):
    r"""Proxy of C++ mtsComponentConstructorNameAndArg< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_ClassServices()
    Name = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Name_set, doc=r"""Name : std::string""")
    Arg = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Arg_set, doc=r"""Arg : unsigned long""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentConstructorNameAndULong self) -> mtsComponentConstructorNameAndULong
        __init__(mtsComponentConstructorNameAndULong self, std::string const & name, unsigned long const & arg) -> mtsComponentConstructorNameAndULong
        """
        _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_swiginit(self, _cisstMultiTaskPython.new_mtsComponentConstructorNameAndULong(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndULong

# Register mtsComponentConstructorNameAndULong in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentConstructorNameAndULong_swigregister(mtsComponentConstructorNameAndULong)

def mtsComponentConstructorNameAndULong_ClassServices():
    r"""mtsComponentConstructorNameAndULong_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_ClassServices()

class mtsComponentConstructorNameAndDouble(mtsGenericObject):
    r"""Proxy of C++ mtsComponentConstructorNameAndArg< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_ClassServices()
    Name = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Name_set, doc=r"""Name : std::string""")
    Arg = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Arg_set, doc=r"""Arg : double""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentConstructorNameAndDouble self) -> mtsComponentConstructorNameAndDouble
        __init__(mtsComponentConstructorNameAndDouble self, std::string const & name, double const & arg) -> mtsComponentConstructorNameAndDouble
        """
        _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_swiginit(self, _cisstMultiTaskPython.new_mtsComponentConstructorNameAndDouble(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndDouble

# Register mtsComponentConstructorNameAndDouble in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_swigregister(mtsComponentConstructorNameAndDouble)

def mtsComponentConstructorNameAndDouble_ClassServices():
    r"""mtsComponentConstructorNameAndDouble_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_ClassServices()

class mtsComponentConstructorNameAndString(mtsGenericObject):
    r"""Proxy of C++ mtsComponentConstructorNameAndArg< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndString_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndString_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndString_ClassServices()
    Name = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndString_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndString_Name_set, doc=r"""Name : std::string""")
    Arg = property(_cisstMultiTaskPython.mtsComponentConstructorNameAndString_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndString_Arg_set, doc=r"""Arg : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentConstructorNameAndString self) -> mtsComponentConstructorNameAndString
        __init__(mtsComponentConstructorNameAndString self, std::string const & name, std::string const & arg) -> mtsComponentConstructorNameAndString
        """
        _cisstMultiTaskPython.mtsComponentConstructorNameAndString_swiginit(self, _cisstMultiTaskPython.new_mtsComponentConstructorNameAndString(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndString

# Register mtsComponentConstructorNameAndString in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentConstructorNameAndString_swigregister(mtsComponentConstructorNameAndString)

def mtsComponentConstructorNameAndString_ClassServices():
    r"""mtsComponentConstructorNameAndString_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentConstructorNameAndString_ClassServices()

class mtsComponentWithManagement(mtsComponent):
    r"""Proxy of C++ mtsComponentWithManagement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(mtsComponentWithManagement self, std::string const & name) -> mtsComponentWithManagement"""
        _cisstMultiTaskPython.mtsComponentWithManagement_swiginit(self, _cisstMultiTaskPython.new_mtsComponentWithManagement(name))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentWithManagement

# Register mtsComponentWithManagement in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentWithManagement_swigregister(mtsComponentWithManagement)

class mtsInterface(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ mtsInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterface

    def GetName(self):
        r"""GetName(mtsInterface self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsInterface_GetName(self)

    def GetFullName(self):
        r"""GetFullName(mtsInterface self) -> std::string const"""
        return _cisstMultiTaskPython.mtsInterface_GetFullName(self)

    def GetComponent(self):
        r"""GetComponent(mtsInterface self) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsInterface_GetComponent(self)

    def GetComponentName(self):
        r"""GetComponentName(mtsInterface self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsInterface_GetComponentName(self)

# Register mtsInterface in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterface_swigregister(mtsInterface)

class mtsInterfaceProvided(mtsInterface):
    r"""Proxy of C++ mtsInterfaceProvided class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceProvided_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceProvided_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_ClassServices()
    DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE = _cisstMultiTaskPython.mtsInterfaceProvided_DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE
    

    def __init__(self, name, component, queueingPolicy, postCommandQueuedCallable=None, isProxy=False):
        r"""__init__(mtsInterfaceProvided self, std::string const & name, mtsComponent component, mtsInterfaceQueueingPolicy queueingPolicy, mtsCallableVoidBase * postCommandQueuedCallable=None, bool isProxy=False) -> mtsInterfaceProvided"""
        _cisstMultiTaskPython.mtsInterfaceProvided_swiginit(self, _cisstMultiTaskPython.new_mtsInterfaceProvided(name, component, queueingPolicy, postCommandQueuedCallable, isProxy))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvided

    def Cleanup(self):
        r"""Cleanup(mtsInterfaceProvided self)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_Cleanup(self)

    def SetMailBoxSize(self, desiredSize):
        r"""SetMailBoxSize(mtsInterfaceProvided self, size_t desiredSize)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SetMailBoxSize(self, desiredSize)

    def GetMailBoxSize(self):
        r"""GetMailBoxSize(mtsInterfaceProvided self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetMailBoxSize(self)

    def SetArgumentQueuesSize(self, desiredSize):
        r"""SetArgumentQueuesSize(mtsInterfaceProvided self, size_t desiredSize)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SetArgumentQueuesSize(self, desiredSize)

    def GetArgumentQueuesSize(self):
        r"""GetArgumentQueuesSize(mtsInterfaceProvided self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetArgumentQueuesSize(self)

    def SetMailBoxAndArgumentQueuesSize(self, desiredSize):
        r"""SetMailBoxAndArgumentQueuesSize(mtsInterfaceProvided self, size_t desiredSize)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SetMailBoxAndArgumentQueuesSize(self, desiredSize)

    def GetNamesOfCommands(self):
        r"""GetNamesOfCommands(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommands(self)

    def GetNamesOfCommandsVoid(self):
        r"""GetNamesOfCommandsVoid(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsVoid(self)

    def GetNamesOfCommandsVoidReturn(self):
        r"""GetNamesOfCommandsVoidReturn(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsVoidReturn(self)

    def GetNamesOfCommandsWrite(self):
        r"""GetNamesOfCommandsWrite(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsWrite(self)

    def GetNamesOfCommandsWriteReturn(self):
        r"""GetNamesOfCommandsWriteReturn(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsWriteReturn(self)

    def GetNamesOfCommandsRead(self):
        r"""GetNamesOfCommandsRead(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsRead(self)

    def GetNamesOfCommandsQualifiedRead(self):
        r"""GetNamesOfCommandsQualifiedRead(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsQualifiedRead(self)

    def GetNamesOfEventsVoid(self):
        r"""GetNamesOfEventsVoid(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfEventsVoid(self)

    def GetNamesOfEventsWrite(self):
        r"""GetNamesOfEventsWrite(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfEventsWrite(self)

    @staticmethod
    def IsSystemEventVoid(name):
        r"""IsSystemEventVoid(std::string const & name) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_IsSystemEventVoid(name)

    def GetCommandVoid(self, commandName, required=MTS_REQUIRED):
        r"""GetCommandVoid(mtsInterfaceProvided self, std::string const & commandName, mtsRequiredType const required=MTS_REQUIRED) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandVoid(self, commandName, required)

    def GetCommandVoidReturn(self, commandName, required=MTS_REQUIRED):
        r"""GetCommandVoidReturn(mtsInterfaceProvided self, std::string const & commandName, mtsRequiredType const required=MTS_REQUIRED) -> mtsCommandVoidReturn"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandVoidReturn(self, commandName, required)

    def GetCommandWrite(self, commandName, required=MTS_REQUIRED):
        r"""GetCommandWrite(mtsInterfaceProvided self, std::string const & commandName, mtsRequiredType const required=MTS_REQUIRED) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandWrite(self, commandName, required)

    def GetCommandWriteReturn(self, commandName, required=MTS_REQUIRED):
        r"""GetCommandWriteReturn(mtsInterfaceProvided self, std::string const & commandName, mtsRequiredType const required=MTS_REQUIRED) -> mtsCommandWriteReturn"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandWriteReturn(self, commandName, required)

    def GetCommandRead(self, commandName, required=MTS_REQUIRED):
        r"""GetCommandRead(mtsInterfaceProvided self, std::string const & commandName, mtsRequiredType const required=MTS_REQUIRED) -> mtsCommandRead"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandRead(self, commandName, required)

    def GetCommandQualifiedRead(self, commandName, required=MTS_REQUIRED):
        r"""GetCommandQualifiedRead(mtsInterfaceProvided self, std::string const & commandName, mtsRequiredType const required=MTS_REQUIRED) -> mtsCommandQualifiedRead"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandQualifiedRead(self, commandName, required)

    def GetEventVoid(self, eventName):
        r"""GetEventVoid(mtsInterfaceProvided self, std::string const & eventName) -> mtsMulticastCommandVoid *"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetEventVoid(self, eventName)

    def GetEventWrite(self, eventName):
        r"""GetEventWrite(mtsInterfaceProvided self, std::string const & eventName) -> mtsMulticastCommandWriteBase *"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetEventWrite(self, eventName)

    def AddEventWriteGeneric(self, *args):
        r"""
        AddEventWriteGeneric(mtsInterfaceProvided self, std::string const & eventName, mtsGenericObject argumentPrototype) -> mtsCommandWriteBase
        AddEventWriteGeneric(mtsInterfaceProvided self, mtsFunctionWrite eventTrigger, std::string const & eventName, mtsGenericObject argumentPrototype) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddEventWriteGeneric(self, *args)

    def AddObserver(self, *args):
        r"""
        AddObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandVoid handler, mtsRequiredType const required=MTS_REQUIRED) -> bool
        AddObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandWriteBase handler, mtsRequiredType const required=MTS_REQUIRED) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddObserver(self, *args)

    def AddObserverList(self, argin, argout):
        r"""AddObserverList(mtsInterfaceProvided self, mtsEventHandlerList const & argin, mtsEventHandlerList & argout)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddObserverList(self, argin, argout)

    def RemoveObserver(self, *args):
        r"""
        RemoveObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandVoid handler) -> bool
        RemoveObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandWriteBase handler) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceProvided_RemoveObserver(self, *args)

    def RemoveObserverList(self, argin, argout):
        r"""RemoveObserverList(mtsInterfaceProvided self, mtsEventHandlerList const & argin, mtsEventHandlerList & argout)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_RemoveObserverList(self, argin, argout)

    def AddMessageEvents(self):
        r"""AddMessageEvents(mtsInterfaceProvided self)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddMessageEvents(self)

    def SendStatus(self, message):
        r"""SendStatus(mtsInterfaceProvided self, std::string const & message)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SendStatus(self, message)

    def SendWarning(self, message):
        r"""SendWarning(mtsInterfaceProvided self, std::string const & message)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SendWarning(self, message)

    def SendError(self, message):
        r"""SendError(mtsInterfaceProvided self, std::string const & message)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SendError(self, message)

    def GetOriginalInterface(self):
        r"""GetOriginalInterface(mtsInterfaceProvided self) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetOriginalInterface(self)

    def FindEndUserInterfaceByName(self, userName):
        r"""FindEndUserInterfaceByName(mtsInterfaceProvided self, std::string const & userName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_FindEndUserInterfaceByName(self, userName)

    def GetListOfUserNames(self):
        r"""GetListOfUserNames(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetListOfUserNames(self)

    def GetNumberOfEndUsers(self):
        r"""GetNumberOfEndUsers(mtsInterfaceProvided self) -> int"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNumberOfEndUsers(self)

    def ProcessMailBoxes(self):
        r"""ProcessMailBoxes(mtsInterfaceProvided self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_ProcessMailBoxes(self)

    def GetEndUserInterface(self, userName):
        r"""GetEndUserInterface(mtsInterfaceProvided self, std::string const & userName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetEndUserInterface(self, userName)

    def UpdateFromC(self):
        commands = mtsInterfaceProvided.GetNamesOfCommandsVoid(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandVoid(self, command)
        commands = mtsInterfaceProvided.GetNamesOfCommandsVoidReturn(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandVoidReturn(self, command)
        commands = mtsInterfaceProvided.GetNamesOfCommandsWrite(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandWrite(self, command)
            self.__dict__[command].UpdateFromC()
        commands = mtsInterfaceProvided.GetNamesOfCommandsWriteReturn(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandWriteReturn(self, command)
            self.__dict__[command].UpdateFromC()
        commands = mtsInterfaceProvided.GetNamesOfCommandsQualifiedRead(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandQualifiedRead(self, command)
            self.__dict__[command].UpdateFromC()
        commands = mtsInterfaceProvided.GetNamesOfCommandsRead(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandRead(self, command)
            self.__dict__[command].UpdateFromC()


# Register mtsInterfaceProvided in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceProvided_swigregister(mtsInterfaceProvided)

def mtsInterfaceProvided_ClassServices():
    r"""mtsInterfaceProvided_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInterfaceProvided_ClassServices()

def mtsInterfaceProvided_IsSystemEventVoid(name):
    r"""mtsInterfaceProvided_IsSystemEventVoid(std::string const & name) -> bool"""
    return _cisstMultiTaskPython.mtsInterfaceProvided_IsSystemEventVoid(name)

class mtsInterfaceRequired(mtsInterface):
    r"""Proxy of C++ mtsInterfaceRequired class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceRequired_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceRequired_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_ClassServices()
    DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE = _cisstMultiTaskPython.mtsInterfaceRequired_DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE
    

    def __init__(self, interfaceName, component, mailBox, required=MTS_REQUIRED):
        r"""__init__(mtsInterfaceRequired self, std::string const & interfaceName, mtsComponent component, mtsMailBox * mailBox, mtsRequiredType required=MTS_REQUIRED) -> mtsInterfaceRequired"""
        _cisstMultiTaskPython.mtsInterfaceRequired_swiginit(self, _cisstMultiTaskPython.new_mtsInterfaceRequired(interfaceName, component, mailBox, required))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequired

    def GetConnectedInterface(self):
        r"""GetConnectedInterface(mtsInterfaceRequired self) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetConnectedInterface(self)

    def SetMailBoxSize(self, desiredSize):
        r"""SetMailBoxSize(mtsInterfaceRequired self, size_t desiredSize) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_SetMailBoxSize(self, desiredSize)

    def SetArgumentQueuesSize(self, desiredSize):
        r"""SetArgumentQueuesSize(mtsInterfaceRequired self, size_t desiredSize) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_SetArgumentQueuesSize(self, desiredSize)

    def SetMailBoxAndArgumentQueuesSize(self, desiredSize):
        r"""SetMailBoxAndArgumentQueuesSize(mtsInterfaceRequired self, size_t desiredSize) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_SetMailBoxAndArgumentQueuesSize(self, desiredSize)

    def GetNamesOfFunctions(self):
        r"""GetNamesOfFunctions(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctions(self)

    def GetNamesOfFunctionsVoid(self):
        r"""GetNamesOfFunctionsVoid(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsVoid(self)

    def GetNamesOfFunctionsVoidReturn(self):
        r"""GetNamesOfFunctionsVoidReturn(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsVoidReturn(self)

    def GetNamesOfFunctionsWrite(self):
        r"""GetNamesOfFunctionsWrite(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsWrite(self)

    def GetNamesOfFunctionsWriteReturn(self):
        r"""GetNamesOfFunctionsWriteReturn(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsWriteReturn(self)

    def GetNamesOfFunctionsRead(self):
        r"""GetNamesOfFunctionsRead(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsRead(self)

    def GetNamesOfFunctionsQualifiedRead(self):
        r"""GetNamesOfFunctionsQualifiedRead(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsQualifiedRead(self)

    def GetFunctionVoid(self, functionName):
        r"""GetFunctionVoid(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionVoid"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionVoid(self, functionName)

    def GetFunctionVoidReturn(self, functionName):
        r"""GetFunctionVoidReturn(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionVoidReturn"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionVoidReturn(self, functionName)

    def GetFunctionWrite(self, functionName):
        r"""GetFunctionWrite(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionWrite"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionWrite(self, functionName)

    def GetFunctionWriteReturn(self, functionName):
        r"""GetFunctionWriteReturn(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionWriteReturn"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionWriteReturn(self, functionName)

    def GetFunctionRead(self, functionName):
        r"""GetFunctionRead(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionRead"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionRead(self, functionName)

    def GetFunctionQualifiedRead(self, functionName):
        r"""GetFunctionQualifiedRead(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionQualifiedRead"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionQualifiedRead(self, functionName)

    def GetNamesOfEventHandlersVoid(self):
        r"""GetNamesOfEventHandlersVoid(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfEventHandlersVoid(self)

    def GetNamesOfEventHandlersWrite(self):
        r"""GetNamesOfEventHandlersWrite(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfEventHandlersWrite(self)

    def GetEventHandlerVoid(self, eventName):
        r"""GetEventHandlerVoid(mtsInterfaceRequired self, std::string const & eventName) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetEventHandlerVoid(self, eventName)

    def GetEventHandlerWrite(self, eventName):
        r"""GetEventHandlerWrite(mtsInterfaceRequired self, std::string const & eventName) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetEventHandlerWrite(self, eventName)

    def ConnectTo(self, interfaceProvided):
        r"""ConnectTo(mtsInterfaceRequired self, mtsInterfaceProvided interfaceProvided) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_ConnectTo(self, interfaceProvided)

    def IsRequired(self):
        r"""IsRequired(mtsInterfaceRequired self) -> mtsRequiredType"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_IsRequired(self)

    def AddSystemEventHandlers(self):
        r"""AddSystemEventHandlers(mtsInterfaceRequired self) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddSystemEventHandlers(self)

    def DisableAllEvents(self):
        r"""DisableAllEvents(mtsInterfaceRequired self)"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_DisableAllEvents(self)

    def EnableAllEvents(self):
        r"""EnableAllEvents(mtsInterfaceRequired self)"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_EnableAllEvents(self)

    def ProcessMailBoxes(self):
        r"""ProcessMailBoxes(mtsInterfaceRequired self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_ProcessMailBoxes(self)

    def AddFunction(self, *args):
        r"""
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionVoid function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionVoidReturn function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionWrite function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionWriteReturn function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionRead function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionQualifiedRead function, mtsRequiredType required=MTS_REQUIRED) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddFunction(self, *args)

    def AddEventReceiver(self, *args):
        r"""
        AddEventReceiver(mtsInterfaceRequired self, std::string const & eventName, mtsEventReceiverVoid receiver, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddEventReceiver(mtsInterfaceRequired self, std::string const & eventName, mtsEventReceiverWrite receiver, mtsRequiredType required=MTS_REQUIRED) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddEventReceiver(self, *args)

    def AddEventHandlerVoid(self, *args):
        r"""
        AddEventHandlerVoid(mtsInterfaceRequired self, mtsCallableVoidBase * callable, std::string const & eventName, mtsEventQueueingPolicy queueingPolicy=MTS_INTERFACE_EVENT_POLICY) -> mtsCommandVoid
        AddEventHandlerVoid(mtsInterfaceRequired self, void (*)(void) function, std::string const & eventName, mtsEventQueueingPolicy queueingPolicy=MTS_INTERFACE_EVENT_POLICY) -> mtsCommandVoid
        """
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddEventHandlerVoid(self, *args)

    def RemoveEventHandlerVoid(self, eventName):
        r"""RemoveEventHandlerVoid(mtsInterfaceRequired self, std::string const & eventName) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_RemoveEventHandlerVoid(self, eventName)

    def RemoveEventHandlerWrite(self, eventName):
        r"""RemoveEventHandlerWrite(mtsInterfaceRequired self, std::string const & eventName) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_RemoveEventHandlerWrite(self, eventName)

    def UpdateFromC(self):
        if not self.GetConnectedInterface():
            print('Required interface ' + self.GetName() + ' not yet connected.')
            return
        functions = mtsInterfaceRequired.GetNamesOfFunctionsVoid(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionVoid(self, function)
        functions = mtsInterfaceRequired.GetNamesOfFunctionsVoidReturn(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionVoidReturn(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsWrite(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionWrite(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsWriteReturn(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionWriteReturn(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsQualifiedRead(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionQualifiedRead(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsRead(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionRead(self, function)
            self.__dict__[function].UpdateFromC()


# Register mtsInterfaceRequired in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceRequired_swigregister(mtsInterfaceRequired)

def mtsInterfaceRequired_ClassServices():
    r"""mtsInterfaceRequired_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInterfaceRequired_ClassServices()

class mtsManagerComponentServices(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ mtsManagerComponentServices class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsManagerComponentServices_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsManagerComponentServices_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_ClassServices()

    def __init__(self, internalInterfaceRequired):
        r"""__init__(mtsManagerComponentServices self, mtsInterfaceRequired internalInterfaceRequired) -> mtsManagerComponentServices"""
        _cisstMultiTaskPython.mtsManagerComponentServices_swiginit(self, _cisstMultiTaskPython.new_mtsManagerComponentServices(internalInterfaceRequired))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsManagerComponentServices

    def InitializeInterfaceInternalRequired(self):
        r"""InitializeInterfaceInternalRequired(mtsManagerComponentServices self) -> bool"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_InitializeInterfaceInternalRequired(self)

    def IsConnected(self):
        r"""IsConnected(mtsManagerComponentServices self) -> bool"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_IsConnected(self)

    def ComponentCreate(self, *args):
        r"""
        ComponentCreate(mtsManagerComponentServices self, std::string const & className, std::string const & componentName) -> bool
        ComponentCreate(mtsManagerComponentServices self, std::string const & processName, std::string const & className, std::string const & componentName) -> bool
        ComponentCreate(mtsManagerComponentServices self, std::string const & className, mtsGenericObject constructorArg) -> bool
        ComponentCreate(mtsManagerComponentServices self, std::string const & processName, std::string const & className, mtsGenericObject constructorArg) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentCreate(self, *args)

    def ComponentConfigure(self, *args):
        r"""
        ComponentConfigure(mtsManagerComponentServices self, std::string const & componentName, std::string const & configString) -> bool
        ComponentConfigure(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & configString) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentConfigure(self, *args)

    def Connect(self, *args):
        r"""
        Connect(mtsManagerComponentServices self, std::string const & clientComponentName, std::string const & clientInterfaceName, std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Connect(mtsManagerComponentServices self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceName, std::string const & serverProcessName, std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Connect(mtsManagerComponentServices self, mtsDescriptionConnection connection) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_Connect(self, *args)

    def Disconnect(self, *args):
        r"""
        Disconnect(mtsManagerComponentServices self, std::string const & clientComponentName, std::string const & clientInterfaceName, std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Disconnect(mtsManagerComponentServices self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceName, std::string const & serverProcessName, std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Disconnect(mtsManagerComponentServices self, mtsDescriptionConnection connection) -> bool
        Disconnect(mtsManagerComponentServices self, ConnectionIDType connectionID) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_Disconnect(self, *args)

    def ComponentStart(self, *args):
        r"""
        ComponentStart(mtsManagerComponentServices self, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStart(mtsManagerComponentServices self, std::string const & componentName) -> bool
        ComponentStart(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStart(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentStart(self, *args)

    def ComponentStop(self, *args):
        r"""
        ComponentStop(mtsManagerComponentServices self, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStop(mtsManagerComponentServices self, std::string const & componentName) -> bool
        ComponentStop(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStop(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentStop(self, *args)

    def ComponentResume(self, *args):
        r"""
        ComponentResume(mtsManagerComponentServices self, std::string const & componentName, double const delayInSecond=0.0) -> bool
        ComponentResume(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double const delayInSecond=0.0) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentResume(self, *args)

    def ComponentGetState(self, *args):
        r"""
        ComponentGetState(mtsManagerComponentServices self, mtsDescriptionComponent component) -> mtsComponentState
        ComponentGetState(mtsManagerComponentServices self, std::string const componentName) -> std::string
        ComponentGetState(mtsManagerComponentServices self, std::string const & processName, std::string const componentName) -> std::string
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentGetState(self, *args)

    def GetNamesOfProcesses(self):
        r"""GetNamesOfProcesses(mtsManagerComponentServices self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetNamesOfProcesses(self)

    def GetNamesOfComponents(self, processName):
        r"""GetNamesOfComponents(mtsManagerComponentServices self, std::string const & processName) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetNamesOfComponents(self, processName)

    def GetNamesOfInterfaces(self, processName, componentName):
        r"""GetNamesOfInterfaces(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetNamesOfInterfaces(self, processName, componentName)

    def GetListOfConnections(self):
        r"""GetListOfConnections(mtsManagerComponentServices self) -> mtsDescriptionConnectionVec"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetListOfConnections(self)

    def GetListOfComponentClasses(self, *args):
        r"""
        GetListOfComponentClasses(mtsManagerComponentServices self) -> mtsDescriptionComponentClassVec
        GetListOfComponentClasses(mtsManagerComponentServices self, std::string const & processName) -> mtsDescriptionComponentClassVec
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetListOfComponentClasses(self, *args)

    def GetInterfaceProvidedDescription(self, *args):
        r"""
        GetInterfaceProvidedDescription(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & interfaceName) -> mtsInterfaceProvidedDescription
        GetInterfaceProvidedDescription(mtsManagerComponentServices self, mtsDescriptionInterfaceFullName interfaceDescription) -> mtsInterfaceProvidedDescription
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetInterfaceProvidedDescription(self, *args)

    def GetInterfaceRequiredDescription(self, *args):
        r"""
        GetInterfaceRequiredDescription(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & interfaceName) -> mtsInterfaceRequiredDescription
        GetInterfaceRequiredDescription(mtsManagerComponentServices self, mtsDescriptionInterfaceFullName interfaceDescription) -> mtsInterfaceRequiredDescription
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetInterfaceRequiredDescription(self, *args)

    def Load(self, *args):
        r"""
        Load(mtsManagerComponentServices self, std::string const & fileName) -> bool
        Load(mtsManagerComponentServices self, std::string const & processName, std::string const & fileName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_Load(self, *args)

    def EnableLogForwarding(self, *args):
        r"""
        EnableLogForwarding(mtsManagerComponentServices self)
        EnableLogForwarding(mtsManagerComponentServices self, mtsStringVector processNames)
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_EnableLogForwarding(self, *args)

    def DisableLogForwarding(self, *args):
        r"""
        DisableLogForwarding(mtsManagerComponentServices self)
        DisableLogForwarding(mtsManagerComponentServices self, mtsStringVector processNames)
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_DisableLogForwarding(self, *args)

    def GetLogForwardingStates(self, *args):
        r"""
        GetLogForwardingStates(mtsManagerComponentServices self, stdCharVec & states)
        GetLogForwardingStates(mtsManagerComponentServices self, mtsStringVector processNames, stdCharVec & states)
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetLogForwardingStates(self, *args)

    def GetAbsoluteTimeDiffs(self, processNames):
        r"""GetAbsoluteTimeDiffs(mtsManagerComponentServices self, mtsStringVector processNames) -> mtsDoubleVector"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetAbsoluteTimeDiffs(self, processNames)

    def WaitFor(self, *args):
        r"""
        WaitFor(mtsManagerComponentServices self, std::string const & processName, double timeoutInSec=-1.0) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double timeoutInSec=-1.0) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & state, double timeoutInSec=-1.0) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_WaitFor(self, *args)

# Register mtsManagerComponentServices in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsManagerComponentServices_swigregister(mtsManagerComponentServices)

def mtsManagerComponentServices_ClassServices():
    r"""mtsManagerComponentServices_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsManagerComponentServices_ClassServices()

class mtsTask(mtsComponent):
    r"""Proxy of C++ mtsTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTask_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTask_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTask_ClassServices()
    UnknownException = property(_cisstMultiTaskPython.mtsTask_UnknownException_get, _cisstMultiTaskPython.mtsTask_UnknownException_set, doc=r"""UnknownException : std::runtime_error""")
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTask

    def OnStartupException(self, excp):
        r"""OnStartupException(mtsTask self, std::exception const & excp)"""
        return _cisstMultiTaskPython.mtsTask_OnStartupException(self, excp)

    def Run(self):
        r"""Run(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_Run(self)

    def OnRunException(self, excp):
        r"""OnRunException(mtsTask self, std::exception const & excp)"""
        return _cisstMultiTaskPython.mtsTask_OnRunException(self, excp)

    def Configure(self, *args):
        r"""Configure(mtsTask self, std::string const & MARKED_AS_UNUSEDfilename="")"""
        return _cisstMultiTaskPython.mtsTask_Configure(self, *args)

    def SetInitializationDelay(self, delay):
        r"""SetInitializationDelay(mtsTask self, double delay)"""
        return _cisstMultiTaskPython.mtsTask_SetInitializationDelay(self, delay)

    def Create(self, *args):
        r"""
        Create(mtsTask self, void * data)
        Create(mtsTask self)
        """
        return _cisstMultiTaskPython.mtsTask_Create(self, *args)

    def GetAveragePeriod(self):
        r"""GetAveragePeriod(mtsTask self) -> double"""
        return _cisstMultiTaskPython.mtsTask_GetAveragePeriod(self)

    def GetDefaultStateTableName(self):
        r"""GetDefaultStateTableName(mtsTask self) -> std::string const"""
        return _cisstMultiTaskPython.mtsTask_GetDefaultStateTableName(self)

    def GetDefaultStateTable(self):
        r"""GetDefaultStateTable(mtsTask self) -> mtsStateTable *"""
        return _cisstMultiTaskPython.mtsTask_GetDefaultStateTable(self)

    def AddInterfaceRequiredWithoutSystemEventHandlers(self, interfaceRequiredName, required=MTS_REQUIRED):
        r"""AddInterfaceRequiredWithoutSystemEventHandlers(mtsTask self, std::string const & interfaceRequiredName, mtsRequiredType required=MTS_REQUIRED) -> mtsInterfaceRequired"""
        return _cisstMultiTaskPython.mtsTask_AddInterfaceRequiredWithoutSystemEventHandlers(self, interfaceRequiredName, required)

    def AddInterfaceProvidedWithoutSystemEvents(self, newInterfaceName, queueingPolicy=MTS_COMPONENT_POLICY, isProxy=False):
        r"""AddInterfaceProvidedWithoutSystemEvents(mtsTask self, std::string const & newInterfaceName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY, bool isProxy=False) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsTask_AddInterfaceProvidedWithoutSystemEvents(self, newInterfaceName, queueingPolicy, isProxy)

    def WaitToStart(self, timeout):
        r"""WaitToStart(mtsTask self, double timeout) -> bool"""
        return _cisstMultiTaskPython.mtsTask_WaitToStart(self, timeout)

    def WaitToTerminate(self, timeout):
        r"""WaitToTerminate(mtsTask self, double timeout) -> bool"""
        return _cisstMultiTaskPython.mtsTask_WaitToTerminate(self, timeout)

    def WaitForWakeup(self):
        r"""WaitForWakeup(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_WaitForWakeup(self)

    def Wakeup(self):
        r"""Wakeup(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_Wakeup(self)

    def ProcessManagerCommandsIfNotActive(self):
        r"""ProcessManagerCommandsIfNotActive(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_ProcessManagerCommandsIfNotActive(self)

    def CheckForOwnThread(self):
        r"""CheckForOwnThread(mtsTask self) -> bool"""
        return _cisstMultiTaskPython.mtsTask_CheckForOwnThread(self)

    def IsPeriodic(self):
        r"""IsPeriodic(mtsTask self) -> bool"""
        return _cisstMultiTaskPython.mtsTask_IsPeriodic(self)

    def IsOverranPeriod(self):
        r"""IsOverranPeriod(mtsTask self) -> bool"""
        return _cisstMultiTaskPython.mtsTask_IsOverranPeriod(self)

    def ResetOverranPeriod(self):
        r"""ResetOverranPeriod(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_ResetOverranPeriod(self)

# Register mtsTask in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTask_swigregister(mtsTask)

def mtsTask_ClassServices():
    r"""mtsTask_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTask_ClassServices()

class mtsTaskContinuous(mtsTask):
    r"""Proxy of C++ mtsTaskContinuous class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskContinuous_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskContinuous_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskContinuous_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskContinuous

    def Create(self, data=None):
        r"""Create(mtsTaskContinuous self, void * data=None)"""
        return _cisstMultiTaskPython.mtsTaskContinuous_Create(self, data)

# Register mtsTaskContinuous in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskContinuous_swigregister(mtsTaskContinuous)

def mtsTaskContinuous_ClassServices():
    r"""mtsTaskContinuous_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskContinuous_ClassServices()

class mtsTaskMain(mtsTaskContinuous):
    r"""Proxy of C++ mtsTaskMain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskMain_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskMain_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskMain_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskMain

# Register mtsTaskMain in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskMain_swigregister(mtsTaskMain)

def mtsTaskMain_ClassServices():
    r"""mtsTaskMain_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskMain_ClassServices()

class mtsTaskPeriodic(mtsTaskContinuous):
    r"""Proxy of C++ mtsTaskPeriodic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskPeriodic_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskPeriodic_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskPeriodic_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskPeriodic

    def GetPeriodicity(self):
        r"""GetPeriodicity(mtsTaskPeriodic self) -> double"""
        return _cisstMultiTaskPython.mtsTaskPeriodic_GetPeriodicity(self)

# Register mtsTaskPeriodic in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskPeriodic_swigregister(mtsTaskPeriodic)

def mtsTaskPeriodic_ClassServices():
    r"""mtsTaskPeriodic_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskPeriodic_ClassServices()

class mtsTaskFromSignal(mtsTaskContinuous):
    r"""Proxy of C++ mtsTaskFromSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskFromSignal_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskFromSignal_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskFromSignal_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskFromSignal

    def AddInterfaceRequiredWithoutSystemEventHandlers(self, interfaceRequiredName, required=MTS_REQUIRED):
        r"""AddInterfaceRequiredWithoutSystemEventHandlers(mtsTaskFromSignal self, std::string const & interfaceRequiredName, mtsRequiredType required=MTS_REQUIRED) -> mtsInterfaceRequired"""
        return _cisstMultiTaskPython.mtsTaskFromSignal_AddInterfaceRequiredWithoutSystemEventHandlers(self, interfaceRequiredName, required)

    def AddInterfaceProvidedWithoutSystemEvents(self, newInterfaceName, queueingPolicy=MTS_COMPONENT_POLICY, isProxy=False):
        r"""AddInterfaceProvidedWithoutSystemEvents(mtsTaskFromSignal self, std::string const & newInterfaceName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY, bool isProxy=False) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsTaskFromSignal_AddInterfaceProvidedWithoutSystemEvents(self, newInterfaceName, queueingPolicy, isProxy)

# Register mtsTaskFromSignal in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskFromSignal_swigregister(mtsTaskFromSignal)

def mtsTaskFromSignal_ClassServices():
    r"""mtsTaskFromSignal_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskFromSignal_ClassServices()

class mtsManagerLocalInterface(cisstCommonPython.cmnGenericObject):
    r"""Proxy of C++ mtsManagerLocalInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsManagerLocalInterface_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsManagerLocalInterface_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_ClassServices()

    def CreateComponentProxy(self, *args):
        r"""CreateComponentProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_CreateComponentProxy(self, *args)

    def RemoveComponentProxy(self, *args):
        r"""RemoveComponentProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_RemoveComponentProxy(self, *args)

    def CreateInterfaceProvidedProxy(self, *args):
        r"""CreateInterfaceProvidedProxy(mtsManagerLocalInterface self, std::string const & serverComponentProxyName, mtsInterfaceProvidedDescription providedInterfaceDescription, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_CreateInterfaceProvidedProxy(self, *args)

    def CreateInterfaceRequiredProxy(self, *args):
        r"""CreateInterfaceRequiredProxy(mtsManagerLocalInterface self, std::string const & clientComponentProxyName, mtsInterfaceRequiredDescription requiredInterfaceDescription, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_CreateInterfaceRequiredProxy(self, *args)

    def RemoveInterfaceProvidedProxy(self, *args):
        r"""RemoveInterfaceProvidedProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & providedInterfaceProxyName, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_RemoveInterfaceProvidedProxy(self, *args)

    def RemoveInterfaceRequiredProxy(self, *args):
        r"""RemoveInterfaceRequiredProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & requiredInterfaceProxyName, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_RemoveInterfaceRequiredProxy(self, *args)

    def ConnectServerSideInterface(self, *args):
        r"""ConnectServerSideInterface(mtsManagerLocalInterface self, mtsDescriptionConnection description, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_ConnectServerSideInterface(self, *args)

    def ConnectClientSideInterface(self, *args):
        r"""ConnectClientSideInterface(mtsManagerLocalInterface self, mtsDescriptionConnection description, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_ConnectClientSideInterface(self, *args)

    def GetProcessName(self, *args):
        r"""GetProcessName(mtsManagerLocalInterface self, std::string const & listenerID="") -> std::string const"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetProcessName(self, *args)

    def GetNamesOfCommands(self, *args):
        r"""GetNamesOfCommands(mtsManagerLocalInterface self, mtsStringVector namesOfCommands, std::string const & componentName, std::string const & providedInterfaceName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfCommands(self, *args)

    def GetNamesOfEventGenerators(self, *args):
        r"""GetNamesOfEventGenerators(mtsManagerLocalInterface self, mtsStringVector namesOfEventGenerators, std::string const & componentName, std::string const & providedInterfaceName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfEventGenerators(self, *args)

    def GetNamesOfFunctions(self, *args):
        r"""GetNamesOfFunctions(mtsManagerLocalInterface self, mtsStringVector namesOfFunctions, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfFunctions(self, *args)

    def GetNamesOfEventHandlers(self, *args):
        r"""GetNamesOfEventHandlers(mtsManagerLocalInterface self, mtsStringVector namesOfEventHandlers, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfEventHandlers(self, *args)

    def GetDescriptionOfCommand(self, *args):
        r"""GetDescriptionOfCommand(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, std::string const & commandName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfCommand(self, *args)

    def GetDescriptionOfEventGenerator(self, *args):
        r"""GetDescriptionOfEventGenerator(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, std::string const & eventGeneratorName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfEventGenerator(self, *args)

    def GetDescriptionOfFunction(self, *args):
        r"""GetDescriptionOfFunction(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & functionName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfFunction(self, *args)

    def GetDescriptionOfEventHandler(self, *args):
        r"""GetDescriptionOfEventHandler(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & eventHandlerName, std::string const & listenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfEventHandler(self, *args)

    def GetInterfaceProvidedDescription(self, *args):
        r"""GetInterfaceProvidedDescription(mtsManagerLocalInterface self, std::string const & serverComponentName, std::string const & providedInterfaceName, mtsInterfaceProvidedDescription providedInterfaceDescription, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetInterfaceProvidedDescription(self, *args)

    def GetInterfaceRequiredDescription(self, *args):
        r"""GetInterfaceRequiredDescription(mtsManagerLocalInterface self, std::string const & componentName, std::string const & requiredInterfaceName, mtsInterfaceRequiredDescription requiredInterfaceDescription, std::string const & listenerID="") -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetInterfaceRequiredDescription(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsManagerLocalInterface

# Register mtsManagerLocalInterface in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsManagerLocalInterface_swigregister(mtsManagerLocalInterface)

def mtsManagerLocalInterface_ClassServices():
    r"""mtsManagerLocalInterface_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsManagerLocalInterface_ClassServices()

class mtsManagerLocal(mtsManagerLocalInterface):
    r"""Proxy of C++ mtsManagerLocal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsManagerLocal_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsManagerLocal_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsManagerLocal_ClassServices()
    LCM_CONFIG_STANDALONE = _cisstMultiTaskPython.mtsManagerLocal_LCM_CONFIG_STANDALONE
    
    LCM_CONFIG_NETWORKED = _cisstMultiTaskPython.mtsManagerLocal_LCM_CONFIG_NETWORKED
    
    LCM_CONFIG_NETWORKED_WITH_GCM = _cisstMultiTaskPython.mtsManagerLocal_LCM_CONFIG_NETWORKED_WITH_GCM
    

    @staticmethod
    def LogDispatcher(str, len):
        r"""LogDispatcher(char const * str, int len)"""
        return _cisstMultiTaskPython.mtsManagerLocal_LogDispatcher(str, len)

    @staticmethod
    def SetLogForwarding(activate):
        r"""SetLogForwarding(bool activate)"""
        return _cisstMultiTaskPython.mtsManagerLocal_SetLogForwarding(activate)

    @staticmethod
    def GetLogForwardingState(*args):
        r"""
        GetLogForwardingState(bool & state)
        GetLogForwardingState() -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetLogForwardingState(*args)

    @staticmethod
    def IsLogForwardingEnabled():
        r"""IsLogForwardingEnabled() -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_IsLogForwardingEnabled()

    @staticmethod
    def IsLogAllowed():
        r"""IsLogAllowed() -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_IsLogAllowed()

    def CreateComponentDynamically(self, className, componentName, constructorArgSerialized):
        r"""CreateComponentDynamically(mtsManagerLocal self, std::string const & className, std::string const & componentName, std::string const & constructorArgSerialized) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateComponentDynamically(self, className, componentName, constructorArgSerialized)

    def ConfigureJSON(self, *args):
        r"""
        ConfigureJSON(mtsManagerLocal self, std::string const & filename) -> bool
        ConfigureJSON(mtsManagerLocal self, std::list< std::string > const & filenames) -> bool
        ConfigureJSON(mtsManagerLocal self, Json::Value const & configuration, cmnPath configPath) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_ConfigureJSON(self, *args)

    def ConfigureComponentJSON(self, componentConfiguration, configPath):
        r"""ConfigureComponentJSON(mtsManagerLocal self, Json::Value const & componentConfiguration, cmnPath configPath) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_ConfigureComponentJSON(self, componentConfiguration, configPath)

    def ConfigureConnectionJSON(self, connectionConfiguration):
        r"""ConfigureConnectionJSON(mtsManagerLocal self, Json::Value const & connectionConfiguration) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_ConfigureConnectionJSON(self, connectionConfiguration)

    def CreateComponentDynamicallyJSON(self, sharedLibrary, className, constructorArgSerialized):
        r"""CreateComponentDynamicallyJSON(mtsManagerLocal self, std::string const & sharedLibrary, std::string const & className, std::string const & constructorArgSerialized) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateComponentDynamicallyJSON(self, sharedLibrary, className, constructorArgSerialized)

    def AddComponent(self, component):
        r"""AddComponent(mtsManagerLocal self, mtsComponent component) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_AddComponent(self, component)

    def RemoveComponent(self, *args):
        r"""
        RemoveComponent(mtsManagerLocal self, mtsComponent component) -> bool
        RemoveComponent(mtsManagerLocal self, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_RemoveComponent(self, *args)

    def RemoveAllUserComponents(self):
        r"""RemoveAllUserComponents(mtsManagerLocal self) -> size_t"""
        return _cisstMultiTaskPython.mtsManagerLocal_RemoveAllUserComponents(self)

    def GetComponent(self, componentName):
        r"""GetComponent(mtsManagerLocal self, std::string const & componentName) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetComponent(self, componentName)

    def GetComponentAsTask(self, componentName):
        r"""GetComponentAsTask(mtsManagerLocal self, std::string const & componentName) -> mtsTask"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetComponentAsTask(self, componentName)

    def FindComponent(self, componentName):
        r"""FindComponent(mtsManagerLocal self, std::string const & componentName) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_FindComponent(self, componentName)

    def WaitForStateAll(self, *args):
        r"""WaitForStateAll(mtsManagerLocal self, mtsComponentState desiredState, double timeout=3.0*cmn_minute) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_WaitForStateAll(self, *args)

    def CreateAll(self):
        r"""CreateAll(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateAll(self)

    def CreateAllAndWait(self, timeoutInSeconds):
        r"""CreateAllAndWait(mtsManagerLocal self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateAllAndWait(self, timeoutInSeconds)

    def StartAll(self):
        r"""StartAll(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_StartAll(self)

    def StartAllAndWait(self, timeoutInSeconds):
        r"""StartAllAndWait(mtsManagerLocal self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_StartAllAndWait(self, timeoutInSeconds)

    def KillAll(self):
        r"""KillAll(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_KillAll(self)

    def KillAllAndWait(self, timeoutInSeconds):
        r"""KillAllAndWait(mtsManagerLocal self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_KillAllAndWait(self, timeoutInSeconds)

    def Cleanup(self):
        r"""Cleanup(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_Cleanup(self)

    def Connect(self, *args):
        r"""
        Connect(mtsManagerLocal self, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        Connect(mtsManagerLocal self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, std::string const & serverProcessName, std::string const & serverComponentName, std::string const & serverInterfaceProvidedName, unsigned int const retryCount=10) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_Connect(self, *args)

    def Disconnect(self, *args):
        r"""
        Disconnect(mtsManagerLocal self, ConnectionIDType const connectionID) -> bool
        Disconnect(mtsManagerLocal self, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        Disconnect(mtsManagerLocal self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, std::string const & serverProcessName, std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_Disconnect(self, *args)

    @staticmethod
    def GetInstance(*args):
        r"""
        GetInstance() -> mtsManagerLocal
        GetInstance(std::string const & globalComponentManagerIP, std::string const & thisProcessName="", std::string const & thisProcessIP="") -> mtsManagerLocal
        GetInstance(mtsManagerGlobal & globalComponentManager) -> mtsManagerLocal
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetInstance(*args)

    def GetNamesOfComponents(self, *args):
        r"""
        GetNamesOfComponents(mtsManagerLocal self) -> mtsStringVector
        GetNamesOfComponents(mtsManagerLocal self, mtsStringVector namesOfComponents)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfComponents(self, *args)

    def GetTimeServer(self):
        r"""GetTimeServer(mtsManagerLocal self) -> osaTimeServer"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetTimeServer(self)

    def GetProcessName(self, *args):
        r"""GetProcessName(mtsManagerLocal self, std::string const & MARKED_AS_UNUSEDlistenerID="") -> std::string const"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetProcessName(self, *args)

    def GetConfiguration(self):
        r"""GetConfiguration(mtsManagerLocal self) -> mtsManagerLocal::ConfigurationType"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetConfiguration(self)

    def IsGCMActive(self):
        r"""IsGCMActive(mtsManagerLocal self) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_IsGCMActive(self)

    def SetMainThreadId(self, *args):
        r"""
        SetMainThreadId(mtsManagerLocal self)
        SetMainThreadId(mtsManagerLocal self, osaThreadId const & threadId)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_SetMainThreadId(self, *args)

    def GetMainThreadId(self):
        r"""GetMainThreadId(mtsManagerLocal self) -> osaThreadId"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetMainThreadId(self)

    def PushCurrentMainTask(self, cur):
        r"""PushCurrentMainTask(mtsManagerLocal self, mtsTaskContinuous cur)"""
        return _cisstMultiTaskPython.mtsManagerLocal_PushCurrentMainTask(self, cur)

    def PopCurrentMainTask(self):
        r"""PopCurrentMainTask(mtsManagerLocal self) -> mtsTaskContinuous"""
        return _cisstMultiTaskPython.mtsManagerLocal_PopCurrentMainTask(self)

    def GetCurrentMainTask(self):
        r"""GetCurrentMainTask(mtsManagerLocal self) -> mtsTaskContinuous"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetCurrentMainTask(self)

    def GetNamesOfCommands(self, *args):
        r"""GetNamesOfCommands(mtsManagerLocal self, mtsStringVector namesOfCommands, std::string const & componentName, std::string const & providedInterfaceName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfCommands(self, *args)

    def GetNamesOfEventGenerators(self, *args):
        r"""GetNamesOfEventGenerators(mtsManagerLocal self, mtsStringVector namesOfEventGenerators, std::string const & componentName, std::string const & providedInterfaceName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfEventGenerators(self, *args)

    def GetNamesOfFunctions(self, *args):
        r"""GetNamesOfFunctions(mtsManagerLocal self, mtsStringVector namesOfFunctions, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfFunctions(self, *args)

    def GetNamesOfEventHandlers(self, *args):
        r"""GetNamesOfEventHandlers(mtsManagerLocal self, mtsStringVector namesOfEventHandlers, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfEventHandlers(self, *args)

    def GetDescriptionOfCommand(self, *args):
        r"""GetDescriptionOfCommand(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, std::string const & commandName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfCommand(self, *args)

    def GetDescriptionOfEventGenerator(self, *args):
        r"""GetDescriptionOfEventGenerator(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, std::string const & eventGeneratorName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfEventGenerator(self, *args)

    def GetDescriptionOfFunction(self, *args):
        r"""GetDescriptionOfFunction(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & functionName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfFunction(self, *args)

    def GetDescriptionOfEventHandler(self, *args):
        r"""GetDescriptionOfEventHandler(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, std::string const & eventHandlerName, std::string const & MARKED_AS_UNUSEDlistenerID="")"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfEventHandler(self, *args)

    def GetIPAddress(self):
        r"""GetIPAddress(mtsManagerLocal self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetIPAddress(self)

    @staticmethod
    def GetIPAddressList(*args):
        r"""
        GetIPAddressList() -> mtsStringVector
        GetIPAddressList(mtsStringVector ipAddresses)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetIPAddressList(*args)

    def GetName(self):
        r"""GetName(mtsManagerLocal self) -> std::string const"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetName(self)

    def SetInterfaceProvidedProxyAccessInfo(self, connectionID, endpointInfo):
        r"""SetInterfaceProvidedProxyAccessInfo(mtsManagerLocal self, ConnectionIDType const connectionID, std::string const & endpointInfo) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_SetInterfaceProvidedProxyAccessInfo(self, connectionID, endpointInfo)

    def GetGCMProcTimeSyncInfo(self, processNames, timeOffsets):
        r"""GetGCMProcTimeSyncInfo(mtsManagerLocal self, mtsStringVector processNames, mtsDoubleVector timeOffsets) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetGCMProcTimeSyncInfo(self, processNames, timeOffsets)

    def ToStreamDot(self, outputStream):
        r"""ToStreamDot(mtsManagerLocal self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsManagerLocal_ToStreamDot(self, outputStream)

    def UpdateFromC(self):
        comps = mtsManagerLocal.GetNamesOfComponents(self)
        for comp in comps:
            self.__dict__[comp] = mtsManagerLocal.GetComponent(self, comp)
            self.__dict__[comp].UpdateFromC()


# Register mtsManagerLocal in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsManagerLocal_swigregister(mtsManagerLocal)

def mtsManagerLocal_ClassServices():
    r"""mtsManagerLocal_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsManagerLocal_ClassServices()

def mtsManagerLocal_LogDispatcher(str, len):
    r"""mtsManagerLocal_LogDispatcher(char const * str, int len)"""
    return _cisstMultiTaskPython.mtsManagerLocal_LogDispatcher(str, len)

def mtsManagerLocal_SetLogForwarding(activate):
    r"""mtsManagerLocal_SetLogForwarding(bool activate)"""
    return _cisstMultiTaskPython.mtsManagerLocal_SetLogForwarding(activate)

def mtsManagerLocal_GetLogForwardingState(*args):
    r"""
    mtsManagerLocal_GetLogForwardingState(bool & state)
    mtsManagerLocal_GetLogForwardingState() -> bool
    """
    return _cisstMultiTaskPython.mtsManagerLocal_GetLogForwardingState(*args)

def mtsManagerLocal_IsLogForwardingEnabled():
    r"""mtsManagerLocal_IsLogForwardingEnabled() -> bool"""
    return _cisstMultiTaskPython.mtsManagerLocal_IsLogForwardingEnabled()

def mtsManagerLocal_IsLogAllowed():
    r"""mtsManagerLocal_IsLogAllowed() -> bool"""
    return _cisstMultiTaskPython.mtsManagerLocal_IsLogAllowed()
mtsManagerLocal.ProcessNameOfLCMDefault = _cisstMultiTaskPython.cvar.mtsManagerLocal_ProcessNameOfLCMDefault
mtsManagerLocal.ProcessNameOfLCMWithGCM = _cisstMultiTaskPython.cvar.mtsManagerLocal_ProcessNameOfLCMWithGCM

def mtsManagerLocal_GetInstance(*args):
    r"""
    mtsManagerLocal_GetInstance() -> mtsManagerLocal
    mtsManagerLocal_GetInstance(std::string const & globalComponentManagerIP, std::string const & thisProcessName="", std::string const & thisProcessIP="") -> mtsManagerLocal
    mtsManagerLocal_GetInstance(mtsManagerGlobal & globalComponentManager) -> mtsManagerLocal
    """
    return _cisstMultiTaskPython.mtsManagerLocal_GetInstance(*args)

def mtsManagerLocal_GetIPAddressList(*args):
    r"""
    mtsManagerLocal_GetIPAddressList() -> mtsStringVector
    mtsManagerLocal_GetIPAddressList(mtsStringVector ipAddresses)
    """
    return _cisstMultiTaskPython.mtsManagerLocal_GetIPAddressList(*args)

class mtsCollectorBase(mtsTaskFromSignal):
    r"""Proxy of C++ mtsCollectorBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    COLLECTOR_FILE_FORMAT_PLAIN_TEXT = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_PLAIN_TEXT
    
    COLLECTOR_FILE_FORMAT_BINARY = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_BINARY
    
    COLLECTOR_FILE_FORMAT_CSV = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_CSV
    
    COLLECTOR_FILE_FORMAT_UNDEFINED = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_UNDEFINED
    
    COLLECTOR_FILE_FLOATING_NOTATION_NONE = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FLOATING_NOTATION_NONE
    
    COLLECTOR_FILE_FLOATING_NOTATION_FIXED = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FLOATING_NOTATION_FIXED
    
    COLLECTOR_FILE_FLOATING_NOTATION_SCIENTIFIC = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FLOATING_NOTATION_SCIENTIFIC
    
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCollectorBase

    def GetDefaultOutputName(self):
        r"""GetDefaultOutputName(mtsCollectorBase self) -> std::string"""
        return _cisstMultiTaskPython.mtsCollectorBase_GetDefaultOutputName(self)

    def SetOutput(self, *args):
        r"""
        SetOutput(mtsCollectorBase self, std::string const & fileName, mtsCollectorBase::CollectorFileFormat const fileFormat)
        SetOutput(mtsCollectorBase self, ostream outputStream, mtsCollectorBase::CollectorFileFormat const fileFormat)
        SetOutput(mtsCollectorBase self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutput(self, *args)

    def SetOutputToDefault(self, *args):
        r"""
        SetOutputToDefault(mtsCollectorBase self, mtsCollectorBase::CollectorFileFormat const fileFormat)
        SetOutputToDefault(mtsCollectorBase self)
        """
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputToDefault(self, *args)

    def CloseOutput(self):
        r"""CloseOutput(mtsCollectorBase self)"""
        return _cisstMultiTaskPython.mtsCollectorBase_CloseOutput(self)

    def GetOutputFileName(self):
        r"""GetOutputFileName(mtsCollectorBase self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsCollectorBase_GetOutputFileName(self)

    def OpenFileIfNeeded(self):
        r"""OpenFileIfNeeded(mtsCollectorBase self)"""
        return _cisstMultiTaskPython.mtsCollectorBase_OpenFileIfNeeded(self)

    def StartCollection(self, delayInSeconds):
        r"""StartCollection(mtsCollectorBase self, mtsDouble delayInSeconds)"""
        return _cisstMultiTaskPython.mtsCollectorBase_StartCollection(self, delayInSeconds)

    def StopCollection(self, delayInSeconds):
        r"""StopCollection(mtsCollectorBase self, mtsDouble delayInSeconds)"""
        return _cisstMultiTaskPython.mtsCollectorBase_StopCollection(self, delayInSeconds)
    CollectionStartedEventTrigger = property(_cisstMultiTaskPython.mtsCollectorBase_CollectionStartedEventTrigger_get, _cisstMultiTaskPython.mtsCollectorBase_CollectionStartedEventTrigger_set, doc=r"""CollectionStartedEventTrigger : mtsFunctionVoid""")
    CollectionStoppedEventTrigger = property(_cisstMultiTaskPython.mtsCollectorBase_CollectionStoppedEventTrigger_get, _cisstMultiTaskPython.mtsCollectorBase_CollectionStoppedEventTrigger_set, doc=r"""CollectionStoppedEventTrigger : mtsFunctionWrite""")
    ProgressEventTrigger = property(_cisstMultiTaskPython.mtsCollectorBase_ProgressEventTrigger_get, _cisstMultiTaskPython.mtsCollectorBase_ProgressEventTrigger_set, doc=r"""ProgressEventTrigger : mtsFunctionWrite""")

    def SetWorkingDirectory(self, directory):
        r"""SetWorkingDirectory(mtsCollectorBase self, mtsStdString directory)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetWorkingDirectory(self, directory)

    def GetWorkingDirectory(self, placeHolder):
        r"""GetWorkingDirectory(mtsCollectorBase self, mtsStdString placeHolder)"""
        return _cisstMultiTaskPython.mtsCollectorBase_GetWorkingDirectory(self, placeHolder)

    def SetOutputStreamFloatingNotation(self, floatingNotation):
        r"""SetOutputStreamFloatingNotation(mtsCollectorBase self, mtsCollectorBase::CollectorFileFloatingNotation const floatingNotation)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamFloatingNotation(self, floatingNotation)

    def SetOutputStreamPrecision(self, precision):
        r"""SetOutputStreamPrecision(mtsCollectorBase self, int const precision)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamPrecision(self, precision)

    def SetOutputStreamWidth(self, width):
        r"""SetOutputStreamWidth(mtsCollectorBase self, int const width)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamWidth(self, width)

    def SetOutputStreamFill(self, fillCharacter):
        r"""SetOutputStreamFill(mtsCollectorBase self, char const fillCharacter)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamFill(self, fillCharacter)

# Register mtsCollectorBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCollectorBase_swigregister(mtsCollectorBase)

class mtsCollectorState(mtsCollectorBase):
    r"""Proxy of C++ mtsCollectorState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsCollectorState_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsCollectorState_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsCollectorState_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsCollectorState self, std::string const & collectorName) -> mtsCollectorState
        __init__(mtsCollectorState self, std::string const & targetComponentName, std::string const & targetStateTableName, mtsCollectorBase::CollectorFileFormat const fileFormat) -> mtsCollectorState
        """
        _cisstMultiTaskPython.mtsCollectorState_swiginit(self, _cisstMultiTaskPython.new_mtsCollectorState(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCollectorState

    def SetStateTable(self, *args):
        r"""SetStateTable(mtsCollectorState self, std::string const & componentName, std::string const & stateTableName="") -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_SetStateTable(self, *args)

    def AddSignal(self, *args):
        r"""AddSignal(mtsCollectorState self, std::string const & signalName="") -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_AddSignal(self, *args)

    def SetSamplingInterval(self, samplingInterval):
        r"""SetSamplingInterval(mtsCollectorState self, unsigned int const samplingInterval)"""
        return _cisstMultiTaskPython.mtsCollectorState_SetSamplingInterval(self, samplingInterval)

    def Connect(self):
        r"""Connect(mtsCollectorState self) -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_Connect(self)

    def Disconnect(self):
        r"""Disconnect(mtsCollectorState self) -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_Disconnect(self)

    @staticmethod
    def ConvertBinaryToText(*args):
        r"""ConvertBinaryToText(std::string const sourceBinaryLogFileName, std::string const targetPlainTextLogFileName, char const delimiter=',') -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_ConvertBinaryToText(*args)

# Register mtsCollectorState in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCollectorState_swigregister(mtsCollectorState)

def mtsCollectorState_ClassServices():
    r"""mtsCollectorState_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsCollectorState_ClassServices()

def mtsCollectorState_ConvertBinaryToText(*args):
    r"""mtsCollectorState_ConvertBinaryToText(std::string const sourceBinaryLogFileName, std::string const targetPlainTextLogFileName, char const delimiter=',') -> bool"""
    return _cisstMultiTaskPython.mtsCollectorState_ConvertBinaryToText(*args)

class mtsDoubleBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleBase

    def GetData(self, *args):
        r"""
        GetData(mtsDoubleBase self) -> mtsGenericObjectProxyBase< double >::value_type
        GetData(mtsDoubleBase self) -> mtsGenericObjectProxyBase< double >::value_type const &
        """
        return _cisstMultiTaskPython.mtsDoubleBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsDoubleBase self, mtsDoubleBase other)"""
        return _cisstMultiTaskPython.mtsDoubleBase_Assign(self, other)

# Register mtsDoubleBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleBase_swigregister(mtsDoubleBase)

def mtsDoubleBase_ClassServices():
    r"""mtsDoubleBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleBase_ClassServices()

class mtsDouble(mtsDoubleBase):
    r"""Proxy of C++ mtsGenericObjectProxy< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDouble_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDouble_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDouble_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsDouble_Data_get, _cisstMultiTaskPython.mtsDouble_Data_set, doc=r"""Data : mtsGenericObjectProxy<(double)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsDouble self) -> mtsDouble
        __init__(mtsDouble self, mtsDouble other) -> mtsDouble
        __init__(mtsDouble self, mtsGenericObjectProxy< double >::value_type const & data) -> mtsDouble
        """
        _cisstMultiTaskPython.mtsDouble_swiginit(self, _cisstMultiTaskPython.new_mtsDouble(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDouble

    def GetData(self, *args):
        r"""
        GetData(mtsDouble self) -> mtsGenericObjectProxy< double >::value_type
        GetData(mtsDouble self) -> mtsGenericObjectProxy< double >::value_type const &
        """
        return _cisstMultiTaskPython.mtsDouble_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsDouble self) -> double"""
        return _cisstMultiTaskPython.mtsDouble_GetDataCopy(self)

# Register mtsDouble in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDouble_swigregister(mtsDouble)

def mtsDouble_ClassServices():
    r"""mtsDouble_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDouble_ClassServices()

class mtsFloatBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatBase

    def GetData(self, *args):
        r"""
        GetData(mtsFloatBase self) -> mtsGenericObjectProxyBase< float >::value_type
        GetData(mtsFloatBase self) -> mtsGenericObjectProxyBase< float >::value_type const &
        """
        return _cisstMultiTaskPython.mtsFloatBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsFloatBase self, mtsFloatBase other)"""
        return _cisstMultiTaskPython.mtsFloatBase_Assign(self, other)

# Register mtsFloatBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatBase_swigregister(mtsFloatBase)

def mtsFloatBase_ClassServices():
    r"""mtsFloatBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatBase_ClassServices()

class mtsFloat(mtsFloatBase):
    r"""Proxy of C++ mtsGenericObjectProxy< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloat_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsFloat_Data_get, _cisstMultiTaskPython.mtsFloat_Data_set, doc=r"""Data : mtsGenericObjectProxy<(float)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsFloat self) -> mtsFloat
        __init__(mtsFloat self, mtsFloat other) -> mtsFloat
        __init__(mtsFloat self, mtsGenericObjectProxy< float >::value_type const & data) -> mtsFloat
        """
        _cisstMultiTaskPython.mtsFloat_swiginit(self, _cisstMultiTaskPython.new_mtsFloat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloat

    def GetData(self, *args):
        r"""
        GetData(mtsFloat self) -> mtsGenericObjectProxy< float >::value_type
        GetData(mtsFloat self) -> mtsGenericObjectProxy< float >::value_type const &
        """
        return _cisstMultiTaskPython.mtsFloat_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsFloat self) -> float"""
        return _cisstMultiTaskPython.mtsFloat_GetDataCopy(self)

# Register mtsFloat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloat_swigregister(mtsFloat)

def mtsFloat_ClassServices():
    r"""mtsFloat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloat_ClassServices()

class mtsIntBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsIntBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntBase

    def GetData(self, *args):
        r"""
        GetData(mtsIntBase self) -> mtsGenericObjectProxyBase< int >::value_type
        GetData(mtsIntBase self) -> mtsGenericObjectProxyBase< int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsIntBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsIntBase self, mtsIntBase other)"""
        return _cisstMultiTaskPython.mtsIntBase_Assign(self, other)

# Register mtsIntBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsIntBase_swigregister(mtsIntBase)

def mtsIntBase_ClassServices():
    r"""mtsIntBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsIntBase_ClassServices()

class mtsInt(mtsIntBase):
    r"""Proxy of C++ mtsGenericObjectProxy< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInt_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInt_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInt_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsInt_Data_get, _cisstMultiTaskPython.mtsInt_Data_set, doc=r"""Data : mtsGenericObjectProxy<(int)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsInt self) -> mtsInt
        __init__(mtsInt self, mtsInt other) -> mtsInt
        __init__(mtsInt self, mtsGenericObjectProxy< int >::value_type const & data) -> mtsInt
        """
        _cisstMultiTaskPython.mtsInt_swiginit(self, _cisstMultiTaskPython.new_mtsInt(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInt

    def GetData(self, *args):
        r"""
        GetData(mtsInt self) -> mtsGenericObjectProxy< int >::value_type
        GetData(mtsInt self) -> mtsGenericObjectProxy< int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsInt_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsInt self) -> int"""
        return _cisstMultiTaskPython.mtsInt_GetDataCopy(self)

# Register mtsInt in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInt_swigregister(mtsInt)

def mtsInt_ClassServices():
    r"""mtsInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInt_ClassServices()

class mtsUIntBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUIntBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUIntBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUIntBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUIntBase

    def GetData(self, *args):
        r"""
        GetData(mtsUIntBase self) -> mtsGenericObjectProxyBase< unsigned int >::value_type
        GetData(mtsUIntBase self) -> mtsGenericObjectProxyBase< unsigned int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUIntBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsUIntBase self, mtsUIntBase other)"""
        return _cisstMultiTaskPython.mtsUIntBase_Assign(self, other)

# Register mtsUIntBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUIntBase_swigregister(mtsUIntBase)

def mtsUIntBase_ClassServices():
    r"""mtsUIntBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUIntBase_ClassServices()

class mtsUInt(mtsUIntBase):
    r"""Proxy of C++ mtsGenericObjectProxy< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUInt_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUInt_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUInt_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsUInt_Data_get, _cisstMultiTaskPython.mtsUInt_Data_set, doc=r"""Data : mtsGenericObjectProxy<(unsigned int)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsUInt self) -> mtsUInt
        __init__(mtsUInt self, mtsUInt other) -> mtsUInt
        __init__(mtsUInt self, mtsGenericObjectProxy< unsigned int >::value_type const & data) -> mtsUInt
        """
        _cisstMultiTaskPython.mtsUInt_swiginit(self, _cisstMultiTaskPython.new_mtsUInt(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUInt

    def GetData(self, *args):
        r"""
        GetData(mtsUInt self) -> mtsGenericObjectProxy< unsigned int >::value_type
        GetData(mtsUInt self) -> mtsGenericObjectProxy< unsigned int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUInt_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsUInt self) -> unsigned int"""
        return _cisstMultiTaskPython.mtsUInt_GetDataCopy(self)

# Register mtsUInt in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUInt_swigregister(mtsUInt)

def mtsUInt_ClassServices():
    r"""mtsUInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUInt_ClassServices()

class mtsShortBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShortBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsShortBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShortBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShortBase

    def GetData(self, *args):
        r"""
        GetData(mtsShortBase self) -> mtsGenericObjectProxyBase< short >::value_type
        GetData(mtsShortBase self) -> mtsGenericObjectProxyBase< short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsShortBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsShortBase self, mtsShortBase other)"""
        return _cisstMultiTaskPython.mtsShortBase_Assign(self, other)

# Register mtsShortBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsShortBase_swigregister(mtsShortBase)

def mtsShortBase_ClassServices():
    r"""mtsShortBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsShortBase_ClassServices()

class mtsShort(mtsShortBase):
    r"""Proxy of C++ mtsGenericObjectProxy< short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShort_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsShort_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShort_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsShort_Data_get, _cisstMultiTaskPython.mtsShort_Data_set, doc=r"""Data : mtsGenericObjectProxy<(short)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsShort self) -> mtsShort
        __init__(mtsShort self, mtsShort other) -> mtsShort
        __init__(mtsShort self, mtsGenericObjectProxy< short >::value_type const & data) -> mtsShort
        """
        _cisstMultiTaskPython.mtsShort_swiginit(self, _cisstMultiTaskPython.new_mtsShort(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShort

    def GetData(self, *args):
        r"""
        GetData(mtsShort self) -> mtsGenericObjectProxy< short >::value_type
        GetData(mtsShort self) -> mtsGenericObjectProxy< short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsShort_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsShort self) -> short"""
        return _cisstMultiTaskPython.mtsShort_GetDataCopy(self)

# Register mtsShort in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsShort_swigregister(mtsShort)

def mtsShort_ClassServices():
    r"""mtsShort_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsShort_ClassServices()

class mtsUShortBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< unsigned short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUShortBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUShortBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUShortBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUShortBase

    def GetData(self, *args):
        r"""
        GetData(mtsUShortBase self) -> mtsGenericObjectProxyBase< unsigned short >::value_type
        GetData(mtsUShortBase self) -> mtsGenericObjectProxyBase< unsigned short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUShortBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsUShortBase self, mtsUShortBase other)"""
        return _cisstMultiTaskPython.mtsUShortBase_Assign(self, other)

# Register mtsUShortBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUShortBase_swigregister(mtsUShortBase)

def mtsUShortBase_ClassServices():
    r"""mtsUShortBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUShortBase_ClassServices()

class mtsUShort(mtsUShortBase):
    r"""Proxy of C++ mtsGenericObjectProxy< unsigned short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUShort_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUShort_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUShort_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsUShort_Data_get, _cisstMultiTaskPython.mtsUShort_Data_set, doc=r"""Data : mtsGenericObjectProxy<(unsigned short)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsUShort self) -> mtsUShort
        __init__(mtsUShort self, mtsUShort other) -> mtsUShort
        __init__(mtsUShort self, mtsGenericObjectProxy< unsigned short >::value_type const & data) -> mtsUShort
        """
        _cisstMultiTaskPython.mtsUShort_swiginit(self, _cisstMultiTaskPython.new_mtsUShort(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUShort

    def GetData(self, *args):
        r"""
        GetData(mtsUShort self) -> mtsGenericObjectProxy< unsigned short >::value_type
        GetData(mtsUShort self) -> mtsGenericObjectProxy< unsigned short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUShort_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsUShort self) -> unsigned short"""
        return _cisstMultiTaskPython.mtsUShort_GetDataCopy(self)

# Register mtsUShort in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUShort_swigregister(mtsUShort)

def mtsUShort_ClassServices():
    r"""mtsUShort_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUShort_ClassServices()

class mtsLongBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLongBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsLongBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLongBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLongBase

    def GetData(self, *args):
        r"""
        GetData(mtsLongBase self) -> mtsGenericObjectProxyBase< long >::value_type
        GetData(mtsLongBase self) -> mtsGenericObjectProxyBase< long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsLongBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsLongBase self, mtsLongBase other)"""
        return _cisstMultiTaskPython.mtsLongBase_Assign(self, other)

# Register mtsLongBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsLongBase_swigregister(mtsLongBase)

def mtsLongBase_ClassServices():
    r"""mtsLongBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsLongBase_ClassServices()

class mtsLong(mtsLongBase):
    r"""Proxy of C++ mtsGenericObjectProxy< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLong_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsLong_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLong_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsLong_Data_get, _cisstMultiTaskPython.mtsLong_Data_set, doc=r"""Data : mtsGenericObjectProxy<(long)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsLong self) -> mtsLong
        __init__(mtsLong self, mtsLong other) -> mtsLong
        __init__(mtsLong self, mtsGenericObjectProxy< long >::value_type const & data) -> mtsLong
        """
        _cisstMultiTaskPython.mtsLong_swiginit(self, _cisstMultiTaskPython.new_mtsLong(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLong

    def GetData(self, *args):
        r"""
        GetData(mtsLong self) -> mtsGenericObjectProxy< long >::value_type
        GetData(mtsLong self) -> mtsGenericObjectProxy< long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsLong_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsLong self) -> long"""
        return _cisstMultiTaskPython.mtsLong_GetDataCopy(self)

# Register mtsLong in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsLong_swigregister(mtsLong)

def mtsLong_ClassServices():
    r"""mtsLong_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsLong_ClassServices()

class mtsULongBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsULongBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsULongBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsULongBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsULongBase

    def GetData(self, *args):
        r"""
        GetData(mtsULongBase self) -> mtsGenericObjectProxyBase< unsigned long >::value_type
        GetData(mtsULongBase self) -> mtsGenericObjectProxyBase< unsigned long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsULongBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsULongBase self, mtsULongBase other)"""
        return _cisstMultiTaskPython.mtsULongBase_Assign(self, other)

# Register mtsULongBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsULongBase_swigregister(mtsULongBase)

def mtsULongBase_ClassServices():
    r"""mtsULongBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsULongBase_ClassServices()

class mtsULong(mtsULongBase):
    r"""Proxy of C++ mtsGenericObjectProxy< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsULong_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsULong_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsULong_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsULong_Data_get, _cisstMultiTaskPython.mtsULong_Data_set, doc=r"""Data : mtsGenericObjectProxy<(unsigned long)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsULong self) -> mtsULong
        __init__(mtsULong self, mtsULong other) -> mtsULong
        __init__(mtsULong self, mtsGenericObjectProxy< unsigned long >::value_type const & data) -> mtsULong
        """
        _cisstMultiTaskPython.mtsULong_swiginit(self, _cisstMultiTaskPython.new_mtsULong(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsULong

    def GetData(self, *args):
        r"""
        GetData(mtsULong self) -> mtsGenericObjectProxy< unsigned long >::value_type
        GetData(mtsULong self) -> mtsGenericObjectProxy< unsigned long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsULong_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsULong self) -> unsigned long"""
        return _cisstMultiTaskPython.mtsULong_GetDataCopy(self)

# Register mtsULong in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsULong_swigregister(mtsULong)

def mtsULong_ClassServices():
    r"""mtsULong_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsULong_ClassServices()

class mtsBoolBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsBoolBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsBoolBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsBoolBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsBoolBase

    def GetData(self, *args):
        r"""
        GetData(mtsBoolBase self) -> mtsGenericObjectProxyBase< bool >::value_type
        GetData(mtsBoolBase self) -> mtsGenericObjectProxyBase< bool >::value_type const &
        """
        return _cisstMultiTaskPython.mtsBoolBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsBoolBase self, mtsBoolBase other)"""
        return _cisstMultiTaskPython.mtsBoolBase_Assign(self, other)

# Register mtsBoolBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsBoolBase_swigregister(mtsBoolBase)

def mtsBoolBase_ClassServices():
    r"""mtsBoolBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsBoolBase_ClassServices()

class mtsBool(mtsBoolBase):
    r"""Proxy of C++ mtsGenericObjectProxy< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsBool_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsBool_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsBool_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsBool_Data_get, _cisstMultiTaskPython.mtsBool_Data_set, doc=r"""Data : mtsGenericObjectProxy<(bool)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsBool self) -> mtsBool
        __init__(mtsBool self, mtsBool other) -> mtsBool
        __init__(mtsBool self, mtsGenericObjectProxy< bool >::value_type const & data) -> mtsBool
        """
        _cisstMultiTaskPython.mtsBool_swiginit(self, _cisstMultiTaskPython.new_mtsBool(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsBool

    def GetData(self, *args):
        r"""
        GetData(mtsBool self) -> mtsGenericObjectProxy< bool >::value_type
        GetData(mtsBool self) -> mtsGenericObjectProxy< bool >::value_type const &
        """
        return _cisstMultiTaskPython.mtsBool_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsBool self) -> bool"""
        return _cisstMultiTaskPython.mtsBool_GetDataCopy(self)

# Register mtsBool in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsBool_swigregister(mtsBool)

def mtsBool_ClassServices():
    r"""mtsBool_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsBool_ClassServices()

class mtsStdStringBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdStringBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringBase

    def GetData(self, *args):
        r"""
        GetData(mtsStdStringBase self) -> mtsGenericObjectProxyBase< std::string >::value_type
        GetData(mtsStdStringBase self) -> mtsGenericObjectProxyBase< std::string >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdStringBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsStdStringBase self, mtsStdStringBase other)"""
        return _cisstMultiTaskPython.mtsStdStringBase_Assign(self, other)

# Register mtsStdStringBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdStringBase_swigregister(mtsStdStringBase)

def mtsStdStringBase_ClassServices():
    r"""mtsStdStringBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdStringBase_ClassServices()

class mtsStdString(mtsStdStringBase):
    r"""Proxy of C++ mtsGenericObjectProxy< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdString_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdString_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdString_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsStdString_Data_get, _cisstMultiTaskPython.mtsStdString_Data_set, doc=r"""Data : mtsGenericObjectProxy<(std::string)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsStdString self) -> mtsStdString
        __init__(mtsStdString self, mtsStdString other) -> mtsStdString
        __init__(mtsStdString self, mtsGenericObjectProxy< std::string >::value_type const & data) -> mtsStdString
        """
        _cisstMultiTaskPython.mtsStdString_swiginit(self, _cisstMultiTaskPython.new_mtsStdString(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdString

    def GetData(self, *args):
        r"""
        GetData(mtsStdString self) -> mtsGenericObjectProxy< std::string >::value_type
        GetData(mtsStdString self) -> mtsGenericObjectProxy< std::string >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdString_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsStdString self) -> std::string"""
        return _cisstMultiTaskPython.mtsStdString_GetDataCopy(self)

# Register mtsStdString in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdString_swigregister(mtsStdString)

def mtsStdString_ClassServices():
    r"""mtsStdString_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdString_ClassServices()

class mtsStdStringVecProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< stdStringVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringVecProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdStringVecProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringVecProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringVecProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsStdStringVecProxyBase self) -> mtsStringVector
        GetData(mtsStdStringVecProxyBase self) -> mtsStringVector
        """
        return _cisstMultiTaskPython.mtsStdStringVecProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsStdStringVecProxyBase self, mtsStdStringVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsStdStringVecProxyBase_Assign(self, other)

# Register mtsStdStringVecProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdStringVecProxyBase_swigregister(mtsStdStringVecProxyBase)

def mtsStdStringVecProxyBase_ClassServices():
    r"""mtsStdStringVecProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdStringVecProxyBase_ClassServices()

class mtsStdStringVecProxy(mtsStdStringVecProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< stdStringVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringVecProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdStringVecProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringVecProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsStdStringVecProxy_Data_get, _cisstMultiTaskPython.mtsStdStringVecProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(std::vector<(std::string,std::allocator<(std::string)>)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsStdStringVecProxy self) -> mtsStdStringVecProxy
        __init__(mtsStdStringVecProxy self, mtsStdStringVecProxy other) -> mtsStdStringVecProxy
        __init__(mtsStdStringVecProxy self, mtsStringVector data) -> mtsStdStringVecProxy
        """
        _cisstMultiTaskPython.mtsStdStringVecProxy_swiginit(self, _cisstMultiTaskPython.new_mtsStdStringVecProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringVecProxy

    def GetData(self, *args):
        r"""
        GetData(mtsStdStringVecProxy self) -> mtsStringVector
        GetData(mtsStdStringVecProxy self) -> mtsStringVector
        """
        return _cisstMultiTaskPython.mtsStdStringVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsStdStringVecProxy self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsStdStringVecProxy_GetDataCopy(self)

# Register mtsStdStringVecProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdStringVecProxy_swigregister(mtsStdStringVecProxy)

def mtsStdStringVecProxy_ClassServices():
    r"""mtsStdStringVecProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdStringVecProxy_ClassServices()

class mtsStdDoubleVecProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< stdDoubleVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdDoubleVecProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsStdDoubleVecProxyBase self) -> mtsDoubleVector
        GetData(mtsStdDoubleVecProxyBase self) -> mtsDoubleVector
        """
        return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsStdDoubleVecProxyBase self, mtsStdDoubleVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_Assign(self, other)

# Register mtsStdDoubleVecProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdDoubleVecProxyBase_swigregister(mtsStdDoubleVecProxyBase)

def mtsStdDoubleVecProxyBase_ClassServices():
    r"""mtsStdDoubleVecProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_ClassServices()

class mtsStdDoubleVecProxy(mtsStdDoubleVecProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< stdDoubleVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdDoubleVecProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdDoubleVecProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsStdDoubleVecProxy_Data_get, _cisstMultiTaskPython.mtsStdDoubleVecProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(std::vector<(double,std::allocator<(double)>)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsStdDoubleVecProxy self) -> mtsStdDoubleVecProxy
        __init__(mtsStdDoubleVecProxy self, mtsStdDoubleVecProxy other) -> mtsStdDoubleVecProxy
        __init__(mtsStdDoubleVecProxy self, mtsDoubleVector data) -> mtsStdDoubleVecProxy
        """
        _cisstMultiTaskPython.mtsStdDoubleVecProxy_swiginit(self, _cisstMultiTaskPython.new_mtsStdDoubleVecProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdDoubleVecProxy

    def GetData(self, *args):
        r"""
        GetData(mtsStdDoubleVecProxy self) -> mtsDoubleVector
        GetData(mtsStdDoubleVecProxy self) -> mtsDoubleVector
        """
        return _cisstMultiTaskPython.mtsStdDoubleVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsStdDoubleVecProxy self) -> mtsDoubleVector"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxy_GetDataCopy(self)

# Register mtsStdDoubleVecProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdDoubleVecProxy_swigregister(mtsStdDoubleVecProxy)

def mtsStdDoubleVecProxy_ClassServices():
    r"""mtsStdDoubleVecProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdDoubleVecProxy_ClassServices()

class mtsStdCharVecProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< stdCharVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdCharVecProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdCharVecProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdCharVecProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdCharVecProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsStdCharVecProxyBase self) -> mtsGenericObjectProxyBase< std::vector< char,std::allocator< char > > >::value_type
        GetData(mtsStdCharVecProxyBase self) -> mtsGenericObjectProxyBase< std::vector< char,std::allocator< char > > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdCharVecProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsStdCharVecProxyBase self, mtsStdCharVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsStdCharVecProxyBase_Assign(self, other)

# Register mtsStdCharVecProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdCharVecProxyBase_swigregister(mtsStdCharVecProxyBase)

def mtsStdCharVecProxyBase_ClassServices():
    r"""mtsStdCharVecProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdCharVecProxyBase_ClassServices()

class mtsStdCharVecProxy(mtsStdCharVecProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< stdCharVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdCharVecProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdCharVecProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdCharVecProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsStdCharVecProxy_Data_get, _cisstMultiTaskPython.mtsStdCharVecProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(std::vector<(char,std::allocator<(char)>)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsStdCharVecProxy self) -> mtsStdCharVecProxy
        __init__(mtsStdCharVecProxy self, mtsStdCharVecProxy other) -> mtsStdCharVecProxy
        __init__(mtsStdCharVecProxy self, mtsGenericObjectProxy< std::vector< char,std::allocator< char > > >::value_type const & data) -> mtsStdCharVecProxy
        """
        _cisstMultiTaskPython.mtsStdCharVecProxy_swiginit(self, _cisstMultiTaskPython.new_mtsStdCharVecProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdCharVecProxy

    def GetData(self, *args):
        r"""
        GetData(mtsStdCharVecProxy self) -> mtsGenericObjectProxy< std::vector< char,std::allocator< char > > >::value_type
        GetData(mtsStdCharVecProxy self) -> mtsGenericObjectProxy< std::vector< char,std::allocator< char > > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdCharVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsStdCharVecProxy self) -> stdCharVec"""
        return _cisstMultiTaskPython.mtsStdCharVecProxy_GetDataCopy(self)

# Register mtsStdCharVecProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdCharVecProxy_swigregister(mtsStdCharVecProxy)

def mtsStdCharVecProxy_ClassServices():
    r"""mtsStdCharVecProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdCharVecProxy_ClassServices()

class mtsVct1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct1Base self) -> mtsGenericObjectProxyBase< vct1 >::value_type
        GetData(mtsVct1Base self) -> mtsGenericObjectProxyBase< vct1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct1Base self, mtsVct1Base other)"""
        return _cisstMultiTaskPython.mtsVct1Base_Assign(self, other)

# Register mtsVct1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct1Base_swigregister(mtsVct1Base)

def mtsVct1Base_ClassServices():
    r"""mtsVct1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct1Base_ClassServices()

class mtsVct1(mtsVct1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct1_Data_get, _cisstMultiTaskPython.mtsVct1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct1 self) -> mtsVct1
        __init__(mtsVct1 self, mtsVct1 other) -> mtsVct1
        __init__(mtsVct1 self, mtsGenericObjectProxy< vct1 >::value_type const & data) -> mtsVct1
        """
        _cisstMultiTaskPython.mtsVct1_swiginit(self, _cisstMultiTaskPython.new_mtsVct1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct1

    def GetData(self, *args):
        r"""
        GetData(mtsVct1 self) -> mtsGenericObjectProxy< vct1 >::value_type
        GetData(mtsVct1 self) -> mtsGenericObjectProxy< vct1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct1 self) -> vct1"""
        return _cisstMultiTaskPython.mtsVct1_GetDataCopy(self)

# Register mtsVct1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct1_swigregister(mtsVct1)

def mtsVct1_ClassServices():
    r"""mtsVct1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct1_ClassServices()

class mtsVct2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct2Base self) -> mtsGenericObjectProxyBase< vct2 >::value_type
        GetData(mtsVct2Base self) -> mtsGenericObjectProxyBase< vct2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct2Base self, mtsVct2Base other)"""
        return _cisstMultiTaskPython.mtsVct2Base_Assign(self, other)

# Register mtsVct2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct2Base_swigregister(mtsVct2Base)

def mtsVct2Base_ClassServices():
    r"""mtsVct2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct2Base_ClassServices()

class mtsVct2(mtsVct2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct2_Data_get, _cisstMultiTaskPython.mtsVct2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct2 self) -> mtsVct2
        __init__(mtsVct2 self, mtsVct2 other) -> mtsVct2
        __init__(mtsVct2 self, mtsGenericObjectProxy< vct2 >::value_type const & data) -> mtsVct2
        """
        _cisstMultiTaskPython.mtsVct2_swiginit(self, _cisstMultiTaskPython.new_mtsVct2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2

    def GetData(self, *args):
        r"""
        GetData(mtsVct2 self) -> mtsGenericObjectProxy< vct2 >::value_type
        GetData(mtsVct2 self) -> mtsGenericObjectProxy< vct2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct2 self) -> vct2"""
        return _cisstMultiTaskPython.mtsVct2_GetDataCopy(self)

# Register mtsVct2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct2_swigregister(mtsVct2)

def mtsVct2_ClassServices():
    r"""mtsVct2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct2_ClassServices()

class mtsVct3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct3Base self) -> mtsGenericObjectProxyBase< vct3 >::value_type
        GetData(mtsVct3Base self) -> mtsGenericObjectProxyBase< vct3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct3Base self, mtsVct3Base other)"""
        return _cisstMultiTaskPython.mtsVct3Base_Assign(self, other)

# Register mtsVct3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct3Base_swigregister(mtsVct3Base)

def mtsVct3Base_ClassServices():
    r"""mtsVct3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct3Base_ClassServices()

class mtsVct3(mtsVct3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct3_Data_get, _cisstMultiTaskPython.mtsVct3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct3 self) -> mtsVct3
        __init__(mtsVct3 self, mtsVct3 other) -> mtsVct3
        __init__(mtsVct3 self, mtsGenericObjectProxy< vct3 >::value_type const & data) -> mtsVct3
        """
        _cisstMultiTaskPython.mtsVct3_swiginit(self, _cisstMultiTaskPython.new_mtsVct3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3

    def GetData(self, *args):
        r"""
        GetData(mtsVct3 self) -> mtsGenericObjectProxy< vct3 >::value_type
        GetData(mtsVct3 self) -> mtsGenericObjectProxy< vct3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct3 self) -> vct3"""
        return _cisstMultiTaskPython.mtsVct3_GetDataCopy(self)

# Register mtsVct3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct3_swigregister(mtsVct3)

def mtsVct3_ClassServices():
    r"""mtsVct3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct3_ClassServices()

class mtsVct4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct4Base self) -> mtsGenericObjectProxyBase< vct4 >::value_type
        GetData(mtsVct4Base self) -> mtsGenericObjectProxyBase< vct4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct4Base self, mtsVct4Base other)"""
        return _cisstMultiTaskPython.mtsVct4Base_Assign(self, other)

# Register mtsVct4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct4Base_swigregister(mtsVct4Base)

def mtsVct4Base_ClassServices():
    r"""mtsVct4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct4Base_ClassServices()

class mtsVct4(mtsVct4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct4_Data_get, _cisstMultiTaskPython.mtsVct4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct4 self) -> mtsVct4
        __init__(mtsVct4 self, mtsVct4 other) -> mtsVct4
        __init__(mtsVct4 self, mtsGenericObjectProxy< vct4 >::value_type const & data) -> mtsVct4
        """
        _cisstMultiTaskPython.mtsVct4_swiginit(self, _cisstMultiTaskPython.new_mtsVct4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4

    def GetData(self, *args):
        r"""
        GetData(mtsVct4 self) -> mtsGenericObjectProxy< vct4 >::value_type
        GetData(mtsVct4 self) -> mtsGenericObjectProxy< vct4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct4 self) -> vct4"""
        return _cisstMultiTaskPython.mtsVct4_GetDataCopy(self)

# Register mtsVct4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct4_swigregister(mtsVct4)

def mtsVct4_ClassServices():
    r"""mtsVct4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct4_ClassServices()

class mtsVct5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct5Base self) -> mtsGenericObjectProxyBase< vct5 >::value_type
        GetData(mtsVct5Base self) -> mtsGenericObjectProxyBase< vct5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct5Base self, mtsVct5Base other)"""
        return _cisstMultiTaskPython.mtsVct5Base_Assign(self, other)

# Register mtsVct5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct5Base_swigregister(mtsVct5Base)

def mtsVct5Base_ClassServices():
    r"""mtsVct5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct5Base_ClassServices()

class mtsVct5(mtsVct5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct5_Data_get, _cisstMultiTaskPython.mtsVct5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct5 self) -> mtsVct5
        __init__(mtsVct5 self, mtsVct5 other) -> mtsVct5
        __init__(mtsVct5 self, mtsGenericObjectProxy< vct5 >::value_type const & data) -> mtsVct5
        """
        _cisstMultiTaskPython.mtsVct5_swiginit(self, _cisstMultiTaskPython.new_mtsVct5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct5

    def GetData(self, *args):
        r"""
        GetData(mtsVct5 self) -> mtsGenericObjectProxy< vct5 >::value_type
        GetData(mtsVct5 self) -> mtsGenericObjectProxy< vct5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct5 self) -> vct5"""
        return _cisstMultiTaskPython.mtsVct5_GetDataCopy(self)

# Register mtsVct5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct5_swigregister(mtsVct5)

def mtsVct5_ClassServices():
    r"""mtsVct5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct5_ClassServices()

class mtsVct6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct6Base self) -> mtsGenericObjectProxyBase< vct6 >::value_type
        GetData(mtsVct6Base self) -> mtsGenericObjectProxyBase< vct6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct6Base self, mtsVct6Base other)"""
        return _cisstMultiTaskPython.mtsVct6Base_Assign(self, other)

# Register mtsVct6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct6Base_swigregister(mtsVct6Base)

def mtsVct6Base_ClassServices():
    r"""mtsVct6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct6Base_ClassServices()

class mtsVct6(mtsVct6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct6_Data_get, _cisstMultiTaskPython.mtsVct6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct6 self) -> mtsVct6
        __init__(mtsVct6 self, mtsVct6 other) -> mtsVct6
        __init__(mtsVct6 self, mtsGenericObjectProxy< vct6 >::value_type const & data) -> mtsVct6
        """
        _cisstMultiTaskPython.mtsVct6_swiginit(self, _cisstMultiTaskPython.new_mtsVct6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct6

    def GetData(self, *args):
        r"""
        GetData(mtsVct6 self) -> mtsGenericObjectProxy< vct6 >::value_type
        GetData(mtsVct6 self) -> mtsGenericObjectProxy< vct6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct6 self) -> vct6"""
        return _cisstMultiTaskPython.mtsVct6_GetDataCopy(self)

# Register mtsVct6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct6_swigregister(mtsVct6)

def mtsVct6_ClassServices():
    r"""mtsVct6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct6_ClassServices()

class mtsVct7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct7Base self) -> mtsGenericObjectProxyBase< vct7 >::value_type
        GetData(mtsVct7Base self) -> mtsGenericObjectProxyBase< vct7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct7Base self, mtsVct7Base other)"""
        return _cisstMultiTaskPython.mtsVct7Base_Assign(self, other)

# Register mtsVct7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct7Base_swigregister(mtsVct7Base)

def mtsVct7Base_ClassServices():
    r"""mtsVct7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct7Base_ClassServices()

class mtsVct7(mtsVct7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct7_Data_get, _cisstMultiTaskPython.mtsVct7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct7 self) -> mtsVct7
        __init__(mtsVct7 self, mtsVct7 other) -> mtsVct7
        __init__(mtsVct7 self, mtsGenericObjectProxy< vct7 >::value_type const & data) -> mtsVct7
        """
        _cisstMultiTaskPython.mtsVct7_swiginit(self, _cisstMultiTaskPython.new_mtsVct7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct7

    def GetData(self, *args):
        r"""
        GetData(mtsVct7 self) -> mtsGenericObjectProxy< vct7 >::value_type
        GetData(mtsVct7 self) -> mtsGenericObjectProxy< vct7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct7 self) -> vct7"""
        return _cisstMultiTaskPython.mtsVct7_GetDataCopy(self)

# Register mtsVct7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct7_swigregister(mtsVct7)

def mtsVct7_ClassServices():
    r"""mtsVct7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct7_ClassServices()

class mtsVct8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct8Base self) -> mtsGenericObjectProxyBase< vct8 >::value_type
        GetData(mtsVct8Base self) -> mtsGenericObjectProxyBase< vct8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct8Base self, mtsVct8Base other)"""
        return _cisstMultiTaskPython.mtsVct8Base_Assign(self, other)

# Register mtsVct8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct8Base_swigregister(mtsVct8Base)

def mtsVct8Base_ClassServices():
    r"""mtsVct8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct8Base_ClassServices()

class mtsVct8(mtsVct8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct8_Data_get, _cisstMultiTaskPython.mtsVct8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct8 self) -> mtsVct8
        __init__(mtsVct8 self, mtsVct8 other) -> mtsVct8
        __init__(mtsVct8 self, mtsGenericObjectProxy< vct8 >::value_type const & data) -> mtsVct8
        """
        _cisstMultiTaskPython.mtsVct8_swiginit(self, _cisstMultiTaskPython.new_mtsVct8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct8

    def GetData(self, *args):
        r"""
        GetData(mtsVct8 self) -> mtsGenericObjectProxy< vct8 >::value_type
        GetData(mtsVct8 self) -> mtsGenericObjectProxy< vct8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct8 self) -> vct8"""
        return _cisstMultiTaskPython.mtsVct8_GetDataCopy(self)

# Register mtsVct8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct8_swigregister(mtsVct8)

def mtsVct8_ClassServices():
    r"""mtsVct8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct8_ClassServices()

class mtsVct9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct9Base self) -> mtsGenericObjectProxyBase< vct9 >::value_type
        GetData(mtsVct9Base self) -> mtsGenericObjectProxyBase< vct9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct9Base self, mtsVct9Base other)"""
        return _cisstMultiTaskPython.mtsVct9Base_Assign(self, other)

# Register mtsVct9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct9Base_swigregister(mtsVct9Base)

def mtsVct9Base_ClassServices():
    r"""mtsVct9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct9Base_ClassServices()

class mtsVct9(mtsVct9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct9_Data_get, _cisstMultiTaskPython.mtsVct9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct9 self) -> mtsVct9
        __init__(mtsVct9 self, mtsVct9 other) -> mtsVct9
        __init__(mtsVct9 self, mtsGenericObjectProxy< vct9 >::value_type const & data) -> mtsVct9
        """
        _cisstMultiTaskPython.mtsVct9_swiginit(self, _cisstMultiTaskPython.new_mtsVct9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct9

    def GetData(self, *args):
        r"""
        GetData(mtsVct9 self) -> mtsGenericObjectProxy< vct9 >::value_type
        GetData(mtsVct9 self) -> mtsGenericObjectProxy< vct9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct9 self) -> vct9"""
        return _cisstMultiTaskPython.mtsVct9_GetDataCopy(self)

# Register mtsVct9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct9_swigregister(mtsVct9)

def mtsVct9_ClassServices():
    r"""mtsVct9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct9_ClassServices()

class mtsVctFloat1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat1Base self) -> mtsGenericObjectProxyBase< vctFloat1 >::value_type
        GetData(mtsVctFloat1Base self) -> mtsGenericObjectProxyBase< vctFloat1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat1Base self, mtsVctFloat1Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat1Base_Assign(self, other)

# Register mtsVctFloat1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat1Base_swigregister(mtsVctFloat1Base)

def mtsVctFloat1Base_ClassServices():
    r"""mtsVctFloat1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat1Base_ClassServices()

class mtsVctFloat1(mtsVctFloat1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat1_Data_get, _cisstMultiTaskPython.mtsVctFloat1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat1 self) -> mtsVctFloat1
        __init__(mtsVctFloat1 self, mtsVctFloat1 other) -> mtsVctFloat1
        __init__(mtsVctFloat1 self, mtsGenericObjectProxy< vctFloat1 >::value_type const & data) -> mtsVctFloat1
        """
        _cisstMultiTaskPython.mtsVctFloat1_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat1

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat1 self) -> mtsGenericObjectProxy< vctFloat1 >::value_type
        GetData(mtsVctFloat1 self) -> mtsGenericObjectProxy< vctFloat1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat1 self) -> vctFloat1"""
        return _cisstMultiTaskPython.mtsVctFloat1_GetDataCopy(self)

# Register mtsVctFloat1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat1_swigregister(mtsVctFloat1)

def mtsVctFloat1_ClassServices():
    r"""mtsVctFloat1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat1_ClassServices()

class mtsVctFloat2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat2Base self) -> mtsGenericObjectProxyBase< vctFloat2 >::value_type
        GetData(mtsVctFloat2Base self) -> mtsGenericObjectProxyBase< vctFloat2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat2Base self, mtsVctFloat2Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat2Base_Assign(self, other)

# Register mtsVctFloat2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat2Base_swigregister(mtsVctFloat2Base)

def mtsVctFloat2Base_ClassServices():
    r"""mtsVctFloat2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat2Base_ClassServices()

class mtsVctFloat2(mtsVctFloat2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat2_Data_get, _cisstMultiTaskPython.mtsVctFloat2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat2 self) -> mtsVctFloat2
        __init__(mtsVctFloat2 self, mtsVctFloat2 other) -> mtsVctFloat2
        __init__(mtsVctFloat2 self, mtsGenericObjectProxy< vctFloat2 >::value_type const & data) -> mtsVctFloat2
        """
        _cisstMultiTaskPython.mtsVctFloat2_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat2

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat2 self) -> mtsGenericObjectProxy< vctFloat2 >::value_type
        GetData(mtsVctFloat2 self) -> mtsGenericObjectProxy< vctFloat2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat2 self) -> vctFloat2"""
        return _cisstMultiTaskPython.mtsVctFloat2_GetDataCopy(self)

# Register mtsVctFloat2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat2_swigregister(mtsVctFloat2)

def mtsVctFloat2_ClassServices():
    r"""mtsVctFloat2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat2_ClassServices()

class mtsVctFloat3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat3Base self) -> mtsGenericObjectProxyBase< vctFloat3 >::value_type
        GetData(mtsVctFloat3Base self) -> mtsGenericObjectProxyBase< vctFloat3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat3Base self, mtsVctFloat3Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat3Base_Assign(self, other)

# Register mtsVctFloat3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat3Base_swigregister(mtsVctFloat3Base)

def mtsVctFloat3Base_ClassServices():
    r"""mtsVctFloat3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat3Base_ClassServices()

class mtsVctFloat3(mtsVctFloat3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat3_Data_get, _cisstMultiTaskPython.mtsVctFloat3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat3 self) -> mtsVctFloat3
        __init__(mtsVctFloat3 self, mtsVctFloat3 other) -> mtsVctFloat3
        __init__(mtsVctFloat3 self, mtsGenericObjectProxy< vctFloat3 >::value_type const & data) -> mtsVctFloat3
        """
        _cisstMultiTaskPython.mtsVctFloat3_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat3

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat3 self) -> mtsGenericObjectProxy< vctFloat3 >::value_type
        GetData(mtsVctFloat3 self) -> mtsGenericObjectProxy< vctFloat3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat3 self) -> vctFloat3"""
        return _cisstMultiTaskPython.mtsVctFloat3_GetDataCopy(self)

# Register mtsVctFloat3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat3_swigregister(mtsVctFloat3)

def mtsVctFloat3_ClassServices():
    r"""mtsVctFloat3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat3_ClassServices()

class mtsVctFloat4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat4Base self) -> mtsGenericObjectProxyBase< vctFloat4 >::value_type
        GetData(mtsVctFloat4Base self) -> mtsGenericObjectProxyBase< vctFloat4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat4Base self, mtsVctFloat4Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat4Base_Assign(self, other)

# Register mtsVctFloat4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat4Base_swigregister(mtsVctFloat4Base)

def mtsVctFloat4Base_ClassServices():
    r"""mtsVctFloat4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat4Base_ClassServices()

class mtsVctFloat4(mtsVctFloat4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat4_Data_get, _cisstMultiTaskPython.mtsVctFloat4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat4 self) -> mtsVctFloat4
        __init__(mtsVctFloat4 self, mtsVctFloat4 other) -> mtsVctFloat4
        __init__(mtsVctFloat4 self, mtsGenericObjectProxy< vctFloat4 >::value_type const & data) -> mtsVctFloat4
        """
        _cisstMultiTaskPython.mtsVctFloat4_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat4

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat4 self) -> mtsGenericObjectProxy< vctFloat4 >::value_type
        GetData(mtsVctFloat4 self) -> mtsGenericObjectProxy< vctFloat4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat4 self) -> vctFloat4"""
        return _cisstMultiTaskPython.mtsVctFloat4_GetDataCopy(self)

# Register mtsVctFloat4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat4_swigregister(mtsVctFloat4)

def mtsVctFloat4_ClassServices():
    r"""mtsVctFloat4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat4_ClassServices()

class mtsVctFloat5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat5Base self) -> mtsGenericObjectProxyBase< vctFloat5 >::value_type
        GetData(mtsVctFloat5Base self) -> mtsGenericObjectProxyBase< vctFloat5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat5Base self, mtsVctFloat5Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat5Base_Assign(self, other)

# Register mtsVctFloat5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat5Base_swigregister(mtsVctFloat5Base)

def mtsVctFloat5Base_ClassServices():
    r"""mtsVctFloat5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat5Base_ClassServices()

class mtsVctFloat5(mtsVctFloat5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat5_Data_get, _cisstMultiTaskPython.mtsVctFloat5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat5 self) -> mtsVctFloat5
        __init__(mtsVctFloat5 self, mtsVctFloat5 other) -> mtsVctFloat5
        __init__(mtsVctFloat5 self, mtsGenericObjectProxy< vctFloat5 >::value_type const & data) -> mtsVctFloat5
        """
        _cisstMultiTaskPython.mtsVctFloat5_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat5

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat5 self) -> mtsGenericObjectProxy< vctFloat5 >::value_type
        GetData(mtsVctFloat5 self) -> mtsGenericObjectProxy< vctFloat5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat5 self) -> vctFloat5"""
        return _cisstMultiTaskPython.mtsVctFloat5_GetDataCopy(self)

# Register mtsVctFloat5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat5_swigregister(mtsVctFloat5)

def mtsVctFloat5_ClassServices():
    r"""mtsVctFloat5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat5_ClassServices()

class mtsVctFloat6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat6Base self) -> mtsGenericObjectProxyBase< vctFloat6 >::value_type
        GetData(mtsVctFloat6Base self) -> mtsGenericObjectProxyBase< vctFloat6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat6Base self, mtsVctFloat6Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat6Base_Assign(self, other)

# Register mtsVctFloat6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat6Base_swigregister(mtsVctFloat6Base)

def mtsVctFloat6Base_ClassServices():
    r"""mtsVctFloat6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat6Base_ClassServices()

class mtsVctFloat6(mtsVctFloat6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat6_Data_get, _cisstMultiTaskPython.mtsVctFloat6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat6 self) -> mtsVctFloat6
        __init__(mtsVctFloat6 self, mtsVctFloat6 other) -> mtsVctFloat6
        __init__(mtsVctFloat6 self, mtsGenericObjectProxy< vctFloat6 >::value_type const & data) -> mtsVctFloat6
        """
        _cisstMultiTaskPython.mtsVctFloat6_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat6

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat6 self) -> mtsGenericObjectProxy< vctFloat6 >::value_type
        GetData(mtsVctFloat6 self) -> mtsGenericObjectProxy< vctFloat6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat6 self) -> vctFloat6"""
        return _cisstMultiTaskPython.mtsVctFloat6_GetDataCopy(self)

# Register mtsVctFloat6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat6_swigregister(mtsVctFloat6)

def mtsVctFloat6_ClassServices():
    r"""mtsVctFloat6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat6_ClassServices()

class mtsVctFloat7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat7Base self) -> mtsGenericObjectProxyBase< vctFloat7 >::value_type
        GetData(mtsVctFloat7Base self) -> mtsGenericObjectProxyBase< vctFloat7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat7Base self, mtsVctFloat7Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat7Base_Assign(self, other)

# Register mtsVctFloat7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat7Base_swigregister(mtsVctFloat7Base)

def mtsVctFloat7Base_ClassServices():
    r"""mtsVctFloat7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat7Base_ClassServices()

class mtsVctFloat7(mtsVctFloat7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat7_Data_get, _cisstMultiTaskPython.mtsVctFloat7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat7 self) -> mtsVctFloat7
        __init__(mtsVctFloat7 self, mtsVctFloat7 other) -> mtsVctFloat7
        __init__(mtsVctFloat7 self, mtsGenericObjectProxy< vctFloat7 >::value_type const & data) -> mtsVctFloat7
        """
        _cisstMultiTaskPython.mtsVctFloat7_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat7

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat7 self) -> mtsGenericObjectProxy< vctFloat7 >::value_type
        GetData(mtsVctFloat7 self) -> mtsGenericObjectProxy< vctFloat7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat7 self) -> vctFloat7"""
        return _cisstMultiTaskPython.mtsVctFloat7_GetDataCopy(self)

# Register mtsVctFloat7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat7_swigregister(mtsVctFloat7)

def mtsVctFloat7_ClassServices():
    r"""mtsVctFloat7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat7_ClassServices()

class mtsVctFloat8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat8Base self) -> mtsGenericObjectProxyBase< vctFloat8 >::value_type
        GetData(mtsVctFloat8Base self) -> mtsGenericObjectProxyBase< vctFloat8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat8Base self, mtsVctFloat8Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat8Base_Assign(self, other)

# Register mtsVctFloat8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat8Base_swigregister(mtsVctFloat8Base)

def mtsVctFloat8Base_ClassServices():
    r"""mtsVctFloat8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat8Base_ClassServices()

class mtsVctFloat8(mtsVctFloat8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat8_Data_get, _cisstMultiTaskPython.mtsVctFloat8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat8 self) -> mtsVctFloat8
        __init__(mtsVctFloat8 self, mtsVctFloat8 other) -> mtsVctFloat8
        __init__(mtsVctFloat8 self, mtsGenericObjectProxy< vctFloat8 >::value_type const & data) -> mtsVctFloat8
        """
        _cisstMultiTaskPython.mtsVctFloat8_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat8

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat8 self) -> mtsGenericObjectProxy< vctFloat8 >::value_type
        GetData(mtsVctFloat8 self) -> mtsGenericObjectProxy< vctFloat8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat8 self) -> vctFloat8"""
        return _cisstMultiTaskPython.mtsVctFloat8_GetDataCopy(self)

# Register mtsVctFloat8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat8_swigregister(mtsVctFloat8)

def mtsVctFloat8_ClassServices():
    r"""mtsVctFloat8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat8_ClassServices()

class mtsVctFloat9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloat9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat9Base self) -> mtsGenericObjectProxyBase< vctFloat9 >::value_type
        GetData(mtsVctFloat9Base self) -> mtsGenericObjectProxyBase< vctFloat9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloat9Base self, mtsVctFloat9Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat9Base_Assign(self, other)

# Register mtsVctFloat9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat9Base_swigregister(mtsVctFloat9Base)

def mtsVctFloat9Base_ClassServices():
    r"""mtsVctFloat9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat9Base_ClassServices()

class mtsVctFloat9(mtsVctFloat9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloat9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloat9_Data_get, _cisstMultiTaskPython.mtsVctFloat9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloat9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloat9 self) -> mtsVctFloat9
        __init__(mtsVctFloat9 self, mtsVctFloat9 other) -> mtsVctFloat9
        __init__(mtsVctFloat9 self, mtsGenericObjectProxy< vctFloat9 >::value_type const & data) -> mtsVctFloat9
        """
        _cisstMultiTaskPython.mtsVctFloat9_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloat9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat9

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloat9 self) -> mtsGenericObjectProxy< vctFloat9 >::value_type
        GetData(mtsVctFloat9 self) -> mtsGenericObjectProxy< vctFloat9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloat9 self) -> vctFloat9"""
        return _cisstMultiTaskPython.mtsVctFloat9_GetDataCopy(self)

# Register mtsVctFloat9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloat9_swigregister(mtsVctFloat9)

def mtsVctFloat9_ClassServices():
    r"""mtsVctFloat9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloat9_ClassServices()

class mtsVctLong1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong1Base self) -> mtsGenericObjectProxyBase< vctLong1 >::value_type
        GetData(mtsVctLong1Base self) -> mtsGenericObjectProxyBase< vctLong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong1Base self, mtsVctLong1Base other)"""
        return _cisstMultiTaskPython.mtsVctLong1Base_Assign(self, other)

# Register mtsVctLong1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong1Base_swigregister(mtsVctLong1Base)

def mtsVctLong1Base_ClassServices():
    r"""mtsVctLong1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong1Base_ClassServices()

class mtsVctLong1(mtsVctLong1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong1_Data_get, _cisstMultiTaskPython.mtsVctLong1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong1 self) -> mtsVctLong1
        __init__(mtsVctLong1 self, mtsVctLong1 other) -> mtsVctLong1
        __init__(mtsVctLong1 self, mtsGenericObjectProxy< vctLong1 >::value_type const & data) -> mtsVctLong1
        """
        _cisstMultiTaskPython.mtsVctLong1_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong1

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong1 self) -> mtsGenericObjectProxy< vctLong1 >::value_type
        GetData(mtsVctLong1 self) -> mtsGenericObjectProxy< vctLong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong1 self) -> vctLong1"""
        return _cisstMultiTaskPython.mtsVctLong1_GetDataCopy(self)

# Register mtsVctLong1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong1_swigregister(mtsVctLong1)

def mtsVctLong1_ClassServices():
    r"""mtsVctLong1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong1_ClassServices()

class mtsVctLong2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong2Base self) -> mtsGenericObjectProxyBase< vctLong2 >::value_type
        GetData(mtsVctLong2Base self) -> mtsGenericObjectProxyBase< vctLong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong2Base self, mtsVctLong2Base other)"""
        return _cisstMultiTaskPython.mtsVctLong2Base_Assign(self, other)

# Register mtsVctLong2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong2Base_swigregister(mtsVctLong2Base)

def mtsVctLong2Base_ClassServices():
    r"""mtsVctLong2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong2Base_ClassServices()

class mtsVctLong2(mtsVctLong2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong2_Data_get, _cisstMultiTaskPython.mtsVctLong2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong2 self) -> mtsVctLong2
        __init__(mtsVctLong2 self, mtsVctLong2 other) -> mtsVctLong2
        __init__(mtsVctLong2 self, mtsGenericObjectProxy< vctLong2 >::value_type const & data) -> mtsVctLong2
        """
        _cisstMultiTaskPython.mtsVctLong2_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong2

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong2 self) -> mtsGenericObjectProxy< vctLong2 >::value_type
        GetData(mtsVctLong2 self) -> mtsGenericObjectProxy< vctLong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong2 self) -> vctLong2"""
        return _cisstMultiTaskPython.mtsVctLong2_GetDataCopy(self)

# Register mtsVctLong2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong2_swigregister(mtsVctLong2)

def mtsVctLong2_ClassServices():
    r"""mtsVctLong2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong2_ClassServices()

class mtsVctLong3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong3Base self) -> mtsGenericObjectProxyBase< vctLong3 >::value_type
        GetData(mtsVctLong3Base self) -> mtsGenericObjectProxyBase< vctLong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong3Base self, mtsVctLong3Base other)"""
        return _cisstMultiTaskPython.mtsVctLong3Base_Assign(self, other)

# Register mtsVctLong3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong3Base_swigregister(mtsVctLong3Base)

def mtsVctLong3Base_ClassServices():
    r"""mtsVctLong3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong3Base_ClassServices()

class mtsVctLong3(mtsVctLong3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong3_Data_get, _cisstMultiTaskPython.mtsVctLong3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong3 self) -> mtsVctLong3
        __init__(mtsVctLong3 self, mtsVctLong3 other) -> mtsVctLong3
        __init__(mtsVctLong3 self, mtsGenericObjectProxy< vctLong3 >::value_type const & data) -> mtsVctLong3
        """
        _cisstMultiTaskPython.mtsVctLong3_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong3

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong3 self) -> mtsGenericObjectProxy< vctLong3 >::value_type
        GetData(mtsVctLong3 self) -> mtsGenericObjectProxy< vctLong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong3 self) -> vctLong3"""
        return _cisstMultiTaskPython.mtsVctLong3_GetDataCopy(self)

# Register mtsVctLong3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong3_swigregister(mtsVctLong3)

def mtsVctLong3_ClassServices():
    r"""mtsVctLong3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong3_ClassServices()

class mtsVctLong4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong4Base self) -> mtsGenericObjectProxyBase< vctLong4 >::value_type
        GetData(mtsVctLong4Base self) -> mtsGenericObjectProxyBase< vctLong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong4Base self, mtsVctLong4Base other)"""
        return _cisstMultiTaskPython.mtsVctLong4Base_Assign(self, other)

# Register mtsVctLong4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong4Base_swigregister(mtsVctLong4Base)

def mtsVctLong4Base_ClassServices():
    r"""mtsVctLong4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong4Base_ClassServices()

class mtsVctLong4(mtsVctLong4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong4_Data_get, _cisstMultiTaskPython.mtsVctLong4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong4 self) -> mtsVctLong4
        __init__(mtsVctLong4 self, mtsVctLong4 other) -> mtsVctLong4
        __init__(mtsVctLong4 self, mtsGenericObjectProxy< vctLong4 >::value_type const & data) -> mtsVctLong4
        """
        _cisstMultiTaskPython.mtsVctLong4_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong4

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong4 self) -> mtsGenericObjectProxy< vctLong4 >::value_type
        GetData(mtsVctLong4 self) -> mtsGenericObjectProxy< vctLong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong4 self) -> vctLong4"""
        return _cisstMultiTaskPython.mtsVctLong4_GetDataCopy(self)

# Register mtsVctLong4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong4_swigregister(mtsVctLong4)

def mtsVctLong4_ClassServices():
    r"""mtsVctLong4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong4_ClassServices()

class mtsVctLong5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong5Base self) -> mtsGenericObjectProxyBase< vctLong5 >::value_type
        GetData(mtsVctLong5Base self) -> mtsGenericObjectProxyBase< vctLong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong5Base self, mtsVctLong5Base other)"""
        return _cisstMultiTaskPython.mtsVctLong5Base_Assign(self, other)

# Register mtsVctLong5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong5Base_swigregister(mtsVctLong5Base)

def mtsVctLong5Base_ClassServices():
    r"""mtsVctLong5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong5Base_ClassServices()

class mtsVctLong5(mtsVctLong5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong5_Data_get, _cisstMultiTaskPython.mtsVctLong5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong5 self) -> mtsVctLong5
        __init__(mtsVctLong5 self, mtsVctLong5 other) -> mtsVctLong5
        __init__(mtsVctLong5 self, mtsGenericObjectProxy< vctLong5 >::value_type const & data) -> mtsVctLong5
        """
        _cisstMultiTaskPython.mtsVctLong5_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong5

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong5 self) -> mtsGenericObjectProxy< vctLong5 >::value_type
        GetData(mtsVctLong5 self) -> mtsGenericObjectProxy< vctLong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong5 self) -> vctLong5"""
        return _cisstMultiTaskPython.mtsVctLong5_GetDataCopy(self)

# Register mtsVctLong5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong5_swigregister(mtsVctLong5)

def mtsVctLong5_ClassServices():
    r"""mtsVctLong5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong5_ClassServices()

class mtsVctLong6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong6Base self) -> mtsGenericObjectProxyBase< vctLong6 >::value_type
        GetData(mtsVctLong6Base self) -> mtsGenericObjectProxyBase< vctLong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong6Base self, mtsVctLong6Base other)"""
        return _cisstMultiTaskPython.mtsVctLong6Base_Assign(self, other)

# Register mtsVctLong6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong6Base_swigregister(mtsVctLong6Base)

def mtsVctLong6Base_ClassServices():
    r"""mtsVctLong6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong6Base_ClassServices()

class mtsVctLong6(mtsVctLong6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong6_Data_get, _cisstMultiTaskPython.mtsVctLong6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong6 self) -> mtsVctLong6
        __init__(mtsVctLong6 self, mtsVctLong6 other) -> mtsVctLong6
        __init__(mtsVctLong6 self, mtsGenericObjectProxy< vctLong6 >::value_type const & data) -> mtsVctLong6
        """
        _cisstMultiTaskPython.mtsVctLong6_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong6

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong6 self) -> mtsGenericObjectProxy< vctLong6 >::value_type
        GetData(mtsVctLong6 self) -> mtsGenericObjectProxy< vctLong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong6 self) -> vctLong6"""
        return _cisstMultiTaskPython.mtsVctLong6_GetDataCopy(self)

# Register mtsVctLong6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong6_swigregister(mtsVctLong6)

def mtsVctLong6_ClassServices():
    r"""mtsVctLong6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong6_ClassServices()

class mtsVctLong7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong7Base self) -> mtsGenericObjectProxyBase< vctLong7 >::value_type
        GetData(mtsVctLong7Base self) -> mtsGenericObjectProxyBase< vctLong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong7Base self, mtsVctLong7Base other)"""
        return _cisstMultiTaskPython.mtsVctLong7Base_Assign(self, other)

# Register mtsVctLong7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong7Base_swigregister(mtsVctLong7Base)

def mtsVctLong7Base_ClassServices():
    r"""mtsVctLong7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong7Base_ClassServices()

class mtsVctLong7(mtsVctLong7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong7_Data_get, _cisstMultiTaskPython.mtsVctLong7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong7 self) -> mtsVctLong7
        __init__(mtsVctLong7 self, mtsVctLong7 other) -> mtsVctLong7
        __init__(mtsVctLong7 self, mtsGenericObjectProxy< vctLong7 >::value_type const & data) -> mtsVctLong7
        """
        _cisstMultiTaskPython.mtsVctLong7_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong7

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong7 self) -> mtsGenericObjectProxy< vctLong7 >::value_type
        GetData(mtsVctLong7 self) -> mtsGenericObjectProxy< vctLong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong7 self) -> vctLong7"""
        return _cisstMultiTaskPython.mtsVctLong7_GetDataCopy(self)

# Register mtsVctLong7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong7_swigregister(mtsVctLong7)

def mtsVctLong7_ClassServices():
    r"""mtsVctLong7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong7_ClassServices()

class mtsVctLong8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong8Base self) -> mtsGenericObjectProxyBase< vctLong8 >::value_type
        GetData(mtsVctLong8Base self) -> mtsGenericObjectProxyBase< vctLong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong8Base self, mtsVctLong8Base other)"""
        return _cisstMultiTaskPython.mtsVctLong8Base_Assign(self, other)

# Register mtsVctLong8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong8Base_swigregister(mtsVctLong8Base)

def mtsVctLong8Base_ClassServices():
    r"""mtsVctLong8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong8Base_ClassServices()

class mtsVctLong8(mtsVctLong8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong8_Data_get, _cisstMultiTaskPython.mtsVctLong8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong8 self) -> mtsVctLong8
        __init__(mtsVctLong8 self, mtsVctLong8 other) -> mtsVctLong8
        __init__(mtsVctLong8 self, mtsGenericObjectProxy< vctLong8 >::value_type const & data) -> mtsVctLong8
        """
        _cisstMultiTaskPython.mtsVctLong8_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong8

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong8 self) -> mtsGenericObjectProxy< vctLong8 >::value_type
        GetData(mtsVctLong8 self) -> mtsGenericObjectProxy< vctLong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong8 self) -> vctLong8"""
        return _cisstMultiTaskPython.mtsVctLong8_GetDataCopy(self)

# Register mtsVctLong8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong8_swigregister(mtsVctLong8)

def mtsVctLong8_ClassServices():
    r"""mtsVctLong8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong8_ClassServices()

class mtsVctLong9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLong9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong9Base self) -> mtsGenericObjectProxyBase< vctLong9 >::value_type
        GetData(mtsVctLong9Base self) -> mtsGenericObjectProxyBase< vctLong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLong9Base self, mtsVctLong9Base other)"""
        return _cisstMultiTaskPython.mtsVctLong9Base_Assign(self, other)

# Register mtsVctLong9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong9Base_swigregister(mtsVctLong9Base)

def mtsVctLong9Base_ClassServices():
    r"""mtsVctLong9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong9Base_ClassServices()

class mtsVctLong9(mtsVctLong9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLong9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLong9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLong9_Data_get, _cisstMultiTaskPython.mtsVctLong9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLong9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLong9 self) -> mtsVctLong9
        __init__(mtsVctLong9 self, mtsVctLong9 other) -> mtsVctLong9
        __init__(mtsVctLong9 self, mtsGenericObjectProxy< vctLong9 >::value_type const & data) -> mtsVctLong9
        """
        _cisstMultiTaskPython.mtsVctLong9_swiginit(self, _cisstMultiTaskPython.new_mtsVctLong9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong9

    def GetData(self, *args):
        r"""
        GetData(mtsVctLong9 self) -> mtsGenericObjectProxy< vctLong9 >::value_type
        GetData(mtsVctLong9 self) -> mtsGenericObjectProxy< vctLong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLong9 self) -> vctLong9"""
        return _cisstMultiTaskPython.mtsVctLong9_GetDataCopy(self)

# Register mtsVctLong9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLong9_swigregister(mtsVctLong9)

def mtsVctLong9_ClassServices():
    r"""mtsVctLong9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLong9_ClassServices()

class mtsVctULong1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong1Base self) -> mtsGenericObjectProxyBase< vctULong1 >::value_type
        GetData(mtsVctULong1Base self) -> mtsGenericObjectProxyBase< vctULong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong1Base self, mtsVctULong1Base other)"""
        return _cisstMultiTaskPython.mtsVctULong1Base_Assign(self, other)

# Register mtsVctULong1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong1Base_swigregister(mtsVctULong1Base)

def mtsVctULong1Base_ClassServices():
    r"""mtsVctULong1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong1Base_ClassServices()

class mtsVctULong1(mtsVctULong1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong1_Data_get, _cisstMultiTaskPython.mtsVctULong1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong1 self) -> mtsVctULong1
        __init__(mtsVctULong1 self, mtsVctULong1 other) -> mtsVctULong1
        __init__(mtsVctULong1 self, mtsGenericObjectProxy< vctULong1 >::value_type const & data) -> mtsVctULong1
        """
        _cisstMultiTaskPython.mtsVctULong1_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong1

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong1 self) -> mtsGenericObjectProxy< vctULong1 >::value_type
        GetData(mtsVctULong1 self) -> mtsGenericObjectProxy< vctULong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong1 self) -> vctULong1"""
        return _cisstMultiTaskPython.mtsVctULong1_GetDataCopy(self)

# Register mtsVctULong1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong1_swigregister(mtsVctULong1)

def mtsVctULong1_ClassServices():
    r"""mtsVctULong1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong1_ClassServices()

class mtsVctULong2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong2Base self) -> mtsGenericObjectProxyBase< vctULong2 >::value_type
        GetData(mtsVctULong2Base self) -> mtsGenericObjectProxyBase< vctULong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong2Base self, mtsVctULong2Base other)"""
        return _cisstMultiTaskPython.mtsVctULong2Base_Assign(self, other)

# Register mtsVctULong2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong2Base_swigregister(mtsVctULong2Base)

def mtsVctULong2Base_ClassServices():
    r"""mtsVctULong2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong2Base_ClassServices()

class mtsVctULong2(mtsVctULong2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong2_Data_get, _cisstMultiTaskPython.mtsVctULong2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong2 self) -> mtsVctULong2
        __init__(mtsVctULong2 self, mtsVctULong2 other) -> mtsVctULong2
        __init__(mtsVctULong2 self, mtsGenericObjectProxy< vctULong2 >::value_type const & data) -> mtsVctULong2
        """
        _cisstMultiTaskPython.mtsVctULong2_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong2

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong2 self) -> mtsGenericObjectProxy< vctULong2 >::value_type
        GetData(mtsVctULong2 self) -> mtsGenericObjectProxy< vctULong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong2 self) -> vctULong2"""
        return _cisstMultiTaskPython.mtsVctULong2_GetDataCopy(self)

# Register mtsVctULong2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong2_swigregister(mtsVctULong2)

def mtsVctULong2_ClassServices():
    r"""mtsVctULong2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong2_ClassServices()

class mtsVctULong3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong3Base self) -> mtsGenericObjectProxyBase< vctULong3 >::value_type
        GetData(mtsVctULong3Base self) -> mtsGenericObjectProxyBase< vctULong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong3Base self, mtsVctULong3Base other)"""
        return _cisstMultiTaskPython.mtsVctULong3Base_Assign(self, other)

# Register mtsVctULong3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong3Base_swigregister(mtsVctULong3Base)

def mtsVctULong3Base_ClassServices():
    r"""mtsVctULong3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong3Base_ClassServices()

class mtsVctULong3(mtsVctULong3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong3_Data_get, _cisstMultiTaskPython.mtsVctULong3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong3 self) -> mtsVctULong3
        __init__(mtsVctULong3 self, mtsVctULong3 other) -> mtsVctULong3
        __init__(mtsVctULong3 self, mtsGenericObjectProxy< vctULong3 >::value_type const & data) -> mtsVctULong3
        """
        _cisstMultiTaskPython.mtsVctULong3_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong3

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong3 self) -> mtsGenericObjectProxy< vctULong3 >::value_type
        GetData(mtsVctULong3 self) -> mtsGenericObjectProxy< vctULong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong3 self) -> vctULong3"""
        return _cisstMultiTaskPython.mtsVctULong3_GetDataCopy(self)

# Register mtsVctULong3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong3_swigregister(mtsVctULong3)

def mtsVctULong3_ClassServices():
    r"""mtsVctULong3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong3_ClassServices()

class mtsVctULong4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong4Base self) -> mtsGenericObjectProxyBase< vctULong4 >::value_type
        GetData(mtsVctULong4Base self) -> mtsGenericObjectProxyBase< vctULong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong4Base self, mtsVctULong4Base other)"""
        return _cisstMultiTaskPython.mtsVctULong4Base_Assign(self, other)

# Register mtsVctULong4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong4Base_swigregister(mtsVctULong4Base)

def mtsVctULong4Base_ClassServices():
    r"""mtsVctULong4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong4Base_ClassServices()

class mtsVctULong4(mtsVctULong4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong4_Data_get, _cisstMultiTaskPython.mtsVctULong4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong4 self) -> mtsVctULong4
        __init__(mtsVctULong4 self, mtsVctULong4 other) -> mtsVctULong4
        __init__(mtsVctULong4 self, mtsGenericObjectProxy< vctULong4 >::value_type const & data) -> mtsVctULong4
        """
        _cisstMultiTaskPython.mtsVctULong4_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong4

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong4 self) -> mtsGenericObjectProxy< vctULong4 >::value_type
        GetData(mtsVctULong4 self) -> mtsGenericObjectProxy< vctULong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong4 self) -> vctULong4"""
        return _cisstMultiTaskPython.mtsVctULong4_GetDataCopy(self)

# Register mtsVctULong4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong4_swigregister(mtsVctULong4)

def mtsVctULong4_ClassServices():
    r"""mtsVctULong4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong4_ClassServices()

class mtsVctULong5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong5Base self) -> mtsGenericObjectProxyBase< vctULong5 >::value_type
        GetData(mtsVctULong5Base self) -> mtsGenericObjectProxyBase< vctULong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong5Base self, mtsVctULong5Base other)"""
        return _cisstMultiTaskPython.mtsVctULong5Base_Assign(self, other)

# Register mtsVctULong5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong5Base_swigregister(mtsVctULong5Base)

def mtsVctULong5Base_ClassServices():
    r"""mtsVctULong5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong5Base_ClassServices()

class mtsVctULong5(mtsVctULong5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong5_Data_get, _cisstMultiTaskPython.mtsVctULong5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong5 self) -> mtsVctULong5
        __init__(mtsVctULong5 self, mtsVctULong5 other) -> mtsVctULong5
        __init__(mtsVctULong5 self, mtsGenericObjectProxy< vctULong5 >::value_type const & data) -> mtsVctULong5
        """
        _cisstMultiTaskPython.mtsVctULong5_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong5

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong5 self) -> mtsGenericObjectProxy< vctULong5 >::value_type
        GetData(mtsVctULong5 self) -> mtsGenericObjectProxy< vctULong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong5 self) -> vctULong5"""
        return _cisstMultiTaskPython.mtsVctULong5_GetDataCopy(self)

# Register mtsVctULong5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong5_swigregister(mtsVctULong5)

def mtsVctULong5_ClassServices():
    r"""mtsVctULong5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong5_ClassServices()

class mtsVctULong6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong6Base self) -> mtsGenericObjectProxyBase< vctULong6 >::value_type
        GetData(mtsVctULong6Base self) -> mtsGenericObjectProxyBase< vctULong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong6Base self, mtsVctULong6Base other)"""
        return _cisstMultiTaskPython.mtsVctULong6Base_Assign(self, other)

# Register mtsVctULong6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong6Base_swigregister(mtsVctULong6Base)

def mtsVctULong6Base_ClassServices():
    r"""mtsVctULong6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong6Base_ClassServices()

class mtsVctULong6(mtsVctULong6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong6_Data_get, _cisstMultiTaskPython.mtsVctULong6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong6 self) -> mtsVctULong6
        __init__(mtsVctULong6 self, mtsVctULong6 other) -> mtsVctULong6
        __init__(mtsVctULong6 self, mtsGenericObjectProxy< vctULong6 >::value_type const & data) -> mtsVctULong6
        """
        _cisstMultiTaskPython.mtsVctULong6_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong6

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong6 self) -> mtsGenericObjectProxy< vctULong6 >::value_type
        GetData(mtsVctULong6 self) -> mtsGenericObjectProxy< vctULong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong6 self) -> vctULong6"""
        return _cisstMultiTaskPython.mtsVctULong6_GetDataCopy(self)

# Register mtsVctULong6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong6_swigregister(mtsVctULong6)

def mtsVctULong6_ClassServices():
    r"""mtsVctULong6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong6_ClassServices()

class mtsVctULong7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong7Base self) -> mtsGenericObjectProxyBase< vctULong7 >::value_type
        GetData(mtsVctULong7Base self) -> mtsGenericObjectProxyBase< vctULong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong7Base self, mtsVctULong7Base other)"""
        return _cisstMultiTaskPython.mtsVctULong7Base_Assign(self, other)

# Register mtsVctULong7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong7Base_swigregister(mtsVctULong7Base)

def mtsVctULong7Base_ClassServices():
    r"""mtsVctULong7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong7Base_ClassServices()

class mtsVctULong7(mtsVctULong7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong7_Data_get, _cisstMultiTaskPython.mtsVctULong7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong7 self) -> mtsVctULong7
        __init__(mtsVctULong7 self, mtsVctULong7 other) -> mtsVctULong7
        __init__(mtsVctULong7 self, mtsGenericObjectProxy< vctULong7 >::value_type const & data) -> mtsVctULong7
        """
        _cisstMultiTaskPython.mtsVctULong7_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong7

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong7 self) -> mtsGenericObjectProxy< vctULong7 >::value_type
        GetData(mtsVctULong7 self) -> mtsGenericObjectProxy< vctULong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong7 self) -> vctULong7"""
        return _cisstMultiTaskPython.mtsVctULong7_GetDataCopy(self)

# Register mtsVctULong7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong7_swigregister(mtsVctULong7)

def mtsVctULong7_ClassServices():
    r"""mtsVctULong7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong7_ClassServices()

class mtsVctULong8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong8Base self) -> mtsGenericObjectProxyBase< vctULong8 >::value_type
        GetData(mtsVctULong8Base self) -> mtsGenericObjectProxyBase< vctULong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong8Base self, mtsVctULong8Base other)"""
        return _cisstMultiTaskPython.mtsVctULong8Base_Assign(self, other)

# Register mtsVctULong8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong8Base_swigregister(mtsVctULong8Base)

def mtsVctULong8Base_ClassServices():
    r"""mtsVctULong8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong8Base_ClassServices()

class mtsVctULong8(mtsVctULong8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong8_Data_get, _cisstMultiTaskPython.mtsVctULong8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong8 self) -> mtsVctULong8
        __init__(mtsVctULong8 self, mtsVctULong8 other) -> mtsVctULong8
        __init__(mtsVctULong8 self, mtsGenericObjectProxy< vctULong8 >::value_type const & data) -> mtsVctULong8
        """
        _cisstMultiTaskPython.mtsVctULong8_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong8

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong8 self) -> mtsGenericObjectProxy< vctULong8 >::value_type
        GetData(mtsVctULong8 self) -> mtsGenericObjectProxy< vctULong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong8 self) -> vctULong8"""
        return _cisstMultiTaskPython.mtsVctULong8_GetDataCopy(self)

# Register mtsVctULong8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong8_swigregister(mtsVctULong8)

def mtsVctULong8_ClassServices():
    r"""mtsVctULong8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong8_ClassServices()

class mtsVctULong9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULong9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong9Base self) -> mtsGenericObjectProxyBase< vctULong9 >::value_type
        GetData(mtsVctULong9Base self) -> mtsGenericObjectProxyBase< vctULong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULong9Base self, mtsVctULong9Base other)"""
        return _cisstMultiTaskPython.mtsVctULong9Base_Assign(self, other)

# Register mtsVctULong9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong9Base_swigregister(mtsVctULong9Base)

def mtsVctULong9Base_ClassServices():
    r"""mtsVctULong9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong9Base_ClassServices()

class mtsVctULong9(mtsVctULong9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULong9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULong9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULong9_Data_get, _cisstMultiTaskPython.mtsVctULong9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULong9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULong9 self) -> mtsVctULong9
        __init__(mtsVctULong9 self, mtsVctULong9 other) -> mtsVctULong9
        __init__(mtsVctULong9 self, mtsGenericObjectProxy< vctULong9 >::value_type const & data) -> mtsVctULong9
        """
        _cisstMultiTaskPython.mtsVctULong9_swiginit(self, _cisstMultiTaskPython.new_mtsVctULong9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong9

    def GetData(self, *args):
        r"""
        GetData(mtsVctULong9 self) -> mtsGenericObjectProxy< vctULong9 >::value_type
        GetData(mtsVctULong9 self) -> mtsGenericObjectProxy< vctULong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULong9 self) -> vctULong9"""
        return _cisstMultiTaskPython.mtsVctULong9_GetDataCopy(self)

# Register mtsVctULong9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULong9_swigregister(mtsVctULong9)

def mtsVctULong9_ClassServices():
    r"""mtsVctULong9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULong9_ClassServices()

class mtsVctInt1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt1Base self) -> mtsGenericObjectProxyBase< vctInt1 >::value_type
        GetData(mtsVctInt1Base self) -> mtsGenericObjectProxyBase< vctInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt1Base self, mtsVctInt1Base other)"""
        return _cisstMultiTaskPython.mtsVctInt1Base_Assign(self, other)

# Register mtsVctInt1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt1Base_swigregister(mtsVctInt1Base)

def mtsVctInt1Base_ClassServices():
    r"""mtsVctInt1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt1Base_ClassServices()

class mtsVctInt1(mtsVctInt1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt1_Data_get, _cisstMultiTaskPython.mtsVctInt1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt1 self) -> mtsVctInt1
        __init__(mtsVctInt1 self, mtsVctInt1 other) -> mtsVctInt1
        __init__(mtsVctInt1 self, mtsGenericObjectProxy< vctInt1 >::value_type const & data) -> mtsVctInt1
        """
        _cisstMultiTaskPython.mtsVctInt1_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt1

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt1 self) -> mtsGenericObjectProxy< vctInt1 >::value_type
        GetData(mtsVctInt1 self) -> mtsGenericObjectProxy< vctInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt1 self) -> vctInt1"""
        return _cisstMultiTaskPython.mtsVctInt1_GetDataCopy(self)

# Register mtsVctInt1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt1_swigregister(mtsVctInt1)

def mtsVctInt1_ClassServices():
    r"""mtsVctInt1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt1_ClassServices()

class mtsVctInt2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt2Base self) -> mtsGenericObjectProxyBase< vctInt2 >::value_type
        GetData(mtsVctInt2Base self) -> mtsGenericObjectProxyBase< vctInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt2Base self, mtsVctInt2Base other)"""
        return _cisstMultiTaskPython.mtsVctInt2Base_Assign(self, other)

# Register mtsVctInt2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt2Base_swigregister(mtsVctInt2Base)

def mtsVctInt2Base_ClassServices():
    r"""mtsVctInt2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt2Base_ClassServices()

class mtsVctInt2(mtsVctInt2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt2_Data_get, _cisstMultiTaskPython.mtsVctInt2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt2 self) -> mtsVctInt2
        __init__(mtsVctInt2 self, mtsVctInt2 other) -> mtsVctInt2
        __init__(mtsVctInt2 self, mtsGenericObjectProxy< vctInt2 >::value_type const & data) -> mtsVctInt2
        """
        _cisstMultiTaskPython.mtsVctInt2_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt2

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt2 self) -> mtsGenericObjectProxy< vctInt2 >::value_type
        GetData(mtsVctInt2 self) -> mtsGenericObjectProxy< vctInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt2 self) -> vctInt2"""
        return _cisstMultiTaskPython.mtsVctInt2_GetDataCopy(self)

# Register mtsVctInt2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt2_swigregister(mtsVctInt2)

def mtsVctInt2_ClassServices():
    r"""mtsVctInt2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt2_ClassServices()

class mtsVctInt3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt3Base self) -> mtsGenericObjectProxyBase< vctInt3 >::value_type
        GetData(mtsVctInt3Base self) -> mtsGenericObjectProxyBase< vctInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt3Base self, mtsVctInt3Base other)"""
        return _cisstMultiTaskPython.mtsVctInt3Base_Assign(self, other)

# Register mtsVctInt3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt3Base_swigregister(mtsVctInt3Base)

def mtsVctInt3Base_ClassServices():
    r"""mtsVctInt3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt3Base_ClassServices()

class mtsVctInt3(mtsVctInt3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt3_Data_get, _cisstMultiTaskPython.mtsVctInt3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt3 self) -> mtsVctInt3
        __init__(mtsVctInt3 self, mtsVctInt3 other) -> mtsVctInt3
        __init__(mtsVctInt3 self, mtsGenericObjectProxy< vctInt3 >::value_type const & data) -> mtsVctInt3
        """
        _cisstMultiTaskPython.mtsVctInt3_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt3

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt3 self) -> mtsGenericObjectProxy< vctInt3 >::value_type
        GetData(mtsVctInt3 self) -> mtsGenericObjectProxy< vctInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt3 self) -> vctInt3"""
        return _cisstMultiTaskPython.mtsVctInt3_GetDataCopy(self)

# Register mtsVctInt3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt3_swigregister(mtsVctInt3)

def mtsVctInt3_ClassServices():
    r"""mtsVctInt3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt3_ClassServices()

class mtsVctInt4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt4Base self) -> mtsGenericObjectProxyBase< vctInt4 >::value_type
        GetData(mtsVctInt4Base self) -> mtsGenericObjectProxyBase< vctInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt4Base self, mtsVctInt4Base other)"""
        return _cisstMultiTaskPython.mtsVctInt4Base_Assign(self, other)

# Register mtsVctInt4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt4Base_swigregister(mtsVctInt4Base)

def mtsVctInt4Base_ClassServices():
    r"""mtsVctInt4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt4Base_ClassServices()

class mtsVctInt4(mtsVctInt4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt4_Data_get, _cisstMultiTaskPython.mtsVctInt4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt4 self) -> mtsVctInt4
        __init__(mtsVctInt4 self, mtsVctInt4 other) -> mtsVctInt4
        __init__(mtsVctInt4 self, mtsGenericObjectProxy< vctInt4 >::value_type const & data) -> mtsVctInt4
        """
        _cisstMultiTaskPython.mtsVctInt4_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt4

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt4 self) -> mtsGenericObjectProxy< vctInt4 >::value_type
        GetData(mtsVctInt4 self) -> mtsGenericObjectProxy< vctInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt4 self) -> vctInt4"""
        return _cisstMultiTaskPython.mtsVctInt4_GetDataCopy(self)

# Register mtsVctInt4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt4_swigregister(mtsVctInt4)

def mtsVctInt4_ClassServices():
    r"""mtsVctInt4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt4_ClassServices()

class mtsVctInt5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt5Base self) -> mtsGenericObjectProxyBase< vctInt5 >::value_type
        GetData(mtsVctInt5Base self) -> mtsGenericObjectProxyBase< vctInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt5Base self, mtsVctInt5Base other)"""
        return _cisstMultiTaskPython.mtsVctInt5Base_Assign(self, other)

# Register mtsVctInt5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt5Base_swigregister(mtsVctInt5Base)

def mtsVctInt5Base_ClassServices():
    r"""mtsVctInt5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt5Base_ClassServices()

class mtsVctInt5(mtsVctInt5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt5_Data_get, _cisstMultiTaskPython.mtsVctInt5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt5 self) -> mtsVctInt5
        __init__(mtsVctInt5 self, mtsVctInt5 other) -> mtsVctInt5
        __init__(mtsVctInt5 self, mtsGenericObjectProxy< vctInt5 >::value_type const & data) -> mtsVctInt5
        """
        _cisstMultiTaskPython.mtsVctInt5_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt5

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt5 self) -> mtsGenericObjectProxy< vctInt5 >::value_type
        GetData(mtsVctInt5 self) -> mtsGenericObjectProxy< vctInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt5 self) -> vctInt5"""
        return _cisstMultiTaskPython.mtsVctInt5_GetDataCopy(self)

# Register mtsVctInt5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt5_swigregister(mtsVctInt5)

def mtsVctInt5_ClassServices():
    r"""mtsVctInt5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt5_ClassServices()

class mtsVctInt6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt6Base self) -> mtsGenericObjectProxyBase< vctInt6 >::value_type
        GetData(mtsVctInt6Base self) -> mtsGenericObjectProxyBase< vctInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt6Base self, mtsVctInt6Base other)"""
        return _cisstMultiTaskPython.mtsVctInt6Base_Assign(self, other)

# Register mtsVctInt6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt6Base_swigregister(mtsVctInt6Base)

def mtsVctInt6Base_ClassServices():
    r"""mtsVctInt6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt6Base_ClassServices()

class mtsVctInt6(mtsVctInt6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt6_Data_get, _cisstMultiTaskPython.mtsVctInt6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt6 self) -> mtsVctInt6
        __init__(mtsVctInt6 self, mtsVctInt6 other) -> mtsVctInt6
        __init__(mtsVctInt6 self, mtsGenericObjectProxy< vctInt6 >::value_type const & data) -> mtsVctInt6
        """
        _cisstMultiTaskPython.mtsVctInt6_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt6

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt6 self) -> mtsGenericObjectProxy< vctInt6 >::value_type
        GetData(mtsVctInt6 self) -> mtsGenericObjectProxy< vctInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt6 self) -> vctInt6"""
        return _cisstMultiTaskPython.mtsVctInt6_GetDataCopy(self)

# Register mtsVctInt6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt6_swigregister(mtsVctInt6)

def mtsVctInt6_ClassServices():
    r"""mtsVctInt6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt6_ClassServices()

class mtsVctInt7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt7Base self) -> mtsGenericObjectProxyBase< vctInt7 >::value_type
        GetData(mtsVctInt7Base self) -> mtsGenericObjectProxyBase< vctInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt7Base self, mtsVctInt7Base other)"""
        return _cisstMultiTaskPython.mtsVctInt7Base_Assign(self, other)

# Register mtsVctInt7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt7Base_swigregister(mtsVctInt7Base)

def mtsVctInt7Base_ClassServices():
    r"""mtsVctInt7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt7Base_ClassServices()

class mtsVctInt7(mtsVctInt7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt7_Data_get, _cisstMultiTaskPython.mtsVctInt7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt7 self) -> mtsVctInt7
        __init__(mtsVctInt7 self, mtsVctInt7 other) -> mtsVctInt7
        __init__(mtsVctInt7 self, mtsGenericObjectProxy< vctInt7 >::value_type const & data) -> mtsVctInt7
        """
        _cisstMultiTaskPython.mtsVctInt7_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt7

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt7 self) -> mtsGenericObjectProxy< vctInt7 >::value_type
        GetData(mtsVctInt7 self) -> mtsGenericObjectProxy< vctInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt7 self) -> vctInt7"""
        return _cisstMultiTaskPython.mtsVctInt7_GetDataCopy(self)

# Register mtsVctInt7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt7_swigregister(mtsVctInt7)

def mtsVctInt7_ClassServices():
    r"""mtsVctInt7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt7_ClassServices()

class mtsVctInt8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt8Base self) -> mtsGenericObjectProxyBase< vctInt8 >::value_type
        GetData(mtsVctInt8Base self) -> mtsGenericObjectProxyBase< vctInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt8Base self, mtsVctInt8Base other)"""
        return _cisstMultiTaskPython.mtsVctInt8Base_Assign(self, other)

# Register mtsVctInt8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt8Base_swigregister(mtsVctInt8Base)

def mtsVctInt8Base_ClassServices():
    r"""mtsVctInt8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt8Base_ClassServices()

class mtsVctInt8(mtsVctInt8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt8_Data_get, _cisstMultiTaskPython.mtsVctInt8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt8 self) -> mtsVctInt8
        __init__(mtsVctInt8 self, mtsVctInt8 other) -> mtsVctInt8
        __init__(mtsVctInt8 self, mtsGenericObjectProxy< vctInt8 >::value_type const & data) -> mtsVctInt8
        """
        _cisstMultiTaskPython.mtsVctInt8_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt8

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt8 self) -> mtsGenericObjectProxy< vctInt8 >::value_type
        GetData(mtsVctInt8 self) -> mtsGenericObjectProxy< vctInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt8 self) -> vctInt8"""
        return _cisstMultiTaskPython.mtsVctInt8_GetDataCopy(self)

# Register mtsVctInt8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt8_swigregister(mtsVctInt8)

def mtsVctInt8_ClassServices():
    r"""mtsVctInt8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt8_ClassServices()

class mtsVctInt9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctInt9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt9Base self) -> mtsGenericObjectProxyBase< vctInt9 >::value_type
        GetData(mtsVctInt9Base self) -> mtsGenericObjectProxyBase< vctInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctInt9Base self, mtsVctInt9Base other)"""
        return _cisstMultiTaskPython.mtsVctInt9Base_Assign(self, other)

# Register mtsVctInt9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt9Base_swigregister(mtsVctInt9Base)

def mtsVctInt9Base_ClassServices():
    r"""mtsVctInt9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt9Base_ClassServices()

class mtsVctInt9(mtsVctInt9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctInt9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctInt9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctInt9_Data_get, _cisstMultiTaskPython.mtsVctInt9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctInt9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctInt9 self) -> mtsVctInt9
        __init__(mtsVctInt9 self, mtsVctInt9 other) -> mtsVctInt9
        __init__(mtsVctInt9 self, mtsGenericObjectProxy< vctInt9 >::value_type const & data) -> mtsVctInt9
        """
        _cisstMultiTaskPython.mtsVctInt9_swiginit(self, _cisstMultiTaskPython.new_mtsVctInt9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt9

    def GetData(self, *args):
        r"""
        GetData(mtsVctInt9 self) -> mtsGenericObjectProxy< vctInt9 >::value_type
        GetData(mtsVctInt9 self) -> mtsGenericObjectProxy< vctInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctInt9 self) -> vctInt9"""
        return _cisstMultiTaskPython.mtsVctInt9_GetDataCopy(self)

# Register mtsVctInt9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctInt9_swigregister(mtsVctInt9)

def mtsVctInt9_ClassServices():
    r"""mtsVctInt9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctInt9_ClassServices()

class mtsVctUInt1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt1Base self) -> mtsGenericObjectProxyBase< vctUInt1 >::value_type
        GetData(mtsVctUInt1Base self) -> mtsGenericObjectProxyBase< vctUInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt1Base self, mtsVctUInt1Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt1Base_Assign(self, other)

# Register mtsVctUInt1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt1Base_swigregister(mtsVctUInt1Base)

def mtsVctUInt1Base_ClassServices():
    r"""mtsVctUInt1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt1Base_ClassServices()

class mtsVctUInt1(mtsVctUInt1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt1_Data_get, _cisstMultiTaskPython.mtsVctUInt1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt1 self) -> mtsVctUInt1
        __init__(mtsVctUInt1 self, mtsVctUInt1 other) -> mtsVctUInt1
        __init__(mtsVctUInt1 self, mtsGenericObjectProxy< vctUInt1 >::value_type const & data) -> mtsVctUInt1
        """
        _cisstMultiTaskPython.mtsVctUInt1_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt1

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt1 self) -> mtsGenericObjectProxy< vctUInt1 >::value_type
        GetData(mtsVctUInt1 self) -> mtsGenericObjectProxy< vctUInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt1 self) -> vctUInt1"""
        return _cisstMultiTaskPython.mtsVctUInt1_GetDataCopy(self)

# Register mtsVctUInt1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt1_swigregister(mtsVctUInt1)

def mtsVctUInt1_ClassServices():
    r"""mtsVctUInt1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt1_ClassServices()

class mtsVctUInt2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt2Base self) -> mtsGenericObjectProxyBase< vctUInt2 >::value_type
        GetData(mtsVctUInt2Base self) -> mtsGenericObjectProxyBase< vctUInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt2Base self, mtsVctUInt2Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt2Base_Assign(self, other)

# Register mtsVctUInt2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt2Base_swigregister(mtsVctUInt2Base)

def mtsVctUInt2Base_ClassServices():
    r"""mtsVctUInt2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt2Base_ClassServices()

class mtsVctUInt2(mtsVctUInt2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt2_Data_get, _cisstMultiTaskPython.mtsVctUInt2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt2 self) -> mtsVctUInt2
        __init__(mtsVctUInt2 self, mtsVctUInt2 other) -> mtsVctUInt2
        __init__(mtsVctUInt2 self, mtsGenericObjectProxy< vctUInt2 >::value_type const & data) -> mtsVctUInt2
        """
        _cisstMultiTaskPython.mtsVctUInt2_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt2

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt2 self) -> mtsGenericObjectProxy< vctUInt2 >::value_type
        GetData(mtsVctUInt2 self) -> mtsGenericObjectProxy< vctUInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt2 self) -> vctUInt2"""
        return _cisstMultiTaskPython.mtsVctUInt2_GetDataCopy(self)

# Register mtsVctUInt2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt2_swigregister(mtsVctUInt2)

def mtsVctUInt2_ClassServices():
    r"""mtsVctUInt2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt2_ClassServices()

class mtsVctUInt3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt3Base self) -> mtsGenericObjectProxyBase< vctUInt3 >::value_type
        GetData(mtsVctUInt3Base self) -> mtsGenericObjectProxyBase< vctUInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt3Base self, mtsVctUInt3Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt3Base_Assign(self, other)

# Register mtsVctUInt3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt3Base_swigregister(mtsVctUInt3Base)

def mtsVctUInt3Base_ClassServices():
    r"""mtsVctUInt3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt3Base_ClassServices()

class mtsVctUInt3(mtsVctUInt3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt3_Data_get, _cisstMultiTaskPython.mtsVctUInt3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt3 self) -> mtsVctUInt3
        __init__(mtsVctUInt3 self, mtsVctUInt3 other) -> mtsVctUInt3
        __init__(mtsVctUInt3 self, mtsGenericObjectProxy< vctUInt3 >::value_type const & data) -> mtsVctUInt3
        """
        _cisstMultiTaskPython.mtsVctUInt3_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt3

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt3 self) -> mtsGenericObjectProxy< vctUInt3 >::value_type
        GetData(mtsVctUInt3 self) -> mtsGenericObjectProxy< vctUInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt3 self) -> vctUInt3"""
        return _cisstMultiTaskPython.mtsVctUInt3_GetDataCopy(self)

# Register mtsVctUInt3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt3_swigregister(mtsVctUInt3)

def mtsVctUInt3_ClassServices():
    r"""mtsVctUInt3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt3_ClassServices()

class mtsVctUInt4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt4Base self) -> mtsGenericObjectProxyBase< vctUInt4 >::value_type
        GetData(mtsVctUInt4Base self) -> mtsGenericObjectProxyBase< vctUInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt4Base self, mtsVctUInt4Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt4Base_Assign(self, other)

# Register mtsVctUInt4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt4Base_swigregister(mtsVctUInt4Base)

def mtsVctUInt4Base_ClassServices():
    r"""mtsVctUInt4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt4Base_ClassServices()

class mtsVctUInt4(mtsVctUInt4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt4_Data_get, _cisstMultiTaskPython.mtsVctUInt4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt4 self) -> mtsVctUInt4
        __init__(mtsVctUInt4 self, mtsVctUInt4 other) -> mtsVctUInt4
        __init__(mtsVctUInt4 self, mtsGenericObjectProxy< vctUInt4 >::value_type const & data) -> mtsVctUInt4
        """
        _cisstMultiTaskPython.mtsVctUInt4_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt4

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt4 self) -> mtsGenericObjectProxy< vctUInt4 >::value_type
        GetData(mtsVctUInt4 self) -> mtsGenericObjectProxy< vctUInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt4 self) -> vctUInt4"""
        return _cisstMultiTaskPython.mtsVctUInt4_GetDataCopy(self)

# Register mtsVctUInt4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt4_swigregister(mtsVctUInt4)

def mtsVctUInt4_ClassServices():
    r"""mtsVctUInt4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt4_ClassServices()

class mtsVctUInt5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt5Base self) -> mtsGenericObjectProxyBase< vctUInt5 >::value_type
        GetData(mtsVctUInt5Base self) -> mtsGenericObjectProxyBase< vctUInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt5Base self, mtsVctUInt5Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt5Base_Assign(self, other)

# Register mtsVctUInt5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt5Base_swigregister(mtsVctUInt5Base)

def mtsVctUInt5Base_ClassServices():
    r"""mtsVctUInt5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt5Base_ClassServices()

class mtsVctUInt5(mtsVctUInt5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt5_Data_get, _cisstMultiTaskPython.mtsVctUInt5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt5 self) -> mtsVctUInt5
        __init__(mtsVctUInt5 self, mtsVctUInt5 other) -> mtsVctUInt5
        __init__(mtsVctUInt5 self, mtsGenericObjectProxy< vctUInt5 >::value_type const & data) -> mtsVctUInt5
        """
        _cisstMultiTaskPython.mtsVctUInt5_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt5

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt5 self) -> mtsGenericObjectProxy< vctUInt5 >::value_type
        GetData(mtsVctUInt5 self) -> mtsGenericObjectProxy< vctUInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt5 self) -> vctUInt5"""
        return _cisstMultiTaskPython.mtsVctUInt5_GetDataCopy(self)

# Register mtsVctUInt5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt5_swigregister(mtsVctUInt5)

def mtsVctUInt5_ClassServices():
    r"""mtsVctUInt5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt5_ClassServices()

class mtsVctUInt6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt6Base self) -> mtsGenericObjectProxyBase< vctUInt6 >::value_type
        GetData(mtsVctUInt6Base self) -> mtsGenericObjectProxyBase< vctUInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt6Base self, mtsVctUInt6Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt6Base_Assign(self, other)

# Register mtsVctUInt6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt6Base_swigregister(mtsVctUInt6Base)

def mtsVctUInt6Base_ClassServices():
    r"""mtsVctUInt6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt6Base_ClassServices()

class mtsVctUInt6(mtsVctUInt6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt6_Data_get, _cisstMultiTaskPython.mtsVctUInt6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt6 self) -> mtsVctUInt6
        __init__(mtsVctUInt6 self, mtsVctUInt6 other) -> mtsVctUInt6
        __init__(mtsVctUInt6 self, mtsGenericObjectProxy< vctUInt6 >::value_type const & data) -> mtsVctUInt6
        """
        _cisstMultiTaskPython.mtsVctUInt6_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt6

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt6 self) -> mtsGenericObjectProxy< vctUInt6 >::value_type
        GetData(mtsVctUInt6 self) -> mtsGenericObjectProxy< vctUInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt6 self) -> vctUInt6"""
        return _cisstMultiTaskPython.mtsVctUInt6_GetDataCopy(self)

# Register mtsVctUInt6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt6_swigregister(mtsVctUInt6)

def mtsVctUInt6_ClassServices():
    r"""mtsVctUInt6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt6_ClassServices()

class mtsVctUInt7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt7Base self) -> mtsGenericObjectProxyBase< vctUInt7 >::value_type
        GetData(mtsVctUInt7Base self) -> mtsGenericObjectProxyBase< vctUInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt7Base self, mtsVctUInt7Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt7Base_Assign(self, other)

# Register mtsVctUInt7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt7Base_swigregister(mtsVctUInt7Base)

def mtsVctUInt7Base_ClassServices():
    r"""mtsVctUInt7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt7Base_ClassServices()

class mtsVctUInt7(mtsVctUInt7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt7_Data_get, _cisstMultiTaskPython.mtsVctUInt7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt7 self) -> mtsVctUInt7
        __init__(mtsVctUInt7 self, mtsVctUInt7 other) -> mtsVctUInt7
        __init__(mtsVctUInt7 self, mtsGenericObjectProxy< vctUInt7 >::value_type const & data) -> mtsVctUInt7
        """
        _cisstMultiTaskPython.mtsVctUInt7_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt7

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt7 self) -> mtsGenericObjectProxy< vctUInt7 >::value_type
        GetData(mtsVctUInt7 self) -> mtsGenericObjectProxy< vctUInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt7 self) -> vctUInt7"""
        return _cisstMultiTaskPython.mtsVctUInt7_GetDataCopy(self)

# Register mtsVctUInt7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt7_swigregister(mtsVctUInt7)

def mtsVctUInt7_ClassServices():
    r"""mtsVctUInt7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt7_ClassServices()

class mtsVctUInt8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt8Base self) -> mtsGenericObjectProxyBase< vctUInt8 >::value_type
        GetData(mtsVctUInt8Base self) -> mtsGenericObjectProxyBase< vctUInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt8Base self, mtsVctUInt8Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt8Base_Assign(self, other)

# Register mtsVctUInt8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt8Base_swigregister(mtsVctUInt8Base)

def mtsVctUInt8Base_ClassServices():
    r"""mtsVctUInt8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt8Base_ClassServices()

class mtsVctUInt8(mtsVctUInt8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt8_Data_get, _cisstMultiTaskPython.mtsVctUInt8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt8 self) -> mtsVctUInt8
        __init__(mtsVctUInt8 self, mtsVctUInt8 other) -> mtsVctUInt8
        __init__(mtsVctUInt8 self, mtsGenericObjectProxy< vctUInt8 >::value_type const & data) -> mtsVctUInt8
        """
        _cisstMultiTaskPython.mtsVctUInt8_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt8

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt8 self) -> mtsGenericObjectProxy< vctUInt8 >::value_type
        GetData(mtsVctUInt8 self) -> mtsGenericObjectProxy< vctUInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt8 self) -> vctUInt8"""
        return _cisstMultiTaskPython.mtsVctUInt8_GetDataCopy(self)

# Register mtsVctUInt8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt8_swigregister(mtsVctUInt8)

def mtsVctUInt8_ClassServices():
    r"""mtsVctUInt8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt8_ClassServices()

class mtsVctUInt9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUInt9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt9Base self) -> mtsGenericObjectProxyBase< vctUInt9 >::value_type
        GetData(mtsVctUInt9Base self) -> mtsGenericObjectProxyBase< vctUInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUInt9Base self, mtsVctUInt9Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt9Base_Assign(self, other)

# Register mtsVctUInt9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt9Base_swigregister(mtsVctUInt9Base)

def mtsVctUInt9Base_ClassServices():
    r"""mtsVctUInt9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt9Base_ClassServices()

class mtsVctUInt9(mtsVctUInt9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUInt9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUInt9_Data_get, _cisstMultiTaskPython.mtsVctUInt9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUInt9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUInt9 self) -> mtsVctUInt9
        __init__(mtsVctUInt9 self, mtsVctUInt9 other) -> mtsVctUInt9
        __init__(mtsVctUInt9 self, mtsGenericObjectProxy< vctUInt9 >::value_type const & data) -> mtsVctUInt9
        """
        _cisstMultiTaskPython.mtsVctUInt9_swiginit(self, _cisstMultiTaskPython.new_mtsVctUInt9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt9

    def GetData(self, *args):
        r"""
        GetData(mtsVctUInt9 self) -> mtsGenericObjectProxy< vctUInt9 >::value_type
        GetData(mtsVctUInt9 self) -> mtsGenericObjectProxy< vctUInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUInt9 self) -> vctUInt9"""
        return _cisstMultiTaskPython.mtsVctUInt9_GetDataCopy(self)

# Register mtsVctUInt9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUInt9_swigregister(mtsVctUInt9)

def mtsVctUInt9_ClassServices():
    r"""mtsVctUInt9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUInt9_ClassServices()

class mtsVctShort1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort1Base self) -> mtsGenericObjectProxyBase< vctShort1 >::value_type
        GetData(mtsVctShort1Base self) -> mtsGenericObjectProxyBase< vctShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort1Base self, mtsVctShort1Base other)"""
        return _cisstMultiTaskPython.mtsVctShort1Base_Assign(self, other)

# Register mtsVctShort1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort1Base_swigregister(mtsVctShort1Base)

def mtsVctShort1Base_ClassServices():
    r"""mtsVctShort1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort1Base_ClassServices()

class mtsVctShort1(mtsVctShort1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort1_Data_get, _cisstMultiTaskPython.mtsVctShort1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort1 self) -> mtsVctShort1
        __init__(mtsVctShort1 self, mtsVctShort1 other) -> mtsVctShort1
        __init__(mtsVctShort1 self, mtsGenericObjectProxy< vctShort1 >::value_type const & data) -> mtsVctShort1
        """
        _cisstMultiTaskPython.mtsVctShort1_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort1

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort1 self) -> mtsGenericObjectProxy< vctShort1 >::value_type
        GetData(mtsVctShort1 self) -> mtsGenericObjectProxy< vctShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort1 self) -> vctShort1"""
        return _cisstMultiTaskPython.mtsVctShort1_GetDataCopy(self)

# Register mtsVctShort1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort1_swigregister(mtsVctShort1)

def mtsVctShort1_ClassServices():
    r"""mtsVctShort1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort1_ClassServices()

class mtsVctShort2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort2Base self) -> mtsGenericObjectProxyBase< vctShort2 >::value_type
        GetData(mtsVctShort2Base self) -> mtsGenericObjectProxyBase< vctShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort2Base self, mtsVctShort2Base other)"""
        return _cisstMultiTaskPython.mtsVctShort2Base_Assign(self, other)

# Register mtsVctShort2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort2Base_swigregister(mtsVctShort2Base)

def mtsVctShort2Base_ClassServices():
    r"""mtsVctShort2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort2Base_ClassServices()

class mtsVctShort2(mtsVctShort2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort2_Data_get, _cisstMultiTaskPython.mtsVctShort2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort2 self) -> mtsVctShort2
        __init__(mtsVctShort2 self, mtsVctShort2 other) -> mtsVctShort2
        __init__(mtsVctShort2 self, mtsGenericObjectProxy< vctShort2 >::value_type const & data) -> mtsVctShort2
        """
        _cisstMultiTaskPython.mtsVctShort2_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort2

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort2 self) -> mtsGenericObjectProxy< vctShort2 >::value_type
        GetData(mtsVctShort2 self) -> mtsGenericObjectProxy< vctShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort2 self) -> vctShort2"""
        return _cisstMultiTaskPython.mtsVctShort2_GetDataCopy(self)

# Register mtsVctShort2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort2_swigregister(mtsVctShort2)

def mtsVctShort2_ClassServices():
    r"""mtsVctShort2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort2_ClassServices()

class mtsVctShort3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort3Base self) -> mtsGenericObjectProxyBase< vctShort3 >::value_type
        GetData(mtsVctShort3Base self) -> mtsGenericObjectProxyBase< vctShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort3Base self, mtsVctShort3Base other)"""
        return _cisstMultiTaskPython.mtsVctShort3Base_Assign(self, other)

# Register mtsVctShort3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort3Base_swigregister(mtsVctShort3Base)

def mtsVctShort3Base_ClassServices():
    r"""mtsVctShort3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort3Base_ClassServices()

class mtsVctShort3(mtsVctShort3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort3_Data_get, _cisstMultiTaskPython.mtsVctShort3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort3 self) -> mtsVctShort3
        __init__(mtsVctShort3 self, mtsVctShort3 other) -> mtsVctShort3
        __init__(mtsVctShort3 self, mtsGenericObjectProxy< vctShort3 >::value_type const & data) -> mtsVctShort3
        """
        _cisstMultiTaskPython.mtsVctShort3_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort3

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort3 self) -> mtsGenericObjectProxy< vctShort3 >::value_type
        GetData(mtsVctShort3 self) -> mtsGenericObjectProxy< vctShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort3 self) -> vctShort3"""
        return _cisstMultiTaskPython.mtsVctShort3_GetDataCopy(self)

# Register mtsVctShort3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort3_swigregister(mtsVctShort3)

def mtsVctShort3_ClassServices():
    r"""mtsVctShort3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort3_ClassServices()

class mtsVctShort4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort4Base self) -> mtsGenericObjectProxyBase< vctShort4 >::value_type
        GetData(mtsVctShort4Base self) -> mtsGenericObjectProxyBase< vctShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort4Base self, mtsVctShort4Base other)"""
        return _cisstMultiTaskPython.mtsVctShort4Base_Assign(self, other)

# Register mtsVctShort4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort4Base_swigregister(mtsVctShort4Base)

def mtsVctShort4Base_ClassServices():
    r"""mtsVctShort4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort4Base_ClassServices()

class mtsVctShort4(mtsVctShort4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort4_Data_get, _cisstMultiTaskPython.mtsVctShort4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort4 self) -> mtsVctShort4
        __init__(mtsVctShort4 self, mtsVctShort4 other) -> mtsVctShort4
        __init__(mtsVctShort4 self, mtsGenericObjectProxy< vctShort4 >::value_type const & data) -> mtsVctShort4
        """
        _cisstMultiTaskPython.mtsVctShort4_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort4

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort4 self) -> mtsGenericObjectProxy< vctShort4 >::value_type
        GetData(mtsVctShort4 self) -> mtsGenericObjectProxy< vctShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort4 self) -> vctShort4"""
        return _cisstMultiTaskPython.mtsVctShort4_GetDataCopy(self)

# Register mtsVctShort4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort4_swigregister(mtsVctShort4)

def mtsVctShort4_ClassServices():
    r"""mtsVctShort4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort4_ClassServices()

class mtsVctShort5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort5Base self) -> mtsGenericObjectProxyBase< vctShort5 >::value_type
        GetData(mtsVctShort5Base self) -> mtsGenericObjectProxyBase< vctShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort5Base self, mtsVctShort5Base other)"""
        return _cisstMultiTaskPython.mtsVctShort5Base_Assign(self, other)

# Register mtsVctShort5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort5Base_swigregister(mtsVctShort5Base)

def mtsVctShort5Base_ClassServices():
    r"""mtsVctShort5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort5Base_ClassServices()

class mtsVctShort5(mtsVctShort5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort5_Data_get, _cisstMultiTaskPython.mtsVctShort5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort5 self) -> mtsVctShort5
        __init__(mtsVctShort5 self, mtsVctShort5 other) -> mtsVctShort5
        __init__(mtsVctShort5 self, mtsGenericObjectProxy< vctShort5 >::value_type const & data) -> mtsVctShort5
        """
        _cisstMultiTaskPython.mtsVctShort5_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort5

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort5 self) -> mtsGenericObjectProxy< vctShort5 >::value_type
        GetData(mtsVctShort5 self) -> mtsGenericObjectProxy< vctShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort5 self) -> vctShort5"""
        return _cisstMultiTaskPython.mtsVctShort5_GetDataCopy(self)

# Register mtsVctShort5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort5_swigregister(mtsVctShort5)

def mtsVctShort5_ClassServices():
    r"""mtsVctShort5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort5_ClassServices()

class mtsVctShort6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort6Base self) -> mtsGenericObjectProxyBase< vctShort6 >::value_type
        GetData(mtsVctShort6Base self) -> mtsGenericObjectProxyBase< vctShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort6Base self, mtsVctShort6Base other)"""
        return _cisstMultiTaskPython.mtsVctShort6Base_Assign(self, other)

# Register mtsVctShort6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort6Base_swigregister(mtsVctShort6Base)

def mtsVctShort6Base_ClassServices():
    r"""mtsVctShort6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort6Base_ClassServices()

class mtsVctShort6(mtsVctShort6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort6_Data_get, _cisstMultiTaskPython.mtsVctShort6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort6 self) -> mtsVctShort6
        __init__(mtsVctShort6 self, mtsVctShort6 other) -> mtsVctShort6
        __init__(mtsVctShort6 self, mtsGenericObjectProxy< vctShort6 >::value_type const & data) -> mtsVctShort6
        """
        _cisstMultiTaskPython.mtsVctShort6_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort6

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort6 self) -> mtsGenericObjectProxy< vctShort6 >::value_type
        GetData(mtsVctShort6 self) -> mtsGenericObjectProxy< vctShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort6 self) -> vctShort6"""
        return _cisstMultiTaskPython.mtsVctShort6_GetDataCopy(self)

# Register mtsVctShort6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort6_swigregister(mtsVctShort6)

def mtsVctShort6_ClassServices():
    r"""mtsVctShort6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort6_ClassServices()

class mtsVctShort7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort7Base self) -> mtsGenericObjectProxyBase< vctShort7 >::value_type
        GetData(mtsVctShort7Base self) -> mtsGenericObjectProxyBase< vctShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort7Base self, mtsVctShort7Base other)"""
        return _cisstMultiTaskPython.mtsVctShort7Base_Assign(self, other)

# Register mtsVctShort7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort7Base_swigregister(mtsVctShort7Base)

def mtsVctShort7Base_ClassServices():
    r"""mtsVctShort7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort7Base_ClassServices()

class mtsVctShort7(mtsVctShort7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort7_Data_get, _cisstMultiTaskPython.mtsVctShort7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort7 self) -> mtsVctShort7
        __init__(mtsVctShort7 self, mtsVctShort7 other) -> mtsVctShort7
        __init__(mtsVctShort7 self, mtsGenericObjectProxy< vctShort7 >::value_type const & data) -> mtsVctShort7
        """
        _cisstMultiTaskPython.mtsVctShort7_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort7

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort7 self) -> mtsGenericObjectProxy< vctShort7 >::value_type
        GetData(mtsVctShort7 self) -> mtsGenericObjectProxy< vctShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort7 self) -> vctShort7"""
        return _cisstMultiTaskPython.mtsVctShort7_GetDataCopy(self)

# Register mtsVctShort7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort7_swigregister(mtsVctShort7)

def mtsVctShort7_ClassServices():
    r"""mtsVctShort7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort7_ClassServices()

class mtsVctShort8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort8Base self) -> mtsGenericObjectProxyBase< vctShort8 >::value_type
        GetData(mtsVctShort8Base self) -> mtsGenericObjectProxyBase< vctShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort8Base self, mtsVctShort8Base other)"""
        return _cisstMultiTaskPython.mtsVctShort8Base_Assign(self, other)

# Register mtsVctShort8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort8Base_swigregister(mtsVctShort8Base)

def mtsVctShort8Base_ClassServices():
    r"""mtsVctShort8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort8Base_ClassServices()

class mtsVctShort8(mtsVctShort8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort8_Data_get, _cisstMultiTaskPython.mtsVctShort8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort8 self) -> mtsVctShort8
        __init__(mtsVctShort8 self, mtsVctShort8 other) -> mtsVctShort8
        __init__(mtsVctShort8 self, mtsGenericObjectProxy< vctShort8 >::value_type const & data) -> mtsVctShort8
        """
        _cisstMultiTaskPython.mtsVctShort8_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort8

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort8 self) -> mtsGenericObjectProxy< vctShort8 >::value_type
        GetData(mtsVctShort8 self) -> mtsGenericObjectProxy< vctShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort8 self) -> vctShort8"""
        return _cisstMultiTaskPython.mtsVctShort8_GetDataCopy(self)

# Register mtsVctShort8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort8_swigregister(mtsVctShort8)

def mtsVctShort8_ClassServices():
    r"""mtsVctShort8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort8_ClassServices()

class mtsVctShort9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShort9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort9Base self) -> mtsGenericObjectProxyBase< vctShort9 >::value_type
        GetData(mtsVctShort9Base self) -> mtsGenericObjectProxyBase< vctShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShort9Base self, mtsVctShort9Base other)"""
        return _cisstMultiTaskPython.mtsVctShort9Base_Assign(self, other)

# Register mtsVctShort9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort9Base_swigregister(mtsVctShort9Base)

def mtsVctShort9Base_ClassServices():
    r"""mtsVctShort9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort9Base_ClassServices()

class mtsVctShort9(mtsVctShort9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShort9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShort9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShort9_Data_get, _cisstMultiTaskPython.mtsVctShort9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShort9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShort9 self) -> mtsVctShort9
        __init__(mtsVctShort9 self, mtsVctShort9 other) -> mtsVctShort9
        __init__(mtsVctShort9 self, mtsGenericObjectProxy< vctShort9 >::value_type const & data) -> mtsVctShort9
        """
        _cisstMultiTaskPython.mtsVctShort9_swiginit(self, _cisstMultiTaskPython.new_mtsVctShort9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort9

    def GetData(self, *args):
        r"""
        GetData(mtsVctShort9 self) -> mtsGenericObjectProxy< vctShort9 >::value_type
        GetData(mtsVctShort9 self) -> mtsGenericObjectProxy< vctShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShort9 self) -> vctShort9"""
        return _cisstMultiTaskPython.mtsVctShort9_GetDataCopy(self)

# Register mtsVctShort9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShort9_swigregister(mtsVctShort9)

def mtsVctShort9_ClassServices():
    r"""mtsVctShort9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShort9_ClassServices()

class mtsVctUShort1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort1Base self) -> mtsGenericObjectProxyBase< vctUShort1 >::value_type
        GetData(mtsVctUShort1Base self) -> mtsGenericObjectProxyBase< vctUShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort1Base self, mtsVctUShort1Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort1Base_Assign(self, other)

# Register mtsVctUShort1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort1Base_swigregister(mtsVctUShort1Base)

def mtsVctUShort1Base_ClassServices():
    r"""mtsVctUShort1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort1Base_ClassServices()

class mtsVctUShort1(mtsVctUShort1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort1_Data_get, _cisstMultiTaskPython.mtsVctUShort1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort1 self) -> mtsVctUShort1
        __init__(mtsVctUShort1 self, mtsVctUShort1 other) -> mtsVctUShort1
        __init__(mtsVctUShort1 self, mtsGenericObjectProxy< vctUShort1 >::value_type const & data) -> mtsVctUShort1
        """
        _cisstMultiTaskPython.mtsVctUShort1_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort1

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort1 self) -> mtsGenericObjectProxy< vctUShort1 >::value_type
        GetData(mtsVctUShort1 self) -> mtsGenericObjectProxy< vctUShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort1 self) -> vctUShort1"""
        return _cisstMultiTaskPython.mtsVctUShort1_GetDataCopy(self)

# Register mtsVctUShort1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort1_swigregister(mtsVctUShort1)

def mtsVctUShort1_ClassServices():
    r"""mtsVctUShort1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort1_ClassServices()

class mtsVctUShort2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort2Base self) -> mtsGenericObjectProxyBase< vctUShort2 >::value_type
        GetData(mtsVctUShort2Base self) -> mtsGenericObjectProxyBase< vctUShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort2Base self, mtsVctUShort2Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort2Base_Assign(self, other)

# Register mtsVctUShort2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort2Base_swigregister(mtsVctUShort2Base)

def mtsVctUShort2Base_ClassServices():
    r"""mtsVctUShort2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort2Base_ClassServices()

class mtsVctUShort2(mtsVctUShort2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort2_Data_get, _cisstMultiTaskPython.mtsVctUShort2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort2 self) -> mtsVctUShort2
        __init__(mtsVctUShort2 self, mtsVctUShort2 other) -> mtsVctUShort2
        __init__(mtsVctUShort2 self, mtsGenericObjectProxy< vctUShort2 >::value_type const & data) -> mtsVctUShort2
        """
        _cisstMultiTaskPython.mtsVctUShort2_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort2

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort2 self) -> mtsGenericObjectProxy< vctUShort2 >::value_type
        GetData(mtsVctUShort2 self) -> mtsGenericObjectProxy< vctUShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort2 self) -> vctUShort2"""
        return _cisstMultiTaskPython.mtsVctUShort2_GetDataCopy(self)

# Register mtsVctUShort2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort2_swigregister(mtsVctUShort2)

def mtsVctUShort2_ClassServices():
    r"""mtsVctUShort2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort2_ClassServices()

class mtsVctUShort3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort3Base self) -> mtsGenericObjectProxyBase< vctUShort3 >::value_type
        GetData(mtsVctUShort3Base self) -> mtsGenericObjectProxyBase< vctUShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort3Base self, mtsVctUShort3Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort3Base_Assign(self, other)

# Register mtsVctUShort3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort3Base_swigregister(mtsVctUShort3Base)

def mtsVctUShort3Base_ClassServices():
    r"""mtsVctUShort3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort3Base_ClassServices()

class mtsVctUShort3(mtsVctUShort3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort3_Data_get, _cisstMultiTaskPython.mtsVctUShort3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort3 self) -> mtsVctUShort3
        __init__(mtsVctUShort3 self, mtsVctUShort3 other) -> mtsVctUShort3
        __init__(mtsVctUShort3 self, mtsGenericObjectProxy< vctUShort3 >::value_type const & data) -> mtsVctUShort3
        """
        _cisstMultiTaskPython.mtsVctUShort3_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort3

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort3 self) -> mtsGenericObjectProxy< vctUShort3 >::value_type
        GetData(mtsVctUShort3 self) -> mtsGenericObjectProxy< vctUShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort3 self) -> vctUShort3"""
        return _cisstMultiTaskPython.mtsVctUShort3_GetDataCopy(self)

# Register mtsVctUShort3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort3_swigregister(mtsVctUShort3)

def mtsVctUShort3_ClassServices():
    r"""mtsVctUShort3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort3_ClassServices()

class mtsVctUShort4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort4Base self) -> mtsGenericObjectProxyBase< vctUShort4 >::value_type
        GetData(mtsVctUShort4Base self) -> mtsGenericObjectProxyBase< vctUShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort4Base self, mtsVctUShort4Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort4Base_Assign(self, other)

# Register mtsVctUShort4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort4Base_swigregister(mtsVctUShort4Base)

def mtsVctUShort4Base_ClassServices():
    r"""mtsVctUShort4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort4Base_ClassServices()

class mtsVctUShort4(mtsVctUShort4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort4_Data_get, _cisstMultiTaskPython.mtsVctUShort4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort4 self) -> mtsVctUShort4
        __init__(mtsVctUShort4 self, mtsVctUShort4 other) -> mtsVctUShort4
        __init__(mtsVctUShort4 self, mtsGenericObjectProxy< vctUShort4 >::value_type const & data) -> mtsVctUShort4
        """
        _cisstMultiTaskPython.mtsVctUShort4_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort4

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort4 self) -> mtsGenericObjectProxy< vctUShort4 >::value_type
        GetData(mtsVctUShort4 self) -> mtsGenericObjectProxy< vctUShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort4 self) -> vctUShort4"""
        return _cisstMultiTaskPython.mtsVctUShort4_GetDataCopy(self)

# Register mtsVctUShort4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort4_swigregister(mtsVctUShort4)

def mtsVctUShort4_ClassServices():
    r"""mtsVctUShort4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort4_ClassServices()

class mtsVctUShort5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort5Base self) -> mtsGenericObjectProxyBase< vctUShort5 >::value_type
        GetData(mtsVctUShort5Base self) -> mtsGenericObjectProxyBase< vctUShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort5Base self, mtsVctUShort5Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort5Base_Assign(self, other)

# Register mtsVctUShort5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort5Base_swigregister(mtsVctUShort5Base)

def mtsVctUShort5Base_ClassServices():
    r"""mtsVctUShort5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort5Base_ClassServices()

class mtsVctUShort5(mtsVctUShort5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort5_Data_get, _cisstMultiTaskPython.mtsVctUShort5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort5 self) -> mtsVctUShort5
        __init__(mtsVctUShort5 self, mtsVctUShort5 other) -> mtsVctUShort5
        __init__(mtsVctUShort5 self, mtsGenericObjectProxy< vctUShort5 >::value_type const & data) -> mtsVctUShort5
        """
        _cisstMultiTaskPython.mtsVctUShort5_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort5

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort5 self) -> mtsGenericObjectProxy< vctUShort5 >::value_type
        GetData(mtsVctUShort5 self) -> mtsGenericObjectProxy< vctUShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort5 self) -> vctUShort5"""
        return _cisstMultiTaskPython.mtsVctUShort5_GetDataCopy(self)

# Register mtsVctUShort5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort5_swigregister(mtsVctUShort5)

def mtsVctUShort5_ClassServices():
    r"""mtsVctUShort5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort5_ClassServices()

class mtsVctUShort6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort6Base self) -> mtsGenericObjectProxyBase< vctUShort6 >::value_type
        GetData(mtsVctUShort6Base self) -> mtsGenericObjectProxyBase< vctUShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort6Base self, mtsVctUShort6Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort6Base_Assign(self, other)

# Register mtsVctUShort6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort6Base_swigregister(mtsVctUShort6Base)

def mtsVctUShort6Base_ClassServices():
    r"""mtsVctUShort6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort6Base_ClassServices()

class mtsVctUShort6(mtsVctUShort6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort6_Data_get, _cisstMultiTaskPython.mtsVctUShort6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort6 self) -> mtsVctUShort6
        __init__(mtsVctUShort6 self, mtsVctUShort6 other) -> mtsVctUShort6
        __init__(mtsVctUShort6 self, mtsGenericObjectProxy< vctUShort6 >::value_type const & data) -> mtsVctUShort6
        """
        _cisstMultiTaskPython.mtsVctUShort6_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort6

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort6 self) -> mtsGenericObjectProxy< vctUShort6 >::value_type
        GetData(mtsVctUShort6 self) -> mtsGenericObjectProxy< vctUShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort6 self) -> vctUShort6"""
        return _cisstMultiTaskPython.mtsVctUShort6_GetDataCopy(self)

# Register mtsVctUShort6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort6_swigregister(mtsVctUShort6)

def mtsVctUShort6_ClassServices():
    r"""mtsVctUShort6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort6_ClassServices()

class mtsVctUShort7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort7Base self) -> mtsGenericObjectProxyBase< vctUShort7 >::value_type
        GetData(mtsVctUShort7Base self) -> mtsGenericObjectProxyBase< vctUShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort7Base self, mtsVctUShort7Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort7Base_Assign(self, other)

# Register mtsVctUShort7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort7Base_swigregister(mtsVctUShort7Base)

def mtsVctUShort7Base_ClassServices():
    r"""mtsVctUShort7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort7Base_ClassServices()

class mtsVctUShort7(mtsVctUShort7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort7_Data_get, _cisstMultiTaskPython.mtsVctUShort7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort7 self) -> mtsVctUShort7
        __init__(mtsVctUShort7 self, mtsVctUShort7 other) -> mtsVctUShort7
        __init__(mtsVctUShort7 self, mtsGenericObjectProxy< vctUShort7 >::value_type const & data) -> mtsVctUShort7
        """
        _cisstMultiTaskPython.mtsVctUShort7_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort7

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort7 self) -> mtsGenericObjectProxy< vctUShort7 >::value_type
        GetData(mtsVctUShort7 self) -> mtsGenericObjectProxy< vctUShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort7 self) -> vctUShort7"""
        return _cisstMultiTaskPython.mtsVctUShort7_GetDataCopy(self)

# Register mtsVctUShort7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort7_swigregister(mtsVctUShort7)

def mtsVctUShort7_ClassServices():
    r"""mtsVctUShort7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort7_ClassServices()

class mtsVctUShort8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort8Base self) -> mtsGenericObjectProxyBase< vctUShort8 >::value_type
        GetData(mtsVctUShort8Base self) -> mtsGenericObjectProxyBase< vctUShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort8Base self, mtsVctUShort8Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort8Base_Assign(self, other)

# Register mtsVctUShort8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort8Base_swigregister(mtsVctUShort8Base)

def mtsVctUShort8Base_ClassServices():
    r"""mtsVctUShort8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort8Base_ClassServices()

class mtsVctUShort8(mtsVctUShort8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort8_Data_get, _cisstMultiTaskPython.mtsVctUShort8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort8 self) -> mtsVctUShort8
        __init__(mtsVctUShort8 self, mtsVctUShort8 other) -> mtsVctUShort8
        __init__(mtsVctUShort8 self, mtsGenericObjectProxy< vctUShort8 >::value_type const & data) -> mtsVctUShort8
        """
        _cisstMultiTaskPython.mtsVctUShort8_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort8

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort8 self) -> mtsGenericObjectProxy< vctUShort8 >::value_type
        GetData(mtsVctUShort8 self) -> mtsGenericObjectProxy< vctUShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort8 self) -> vctUShort8"""
        return _cisstMultiTaskPython.mtsVctUShort8_GetDataCopy(self)

# Register mtsVctUShort8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort8_swigregister(mtsVctUShort8)

def mtsVctUShort8_ClassServices():
    r"""mtsVctUShort8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort8_ClassServices()

class mtsVctUShort9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShort9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort9Base self) -> mtsGenericObjectProxyBase< vctUShort9 >::value_type
        GetData(mtsVctUShort9Base self) -> mtsGenericObjectProxyBase< vctUShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShort9Base self, mtsVctUShort9Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort9Base_Assign(self, other)

# Register mtsVctUShort9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort9Base_swigregister(mtsVctUShort9Base)

def mtsVctUShort9Base_ClassServices():
    r"""mtsVctUShort9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort9Base_ClassServices()

class mtsVctUShort9(mtsVctUShort9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShort9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShort9_Data_get, _cisstMultiTaskPython.mtsVctUShort9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShort9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShort9 self) -> mtsVctUShort9
        __init__(mtsVctUShort9 self, mtsVctUShort9 other) -> mtsVctUShort9
        __init__(mtsVctUShort9 self, mtsGenericObjectProxy< vctUShort9 >::value_type const & data) -> mtsVctUShort9
        """
        _cisstMultiTaskPython.mtsVctUShort9_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShort9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort9

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShort9 self) -> mtsGenericObjectProxy< vctUShort9 >::value_type
        GetData(mtsVctUShort9 self) -> mtsGenericObjectProxy< vctUShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShort9 self) -> vctUShort9"""
        return _cisstMultiTaskPython.mtsVctUShort9_GetDataCopy(self)

# Register mtsVctUShort9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShort9_swigregister(mtsVctUShort9)

def mtsVctUShort9_ClassServices():
    r"""mtsVctUShort9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShort9_ClassServices()

class mtsVctChar1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar1Base self) -> mtsGenericObjectProxyBase< vctChar1 >::value_type
        GetData(mtsVctChar1Base self) -> mtsGenericObjectProxyBase< vctChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar1Base self, mtsVctChar1Base other)"""
        return _cisstMultiTaskPython.mtsVctChar1Base_Assign(self, other)

# Register mtsVctChar1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar1Base_swigregister(mtsVctChar1Base)

def mtsVctChar1Base_ClassServices():
    r"""mtsVctChar1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar1Base_ClassServices()

class mtsVctChar1(mtsVctChar1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar1_Data_get, _cisstMultiTaskPython.mtsVctChar1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar1 self) -> mtsVctChar1
        __init__(mtsVctChar1 self, mtsVctChar1 other) -> mtsVctChar1
        __init__(mtsVctChar1 self, mtsGenericObjectProxy< vctChar1 >::value_type const & data) -> mtsVctChar1
        """
        _cisstMultiTaskPython.mtsVctChar1_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar1

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar1 self) -> mtsGenericObjectProxy< vctChar1 >::value_type
        GetData(mtsVctChar1 self) -> mtsGenericObjectProxy< vctChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar1 self) -> vctChar1"""
        return _cisstMultiTaskPython.mtsVctChar1_GetDataCopy(self)

# Register mtsVctChar1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar1_swigregister(mtsVctChar1)

def mtsVctChar1_ClassServices():
    r"""mtsVctChar1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar1_ClassServices()

class mtsVctChar2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar2Base self) -> mtsGenericObjectProxyBase< vctChar2 >::value_type
        GetData(mtsVctChar2Base self) -> mtsGenericObjectProxyBase< vctChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar2Base self, mtsVctChar2Base other)"""
        return _cisstMultiTaskPython.mtsVctChar2Base_Assign(self, other)

# Register mtsVctChar2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar2Base_swigregister(mtsVctChar2Base)

def mtsVctChar2Base_ClassServices():
    r"""mtsVctChar2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar2Base_ClassServices()

class mtsVctChar2(mtsVctChar2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar2_Data_get, _cisstMultiTaskPython.mtsVctChar2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar2 self) -> mtsVctChar2
        __init__(mtsVctChar2 self, mtsVctChar2 other) -> mtsVctChar2
        __init__(mtsVctChar2 self, mtsGenericObjectProxy< vctChar2 >::value_type const & data) -> mtsVctChar2
        """
        _cisstMultiTaskPython.mtsVctChar2_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar2

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar2 self) -> mtsGenericObjectProxy< vctChar2 >::value_type
        GetData(mtsVctChar2 self) -> mtsGenericObjectProxy< vctChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar2 self) -> vctChar2"""
        return _cisstMultiTaskPython.mtsVctChar2_GetDataCopy(self)

# Register mtsVctChar2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar2_swigregister(mtsVctChar2)

def mtsVctChar2_ClassServices():
    r"""mtsVctChar2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar2_ClassServices()

class mtsVctChar3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar3Base self) -> mtsGenericObjectProxyBase< vctChar3 >::value_type
        GetData(mtsVctChar3Base self) -> mtsGenericObjectProxyBase< vctChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar3Base self, mtsVctChar3Base other)"""
        return _cisstMultiTaskPython.mtsVctChar3Base_Assign(self, other)

# Register mtsVctChar3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar3Base_swigregister(mtsVctChar3Base)

def mtsVctChar3Base_ClassServices():
    r"""mtsVctChar3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar3Base_ClassServices()

class mtsVctChar3(mtsVctChar3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar3_Data_get, _cisstMultiTaskPython.mtsVctChar3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar3 self) -> mtsVctChar3
        __init__(mtsVctChar3 self, mtsVctChar3 other) -> mtsVctChar3
        __init__(mtsVctChar3 self, mtsGenericObjectProxy< vctChar3 >::value_type const & data) -> mtsVctChar3
        """
        _cisstMultiTaskPython.mtsVctChar3_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar3

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar3 self) -> mtsGenericObjectProxy< vctChar3 >::value_type
        GetData(mtsVctChar3 self) -> mtsGenericObjectProxy< vctChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar3 self) -> vctChar3"""
        return _cisstMultiTaskPython.mtsVctChar3_GetDataCopy(self)

# Register mtsVctChar3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar3_swigregister(mtsVctChar3)

def mtsVctChar3_ClassServices():
    r"""mtsVctChar3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar3_ClassServices()

class mtsVctChar4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar4Base self) -> mtsGenericObjectProxyBase< vctChar4 >::value_type
        GetData(mtsVctChar4Base self) -> mtsGenericObjectProxyBase< vctChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar4Base self, mtsVctChar4Base other)"""
        return _cisstMultiTaskPython.mtsVctChar4Base_Assign(self, other)

# Register mtsVctChar4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar4Base_swigregister(mtsVctChar4Base)

def mtsVctChar4Base_ClassServices():
    r"""mtsVctChar4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar4Base_ClassServices()

class mtsVctChar4(mtsVctChar4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar4_Data_get, _cisstMultiTaskPython.mtsVctChar4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar4 self) -> mtsVctChar4
        __init__(mtsVctChar4 self, mtsVctChar4 other) -> mtsVctChar4
        __init__(mtsVctChar4 self, mtsGenericObjectProxy< vctChar4 >::value_type const & data) -> mtsVctChar4
        """
        _cisstMultiTaskPython.mtsVctChar4_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar4

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar4 self) -> mtsGenericObjectProxy< vctChar4 >::value_type
        GetData(mtsVctChar4 self) -> mtsGenericObjectProxy< vctChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar4 self) -> vctChar4"""
        return _cisstMultiTaskPython.mtsVctChar4_GetDataCopy(self)

# Register mtsVctChar4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar4_swigregister(mtsVctChar4)

def mtsVctChar4_ClassServices():
    r"""mtsVctChar4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar4_ClassServices()

class mtsVctChar5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar5Base self) -> mtsGenericObjectProxyBase< vctChar5 >::value_type
        GetData(mtsVctChar5Base self) -> mtsGenericObjectProxyBase< vctChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar5Base self, mtsVctChar5Base other)"""
        return _cisstMultiTaskPython.mtsVctChar5Base_Assign(self, other)

# Register mtsVctChar5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar5Base_swigregister(mtsVctChar5Base)

def mtsVctChar5Base_ClassServices():
    r"""mtsVctChar5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar5Base_ClassServices()

class mtsVctChar5(mtsVctChar5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar5_Data_get, _cisstMultiTaskPython.mtsVctChar5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar5 self) -> mtsVctChar5
        __init__(mtsVctChar5 self, mtsVctChar5 other) -> mtsVctChar5
        __init__(mtsVctChar5 self, mtsGenericObjectProxy< vctChar5 >::value_type const & data) -> mtsVctChar5
        """
        _cisstMultiTaskPython.mtsVctChar5_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar5

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar5 self) -> mtsGenericObjectProxy< vctChar5 >::value_type
        GetData(mtsVctChar5 self) -> mtsGenericObjectProxy< vctChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar5 self) -> vctChar5"""
        return _cisstMultiTaskPython.mtsVctChar5_GetDataCopy(self)

# Register mtsVctChar5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar5_swigregister(mtsVctChar5)

def mtsVctChar5_ClassServices():
    r"""mtsVctChar5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar5_ClassServices()

class mtsVctChar6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar6Base self) -> mtsGenericObjectProxyBase< vctChar6 >::value_type
        GetData(mtsVctChar6Base self) -> mtsGenericObjectProxyBase< vctChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar6Base self, mtsVctChar6Base other)"""
        return _cisstMultiTaskPython.mtsVctChar6Base_Assign(self, other)

# Register mtsVctChar6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar6Base_swigregister(mtsVctChar6Base)

def mtsVctChar6Base_ClassServices():
    r"""mtsVctChar6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar6Base_ClassServices()

class mtsVctChar6(mtsVctChar6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar6_Data_get, _cisstMultiTaskPython.mtsVctChar6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar6 self) -> mtsVctChar6
        __init__(mtsVctChar6 self, mtsVctChar6 other) -> mtsVctChar6
        __init__(mtsVctChar6 self, mtsGenericObjectProxy< vctChar6 >::value_type const & data) -> mtsVctChar6
        """
        _cisstMultiTaskPython.mtsVctChar6_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar6

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar6 self) -> mtsGenericObjectProxy< vctChar6 >::value_type
        GetData(mtsVctChar6 self) -> mtsGenericObjectProxy< vctChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar6 self) -> vctChar6"""
        return _cisstMultiTaskPython.mtsVctChar6_GetDataCopy(self)

# Register mtsVctChar6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar6_swigregister(mtsVctChar6)

def mtsVctChar6_ClassServices():
    r"""mtsVctChar6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar6_ClassServices()

class mtsVctChar7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar7Base self) -> mtsGenericObjectProxyBase< vctChar7 >::value_type
        GetData(mtsVctChar7Base self) -> mtsGenericObjectProxyBase< vctChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar7Base self, mtsVctChar7Base other)"""
        return _cisstMultiTaskPython.mtsVctChar7Base_Assign(self, other)

# Register mtsVctChar7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar7Base_swigregister(mtsVctChar7Base)

def mtsVctChar7Base_ClassServices():
    r"""mtsVctChar7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar7Base_ClassServices()

class mtsVctChar7(mtsVctChar7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar7_Data_get, _cisstMultiTaskPython.mtsVctChar7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar7 self) -> mtsVctChar7
        __init__(mtsVctChar7 self, mtsVctChar7 other) -> mtsVctChar7
        __init__(mtsVctChar7 self, mtsGenericObjectProxy< vctChar7 >::value_type const & data) -> mtsVctChar7
        """
        _cisstMultiTaskPython.mtsVctChar7_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar7

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar7 self) -> mtsGenericObjectProxy< vctChar7 >::value_type
        GetData(mtsVctChar7 self) -> mtsGenericObjectProxy< vctChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar7 self) -> vctChar7"""
        return _cisstMultiTaskPython.mtsVctChar7_GetDataCopy(self)

# Register mtsVctChar7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar7_swigregister(mtsVctChar7)

def mtsVctChar7_ClassServices():
    r"""mtsVctChar7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar7_ClassServices()

class mtsVctChar8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar8Base self) -> mtsGenericObjectProxyBase< vctChar8 >::value_type
        GetData(mtsVctChar8Base self) -> mtsGenericObjectProxyBase< vctChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar8Base self, mtsVctChar8Base other)"""
        return _cisstMultiTaskPython.mtsVctChar8Base_Assign(self, other)

# Register mtsVctChar8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar8Base_swigregister(mtsVctChar8Base)

def mtsVctChar8Base_ClassServices():
    r"""mtsVctChar8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar8Base_ClassServices()

class mtsVctChar8(mtsVctChar8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar8_Data_get, _cisstMultiTaskPython.mtsVctChar8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar8 self) -> mtsVctChar8
        __init__(mtsVctChar8 self, mtsVctChar8 other) -> mtsVctChar8
        __init__(mtsVctChar8 self, mtsGenericObjectProxy< vctChar8 >::value_type const & data) -> mtsVctChar8
        """
        _cisstMultiTaskPython.mtsVctChar8_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar8

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar8 self) -> mtsGenericObjectProxy< vctChar8 >::value_type
        GetData(mtsVctChar8 self) -> mtsGenericObjectProxy< vctChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar8 self) -> vctChar8"""
        return _cisstMultiTaskPython.mtsVctChar8_GetDataCopy(self)

# Register mtsVctChar8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar8_swigregister(mtsVctChar8)

def mtsVctChar8_ClassServices():
    r"""mtsVctChar8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar8_ClassServices()

class mtsVctChar9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctChar9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar9Base self) -> mtsGenericObjectProxyBase< vctChar9 >::value_type
        GetData(mtsVctChar9Base self) -> mtsGenericObjectProxyBase< vctChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctChar9Base self, mtsVctChar9Base other)"""
        return _cisstMultiTaskPython.mtsVctChar9Base_Assign(self, other)

# Register mtsVctChar9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar9Base_swigregister(mtsVctChar9Base)

def mtsVctChar9Base_ClassServices():
    r"""mtsVctChar9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar9Base_ClassServices()

class mtsVctChar9(mtsVctChar9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctChar9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctChar9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctChar9_Data_get, _cisstMultiTaskPython.mtsVctChar9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctChar9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctChar9 self) -> mtsVctChar9
        __init__(mtsVctChar9 self, mtsVctChar9 other) -> mtsVctChar9
        __init__(mtsVctChar9 self, mtsGenericObjectProxy< vctChar9 >::value_type const & data) -> mtsVctChar9
        """
        _cisstMultiTaskPython.mtsVctChar9_swiginit(self, _cisstMultiTaskPython.new_mtsVctChar9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar9

    def GetData(self, *args):
        r"""
        GetData(mtsVctChar9 self) -> mtsGenericObjectProxy< vctChar9 >::value_type
        GetData(mtsVctChar9 self) -> mtsGenericObjectProxy< vctChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctChar9 self) -> vctChar9"""
        return _cisstMultiTaskPython.mtsVctChar9_GetDataCopy(self)

# Register mtsVctChar9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctChar9_swigregister(mtsVctChar9)

def mtsVctChar9_ClassServices():
    r"""mtsVctChar9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctChar9_ClassServices()

class mtsVctUChar1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar1Base self) -> mtsGenericObjectProxyBase< vctUChar1 >::value_type
        GetData(mtsVctUChar1Base self) -> mtsGenericObjectProxyBase< vctUChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar1Base self, mtsVctUChar1Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar1Base_Assign(self, other)

# Register mtsVctUChar1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar1Base_swigregister(mtsVctUChar1Base)

def mtsVctUChar1Base_ClassServices():
    r"""mtsVctUChar1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar1Base_ClassServices()

class mtsVctUChar1(mtsVctUChar1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar1_Data_get, _cisstMultiTaskPython.mtsVctUChar1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar1 self) -> mtsVctUChar1
        __init__(mtsVctUChar1 self, mtsVctUChar1 other) -> mtsVctUChar1
        __init__(mtsVctUChar1 self, mtsGenericObjectProxy< vctUChar1 >::value_type const & data) -> mtsVctUChar1
        """
        _cisstMultiTaskPython.mtsVctUChar1_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar1

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar1 self) -> mtsGenericObjectProxy< vctUChar1 >::value_type
        GetData(mtsVctUChar1 self) -> mtsGenericObjectProxy< vctUChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar1 self) -> vctUChar1"""
        return _cisstMultiTaskPython.mtsVctUChar1_GetDataCopy(self)

# Register mtsVctUChar1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar1_swigregister(mtsVctUChar1)

def mtsVctUChar1_ClassServices():
    r"""mtsVctUChar1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar1_ClassServices()

class mtsVctUChar2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar2Base self) -> mtsGenericObjectProxyBase< vctUChar2 >::value_type
        GetData(mtsVctUChar2Base self) -> mtsGenericObjectProxyBase< vctUChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar2Base self, mtsVctUChar2Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar2Base_Assign(self, other)

# Register mtsVctUChar2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar2Base_swigregister(mtsVctUChar2Base)

def mtsVctUChar2Base_ClassServices():
    r"""mtsVctUChar2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar2Base_ClassServices()

class mtsVctUChar2(mtsVctUChar2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar2_Data_get, _cisstMultiTaskPython.mtsVctUChar2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar2 self) -> mtsVctUChar2
        __init__(mtsVctUChar2 self, mtsVctUChar2 other) -> mtsVctUChar2
        __init__(mtsVctUChar2 self, mtsGenericObjectProxy< vctUChar2 >::value_type const & data) -> mtsVctUChar2
        """
        _cisstMultiTaskPython.mtsVctUChar2_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar2

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar2 self) -> mtsGenericObjectProxy< vctUChar2 >::value_type
        GetData(mtsVctUChar2 self) -> mtsGenericObjectProxy< vctUChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar2 self) -> vctUChar2"""
        return _cisstMultiTaskPython.mtsVctUChar2_GetDataCopy(self)

# Register mtsVctUChar2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar2_swigregister(mtsVctUChar2)

def mtsVctUChar2_ClassServices():
    r"""mtsVctUChar2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar2_ClassServices()

class mtsVctUChar3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar3Base self) -> mtsGenericObjectProxyBase< vctUChar3 >::value_type
        GetData(mtsVctUChar3Base self) -> mtsGenericObjectProxyBase< vctUChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar3Base self, mtsVctUChar3Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar3Base_Assign(self, other)

# Register mtsVctUChar3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar3Base_swigregister(mtsVctUChar3Base)

def mtsVctUChar3Base_ClassServices():
    r"""mtsVctUChar3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar3Base_ClassServices()

class mtsVctUChar3(mtsVctUChar3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar3_Data_get, _cisstMultiTaskPython.mtsVctUChar3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar3 self) -> mtsVctUChar3
        __init__(mtsVctUChar3 self, mtsVctUChar3 other) -> mtsVctUChar3
        __init__(mtsVctUChar3 self, mtsGenericObjectProxy< vctUChar3 >::value_type const & data) -> mtsVctUChar3
        """
        _cisstMultiTaskPython.mtsVctUChar3_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar3

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar3 self) -> mtsGenericObjectProxy< vctUChar3 >::value_type
        GetData(mtsVctUChar3 self) -> mtsGenericObjectProxy< vctUChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar3 self) -> vctUChar3"""
        return _cisstMultiTaskPython.mtsVctUChar3_GetDataCopy(self)

# Register mtsVctUChar3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar3_swigregister(mtsVctUChar3)

def mtsVctUChar3_ClassServices():
    r"""mtsVctUChar3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar3_ClassServices()

class mtsVctUChar4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar4Base self) -> mtsGenericObjectProxyBase< vctUChar4 >::value_type
        GetData(mtsVctUChar4Base self) -> mtsGenericObjectProxyBase< vctUChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar4Base self, mtsVctUChar4Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar4Base_Assign(self, other)

# Register mtsVctUChar4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar4Base_swigregister(mtsVctUChar4Base)

def mtsVctUChar4Base_ClassServices():
    r"""mtsVctUChar4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar4Base_ClassServices()

class mtsVctUChar4(mtsVctUChar4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar4_Data_get, _cisstMultiTaskPython.mtsVctUChar4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar4 self) -> mtsVctUChar4
        __init__(mtsVctUChar4 self, mtsVctUChar4 other) -> mtsVctUChar4
        __init__(mtsVctUChar4 self, mtsGenericObjectProxy< vctUChar4 >::value_type const & data) -> mtsVctUChar4
        """
        _cisstMultiTaskPython.mtsVctUChar4_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar4

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar4 self) -> mtsGenericObjectProxy< vctUChar4 >::value_type
        GetData(mtsVctUChar4 self) -> mtsGenericObjectProxy< vctUChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar4 self) -> vctUChar4"""
        return _cisstMultiTaskPython.mtsVctUChar4_GetDataCopy(self)

# Register mtsVctUChar4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar4_swigregister(mtsVctUChar4)

def mtsVctUChar4_ClassServices():
    r"""mtsVctUChar4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar4_ClassServices()

class mtsVctUChar5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar5Base self) -> mtsGenericObjectProxyBase< vctUChar5 >::value_type
        GetData(mtsVctUChar5Base self) -> mtsGenericObjectProxyBase< vctUChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar5Base self, mtsVctUChar5Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar5Base_Assign(self, other)

# Register mtsVctUChar5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar5Base_swigregister(mtsVctUChar5Base)

def mtsVctUChar5Base_ClassServices():
    r"""mtsVctUChar5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar5Base_ClassServices()

class mtsVctUChar5(mtsVctUChar5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar5_Data_get, _cisstMultiTaskPython.mtsVctUChar5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar5 self) -> mtsVctUChar5
        __init__(mtsVctUChar5 self, mtsVctUChar5 other) -> mtsVctUChar5
        __init__(mtsVctUChar5 self, mtsGenericObjectProxy< vctUChar5 >::value_type const & data) -> mtsVctUChar5
        """
        _cisstMultiTaskPython.mtsVctUChar5_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar5

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar5 self) -> mtsGenericObjectProxy< vctUChar5 >::value_type
        GetData(mtsVctUChar5 self) -> mtsGenericObjectProxy< vctUChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar5 self) -> vctUChar5"""
        return _cisstMultiTaskPython.mtsVctUChar5_GetDataCopy(self)

# Register mtsVctUChar5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar5_swigregister(mtsVctUChar5)

def mtsVctUChar5_ClassServices():
    r"""mtsVctUChar5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar5_ClassServices()

class mtsVctUChar6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar6Base self) -> mtsGenericObjectProxyBase< vctUChar6 >::value_type
        GetData(mtsVctUChar6Base self) -> mtsGenericObjectProxyBase< vctUChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar6Base self, mtsVctUChar6Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar6Base_Assign(self, other)

# Register mtsVctUChar6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar6Base_swigregister(mtsVctUChar6Base)

def mtsVctUChar6Base_ClassServices():
    r"""mtsVctUChar6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar6Base_ClassServices()

class mtsVctUChar6(mtsVctUChar6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar6_Data_get, _cisstMultiTaskPython.mtsVctUChar6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar6 self) -> mtsVctUChar6
        __init__(mtsVctUChar6 self, mtsVctUChar6 other) -> mtsVctUChar6
        __init__(mtsVctUChar6 self, mtsGenericObjectProxy< vctUChar6 >::value_type const & data) -> mtsVctUChar6
        """
        _cisstMultiTaskPython.mtsVctUChar6_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar6

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar6 self) -> mtsGenericObjectProxy< vctUChar6 >::value_type
        GetData(mtsVctUChar6 self) -> mtsGenericObjectProxy< vctUChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar6 self) -> vctUChar6"""
        return _cisstMultiTaskPython.mtsVctUChar6_GetDataCopy(self)

# Register mtsVctUChar6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar6_swigregister(mtsVctUChar6)

def mtsVctUChar6_ClassServices():
    r"""mtsVctUChar6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar6_ClassServices()

class mtsVctUChar7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar7Base self) -> mtsGenericObjectProxyBase< vctUChar7 >::value_type
        GetData(mtsVctUChar7Base self) -> mtsGenericObjectProxyBase< vctUChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar7Base self, mtsVctUChar7Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar7Base_Assign(self, other)

# Register mtsVctUChar7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar7Base_swigregister(mtsVctUChar7Base)

def mtsVctUChar7Base_ClassServices():
    r"""mtsVctUChar7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar7Base_ClassServices()

class mtsVctUChar7(mtsVctUChar7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar7_Data_get, _cisstMultiTaskPython.mtsVctUChar7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar7 self) -> mtsVctUChar7
        __init__(mtsVctUChar7 self, mtsVctUChar7 other) -> mtsVctUChar7
        __init__(mtsVctUChar7 self, mtsGenericObjectProxy< vctUChar7 >::value_type const & data) -> mtsVctUChar7
        """
        _cisstMultiTaskPython.mtsVctUChar7_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar7

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar7 self) -> mtsGenericObjectProxy< vctUChar7 >::value_type
        GetData(mtsVctUChar7 self) -> mtsGenericObjectProxy< vctUChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar7 self) -> vctUChar7"""
        return _cisstMultiTaskPython.mtsVctUChar7_GetDataCopy(self)

# Register mtsVctUChar7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar7_swigregister(mtsVctUChar7)

def mtsVctUChar7_ClassServices():
    r"""mtsVctUChar7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar7_ClassServices()

class mtsVctUChar8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar8Base self) -> mtsGenericObjectProxyBase< vctUChar8 >::value_type
        GetData(mtsVctUChar8Base self) -> mtsGenericObjectProxyBase< vctUChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar8Base self, mtsVctUChar8Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar8Base_Assign(self, other)

# Register mtsVctUChar8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar8Base_swigregister(mtsVctUChar8Base)

def mtsVctUChar8Base_ClassServices():
    r"""mtsVctUChar8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar8Base_ClassServices()

class mtsVctUChar8(mtsVctUChar8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar8_Data_get, _cisstMultiTaskPython.mtsVctUChar8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar8 self) -> mtsVctUChar8
        __init__(mtsVctUChar8 self, mtsVctUChar8 other) -> mtsVctUChar8
        __init__(mtsVctUChar8 self, mtsGenericObjectProxy< vctUChar8 >::value_type const & data) -> mtsVctUChar8
        """
        _cisstMultiTaskPython.mtsVctUChar8_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar8

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar8 self) -> mtsGenericObjectProxy< vctUChar8 >::value_type
        GetData(mtsVctUChar8 self) -> mtsGenericObjectProxy< vctUChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar8 self) -> vctUChar8"""
        return _cisstMultiTaskPython.mtsVctUChar8_GetDataCopy(self)

# Register mtsVctUChar8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar8_swigregister(mtsVctUChar8)

def mtsVctUChar8_ClassServices():
    r"""mtsVctUChar8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar8_ClassServices()

class mtsVctUChar9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUChar9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar9Base self) -> mtsGenericObjectProxyBase< vctUChar9 >::value_type
        GetData(mtsVctUChar9Base self) -> mtsGenericObjectProxyBase< vctUChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUChar9Base self, mtsVctUChar9Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar9Base_Assign(self, other)

# Register mtsVctUChar9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar9Base_swigregister(mtsVctUChar9Base)

def mtsVctUChar9Base_ClassServices():
    r"""mtsVctUChar9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar9Base_ClassServices()

class mtsVctUChar9(mtsVctUChar9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUChar9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUChar9_Data_get, _cisstMultiTaskPython.mtsVctUChar9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUChar9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUChar9 self) -> mtsVctUChar9
        __init__(mtsVctUChar9 self, mtsVctUChar9 other) -> mtsVctUChar9
        __init__(mtsVctUChar9 self, mtsGenericObjectProxy< vctUChar9 >::value_type const & data) -> mtsVctUChar9
        """
        _cisstMultiTaskPython.mtsVctUChar9_swiginit(self, _cisstMultiTaskPython.new_mtsVctUChar9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar9

    def GetData(self, *args):
        r"""
        GetData(mtsVctUChar9 self) -> mtsGenericObjectProxy< vctUChar9 >::value_type
        GetData(mtsVctUChar9 self) -> mtsGenericObjectProxy< vctUChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUChar9 self) -> vctUChar9"""
        return _cisstMultiTaskPython.mtsVctUChar9_GetDataCopy(self)

# Register mtsVctUChar9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUChar9_swigregister(mtsVctUChar9)

def mtsVctUChar9_ClassServices():
    r"""mtsVctUChar9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUChar9_ClassServices()

class mtsVctBool1Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool1Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool1Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool1Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool1Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool1Base self) -> mtsGenericObjectProxyBase< vctBool1 >::value_type
        GetData(mtsVctBool1Base self) -> mtsGenericObjectProxyBase< vctBool1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool1Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool1Base self, mtsVctBool1Base other)"""
        return _cisstMultiTaskPython.mtsVctBool1Base_Assign(self, other)

# Register mtsVctBool1Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool1Base_swigregister(mtsVctBool1Base)

def mtsVctBool1Base_ClassServices():
    r"""mtsVctBool1Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool1Base_ClassServices()

class mtsVctBool1(mtsVctBool1Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool1_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool1_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool1_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool1_Data_get, _cisstMultiTaskPython.mtsVctBool1_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool1)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool1 self) -> mtsVctBool1
        __init__(mtsVctBool1 self, mtsVctBool1 other) -> mtsVctBool1
        __init__(mtsVctBool1 self, mtsGenericObjectProxy< vctBool1 >::value_type const & data) -> mtsVctBool1
        """
        _cisstMultiTaskPython.mtsVctBool1_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool1(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool1

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool1 self) -> mtsGenericObjectProxy< vctBool1 >::value_type
        GetData(mtsVctBool1 self) -> mtsGenericObjectProxy< vctBool1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool1_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool1 self) -> vctBool1"""
        return _cisstMultiTaskPython.mtsVctBool1_GetDataCopy(self)

# Register mtsVctBool1 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool1_swigregister(mtsVctBool1)

def mtsVctBool1_ClassServices():
    r"""mtsVctBool1_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool1_ClassServices()

class mtsVctBool2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool2Base self) -> mtsGenericObjectProxyBase< vctBool2 >::value_type
        GetData(mtsVctBool2Base self) -> mtsGenericObjectProxyBase< vctBool2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool2Base self, mtsVctBool2Base other)"""
        return _cisstMultiTaskPython.mtsVctBool2Base_Assign(self, other)

# Register mtsVctBool2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool2Base_swigregister(mtsVctBool2Base)

def mtsVctBool2Base_ClassServices():
    r"""mtsVctBool2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool2Base_ClassServices()

class mtsVctBool2(mtsVctBool2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool2_Data_get, _cisstMultiTaskPython.mtsVctBool2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool2 self) -> mtsVctBool2
        __init__(mtsVctBool2 self, mtsVctBool2 other) -> mtsVctBool2
        __init__(mtsVctBool2 self, mtsGenericObjectProxy< vctBool2 >::value_type const & data) -> mtsVctBool2
        """
        _cisstMultiTaskPython.mtsVctBool2_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool2

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool2 self) -> mtsGenericObjectProxy< vctBool2 >::value_type
        GetData(mtsVctBool2 self) -> mtsGenericObjectProxy< vctBool2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool2 self) -> vctBool2"""
        return _cisstMultiTaskPython.mtsVctBool2_GetDataCopy(self)

# Register mtsVctBool2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool2_swigregister(mtsVctBool2)

def mtsVctBool2_ClassServices():
    r"""mtsVctBool2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool2_ClassServices()

class mtsVctBool3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool3Base self) -> mtsGenericObjectProxyBase< vctBool3 >::value_type
        GetData(mtsVctBool3Base self) -> mtsGenericObjectProxyBase< vctBool3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool3Base self, mtsVctBool3Base other)"""
        return _cisstMultiTaskPython.mtsVctBool3Base_Assign(self, other)

# Register mtsVctBool3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool3Base_swigregister(mtsVctBool3Base)

def mtsVctBool3Base_ClassServices():
    r"""mtsVctBool3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool3Base_ClassServices()

class mtsVctBool3(mtsVctBool3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool3_Data_get, _cisstMultiTaskPython.mtsVctBool3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool3 self) -> mtsVctBool3
        __init__(mtsVctBool3 self, mtsVctBool3 other) -> mtsVctBool3
        __init__(mtsVctBool3 self, mtsGenericObjectProxy< vctBool3 >::value_type const & data) -> mtsVctBool3
        """
        _cisstMultiTaskPython.mtsVctBool3_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool3

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool3 self) -> mtsGenericObjectProxy< vctBool3 >::value_type
        GetData(mtsVctBool3 self) -> mtsGenericObjectProxy< vctBool3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool3 self) -> vctBool3"""
        return _cisstMultiTaskPython.mtsVctBool3_GetDataCopy(self)

# Register mtsVctBool3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool3_swigregister(mtsVctBool3)

def mtsVctBool3_ClassServices():
    r"""mtsVctBool3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool3_ClassServices()

class mtsVctBool4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool4Base self) -> mtsGenericObjectProxyBase< vctBool4 >::value_type
        GetData(mtsVctBool4Base self) -> mtsGenericObjectProxyBase< vctBool4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool4Base self, mtsVctBool4Base other)"""
        return _cisstMultiTaskPython.mtsVctBool4Base_Assign(self, other)

# Register mtsVctBool4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool4Base_swigregister(mtsVctBool4Base)

def mtsVctBool4Base_ClassServices():
    r"""mtsVctBool4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool4Base_ClassServices()

class mtsVctBool4(mtsVctBool4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool4_Data_get, _cisstMultiTaskPython.mtsVctBool4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool4 self) -> mtsVctBool4
        __init__(mtsVctBool4 self, mtsVctBool4 other) -> mtsVctBool4
        __init__(mtsVctBool4 self, mtsGenericObjectProxy< vctBool4 >::value_type const & data) -> mtsVctBool4
        """
        _cisstMultiTaskPython.mtsVctBool4_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool4

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool4 self) -> mtsGenericObjectProxy< vctBool4 >::value_type
        GetData(mtsVctBool4 self) -> mtsGenericObjectProxy< vctBool4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool4 self) -> vctBool4"""
        return _cisstMultiTaskPython.mtsVctBool4_GetDataCopy(self)

# Register mtsVctBool4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool4_swigregister(mtsVctBool4)

def mtsVctBool4_ClassServices():
    r"""mtsVctBool4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool4_ClassServices()

class mtsVctBool5Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool5Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool5Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool5Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool5Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool5Base self) -> mtsGenericObjectProxyBase< vctBool5 >::value_type
        GetData(mtsVctBool5Base self) -> mtsGenericObjectProxyBase< vctBool5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool5Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool5Base self, mtsVctBool5Base other)"""
        return _cisstMultiTaskPython.mtsVctBool5Base_Assign(self, other)

# Register mtsVctBool5Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool5Base_swigregister(mtsVctBool5Base)

def mtsVctBool5Base_ClassServices():
    r"""mtsVctBool5Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool5Base_ClassServices()

class mtsVctBool5(mtsVctBool5Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool5_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool5_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool5_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool5_Data_get, _cisstMultiTaskPython.mtsVctBool5_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool5)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool5 self) -> mtsVctBool5
        __init__(mtsVctBool5 self, mtsVctBool5 other) -> mtsVctBool5
        __init__(mtsVctBool5 self, mtsGenericObjectProxy< vctBool5 >::value_type const & data) -> mtsVctBool5
        """
        _cisstMultiTaskPython.mtsVctBool5_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool5(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool5

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool5 self) -> mtsGenericObjectProxy< vctBool5 >::value_type
        GetData(mtsVctBool5 self) -> mtsGenericObjectProxy< vctBool5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool5_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool5 self) -> vctBool5"""
        return _cisstMultiTaskPython.mtsVctBool5_GetDataCopy(self)

# Register mtsVctBool5 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool5_swigregister(mtsVctBool5)

def mtsVctBool5_ClassServices():
    r"""mtsVctBool5_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool5_ClassServices()

class mtsVctBool6Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool6Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool6Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool6Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool6Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool6Base self) -> mtsGenericObjectProxyBase< vctBool6 >::value_type
        GetData(mtsVctBool6Base self) -> mtsGenericObjectProxyBase< vctBool6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool6Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool6Base self, mtsVctBool6Base other)"""
        return _cisstMultiTaskPython.mtsVctBool6Base_Assign(self, other)

# Register mtsVctBool6Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool6Base_swigregister(mtsVctBool6Base)

def mtsVctBool6Base_ClassServices():
    r"""mtsVctBool6Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool6Base_ClassServices()

class mtsVctBool6(mtsVctBool6Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool6_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool6_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool6_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool6_Data_get, _cisstMultiTaskPython.mtsVctBool6_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool6)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool6 self) -> mtsVctBool6
        __init__(mtsVctBool6 self, mtsVctBool6 other) -> mtsVctBool6
        __init__(mtsVctBool6 self, mtsGenericObjectProxy< vctBool6 >::value_type const & data) -> mtsVctBool6
        """
        _cisstMultiTaskPython.mtsVctBool6_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool6(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool6

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool6 self) -> mtsGenericObjectProxy< vctBool6 >::value_type
        GetData(mtsVctBool6 self) -> mtsGenericObjectProxy< vctBool6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool6_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool6 self) -> vctBool6"""
        return _cisstMultiTaskPython.mtsVctBool6_GetDataCopy(self)

# Register mtsVctBool6 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool6_swigregister(mtsVctBool6)

def mtsVctBool6_ClassServices():
    r"""mtsVctBool6_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool6_ClassServices()

class mtsVctBool7Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool7Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool7Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool7Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool7Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool7Base self) -> mtsGenericObjectProxyBase< vctBool7 >::value_type
        GetData(mtsVctBool7Base self) -> mtsGenericObjectProxyBase< vctBool7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool7Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool7Base self, mtsVctBool7Base other)"""
        return _cisstMultiTaskPython.mtsVctBool7Base_Assign(self, other)

# Register mtsVctBool7Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool7Base_swigregister(mtsVctBool7Base)

def mtsVctBool7Base_ClassServices():
    r"""mtsVctBool7Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool7Base_ClassServices()

class mtsVctBool7(mtsVctBool7Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool7 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool7_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool7_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool7_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool7_Data_get, _cisstMultiTaskPython.mtsVctBool7_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool7)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool7 self) -> mtsVctBool7
        __init__(mtsVctBool7 self, mtsVctBool7 other) -> mtsVctBool7
        __init__(mtsVctBool7 self, mtsGenericObjectProxy< vctBool7 >::value_type const & data) -> mtsVctBool7
        """
        _cisstMultiTaskPython.mtsVctBool7_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool7(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool7

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool7 self) -> mtsGenericObjectProxy< vctBool7 >::value_type
        GetData(mtsVctBool7 self) -> mtsGenericObjectProxy< vctBool7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool7_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool7 self) -> vctBool7"""
        return _cisstMultiTaskPython.mtsVctBool7_GetDataCopy(self)

# Register mtsVctBool7 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool7_swigregister(mtsVctBool7)

def mtsVctBool7_ClassServices():
    r"""mtsVctBool7_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool7_ClassServices()

class mtsVctBool8Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool8Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool8Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool8Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool8Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool8Base self) -> mtsGenericObjectProxyBase< vctBool8 >::value_type
        GetData(mtsVctBool8Base self) -> mtsGenericObjectProxyBase< vctBool8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool8Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool8Base self, mtsVctBool8Base other)"""
        return _cisstMultiTaskPython.mtsVctBool8Base_Assign(self, other)

# Register mtsVctBool8Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool8Base_swigregister(mtsVctBool8Base)

def mtsVctBool8Base_ClassServices():
    r"""mtsVctBool8Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool8Base_ClassServices()

class mtsVctBool8(mtsVctBool8Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool8_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool8_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool8_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool8_Data_get, _cisstMultiTaskPython.mtsVctBool8_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool8)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool8 self) -> mtsVctBool8
        __init__(mtsVctBool8 self, mtsVctBool8 other) -> mtsVctBool8
        __init__(mtsVctBool8 self, mtsGenericObjectProxy< vctBool8 >::value_type const & data) -> mtsVctBool8
        """
        _cisstMultiTaskPython.mtsVctBool8_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool8(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool8

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool8 self) -> mtsGenericObjectProxy< vctBool8 >::value_type
        GetData(mtsVctBool8 self) -> mtsGenericObjectProxy< vctBool8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool8_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool8 self) -> vctBool8"""
        return _cisstMultiTaskPython.mtsVctBool8_GetDataCopy(self)

# Register mtsVctBool8 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool8_swigregister(mtsVctBool8)

def mtsVctBool8_ClassServices():
    r"""mtsVctBool8_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool8_ClassServices()

class mtsVctBool9Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBool9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool9Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool9Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool9Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool9Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool9Base self) -> mtsGenericObjectProxyBase< vctBool9 >::value_type
        GetData(mtsVctBool9Base self) -> mtsGenericObjectProxyBase< vctBool9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool9Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBool9Base self, mtsVctBool9Base other)"""
        return _cisstMultiTaskPython.mtsVctBool9Base_Assign(self, other)

# Register mtsVctBool9Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool9Base_swigregister(mtsVctBool9Base)

def mtsVctBool9Base_ClassServices():
    r"""mtsVctBool9Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool9Base_ClassServices()

class mtsVctBool9(mtsVctBool9Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBool9 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool9_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBool9_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool9_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBool9_Data_get, _cisstMultiTaskPython.mtsVctBool9_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBool9)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBool9 self) -> mtsVctBool9
        __init__(mtsVctBool9 self, mtsVctBool9 other) -> mtsVctBool9
        __init__(mtsVctBool9 self, mtsGenericObjectProxy< vctBool9 >::value_type const & data) -> mtsVctBool9
        """
        _cisstMultiTaskPython.mtsVctBool9_swiginit(self, _cisstMultiTaskPython.new_mtsVctBool9(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool9

    def GetData(self, *args):
        r"""
        GetData(mtsVctBool9 self) -> mtsGenericObjectProxy< vctBool9 >::value_type
        GetData(mtsVctBool9 self) -> mtsGenericObjectProxy< vctBool9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool9_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBool9 self) -> vctBool9"""
        return _cisstMultiTaskPython.mtsVctBool9_GetDataCopy(self)

# Register mtsVctBool9 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBool9_swigregister(mtsVctBool9)

def mtsVctBool9_ClassServices():
    r"""mtsVctBool9_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBool9_ClassServices()

class mtsVct2x2Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct2x2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2x2Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct2x2Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2x2Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2x2Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct2x2Base self) -> mtsGenericObjectProxyBase< vct2x2 >::value_type
        GetData(mtsVct2x2Base self) -> mtsGenericObjectProxyBase< vct2x2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2x2Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct2x2Base self, mtsVct2x2Base other)"""
        return _cisstMultiTaskPython.mtsVct2x2Base_Assign(self, other)

# Register mtsVct2x2Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct2x2Base_swigregister(mtsVct2x2Base)

def mtsVct2x2Base_ClassServices():
    r"""mtsVct2x2Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct2x2Base_ClassServices()

class mtsVct2x2(mtsVct2x2Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct2x2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2x2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct2x2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2x2_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct2x2_Data_get, _cisstMultiTaskPython.mtsVct2x2_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct2x2)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct2x2 self) -> mtsVct2x2
        __init__(mtsVct2x2 self, mtsVct2x2 other) -> mtsVct2x2
        __init__(mtsVct2x2 self, mtsGenericObjectProxy< vct2x2 >::value_type const & data) -> mtsVct2x2
        """
        _cisstMultiTaskPython.mtsVct2x2_swiginit(self, _cisstMultiTaskPython.new_mtsVct2x2(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2x2

    def GetData(self, *args):
        r"""
        GetData(mtsVct2x2 self) -> mtsGenericObjectProxy< vct2x2 >::value_type
        GetData(mtsVct2x2 self) -> mtsGenericObjectProxy< vct2x2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2x2_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct2x2 self) -> vct2x2"""
        return _cisstMultiTaskPython.mtsVct2x2_GetDataCopy(self)

# Register mtsVct2x2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct2x2_swigregister(mtsVct2x2)

def mtsVct2x2_ClassServices():
    r"""mtsVct2x2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct2x2_ClassServices()

class mtsVct3x3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct3x3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3x3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct3x3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3x3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3x3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct3x3Base self) -> mtsGenericObjectProxyBase< vct3x3 >::value_type
        GetData(mtsVct3x3Base self) -> mtsGenericObjectProxyBase< vct3x3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3x3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct3x3Base self, mtsVct3x3Base other)"""
        return _cisstMultiTaskPython.mtsVct3x3Base_Assign(self, other)

# Register mtsVct3x3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct3x3Base_swigregister(mtsVct3x3Base)

def mtsVct3x3Base_ClassServices():
    r"""mtsVct3x3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct3x3Base_ClassServices()

class mtsVct3x3(mtsVct3x3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct3x3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3x3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct3x3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3x3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct3x3_Data_get, _cisstMultiTaskPython.mtsVct3x3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct3x3)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct3x3 self) -> mtsVct3x3
        __init__(mtsVct3x3 self, mtsVct3x3 other) -> mtsVct3x3
        __init__(mtsVct3x3 self, mtsGenericObjectProxy< vct3x3 >::value_type const & data) -> mtsVct3x3
        """
        _cisstMultiTaskPython.mtsVct3x3_swiginit(self, _cisstMultiTaskPython.new_mtsVct3x3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3x3

    def GetData(self, *args):
        r"""
        GetData(mtsVct3x3 self) -> mtsGenericObjectProxy< vct3x3 >::value_type
        GetData(mtsVct3x3 self) -> mtsGenericObjectProxy< vct3x3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3x3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct3x3 self) -> vct3x3"""
        return _cisstMultiTaskPython.mtsVct3x3_GetDataCopy(self)

# Register mtsVct3x3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct3x3_swigregister(mtsVct3x3)

def mtsVct3x3_ClassServices():
    r"""mtsVct3x3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct3x3_ClassServices()

class mtsVct4x4Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vct4x4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4x4Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct4x4Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4x4Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4x4Base

    def GetData(self, *args):
        r"""
        GetData(mtsVct4x4Base self) -> mtsGenericObjectProxyBase< vct4x4 >::value_type
        GetData(mtsVct4x4Base self) -> mtsGenericObjectProxyBase< vct4x4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4x4Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVct4x4Base self, mtsVct4x4Base other)"""
        return _cisstMultiTaskPython.mtsVct4x4Base_Assign(self, other)

# Register mtsVct4x4Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct4x4Base_swigregister(mtsVct4x4Base)

def mtsVct4x4Base_ClassServices():
    r"""mtsVct4x4Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct4x4Base_ClassServices()

class mtsVct4x4(mtsVct4x4Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vct4x4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4x4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVct4x4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4x4_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVct4x4_Data_get, _cisstMultiTaskPython.mtsVct4x4_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vct4x4)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVct4x4 self) -> mtsVct4x4
        __init__(mtsVct4x4 self, mtsVct4x4 other) -> mtsVct4x4
        __init__(mtsVct4x4 self, mtsGenericObjectProxy< vct4x4 >::value_type const & data) -> mtsVct4x4
        """
        _cisstMultiTaskPython.mtsVct4x4_swiginit(self, _cisstMultiTaskPython.new_mtsVct4x4(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4x4

    def GetData(self, *args):
        r"""
        GetData(mtsVct4x4 self) -> mtsGenericObjectProxy< vct4x4 >::value_type
        GetData(mtsVct4x4 self) -> mtsGenericObjectProxy< vct4x4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4x4_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVct4x4 self) -> vct4x4"""
        return _cisstMultiTaskPython.mtsVct4x4_GetDataCopy(self)

# Register mtsVct4x4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVct4x4_swigregister(mtsVct4x4)

def mtsVct4x4_ClassServices():
    r"""mtsVct4x4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVct4x4_ClassServices()

class mtsVctMatRot3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctMatRot3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctMatRot3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctMatRot3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctMatRot3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctMatRot3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctMatRot3Base self) -> mtsGenericObjectProxyBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type
        GetData(mtsVctMatRot3Base self) -> mtsGenericObjectProxyBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctMatRot3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctMatRot3Base self, mtsVctMatRot3Base other)"""
        return _cisstMultiTaskPython.mtsVctMatRot3Base_Assign(self, other)

# Register mtsVctMatRot3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctMatRot3Base_swigregister(mtsVctMatRot3Base)

def mtsVctMatRot3Base_ClassServices():
    r"""mtsVctMatRot3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctMatRot3Base_ClassServices()

class mtsVctMatRot3(mtsVctMatRot3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctMatRot3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctMatRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctMatRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctMatRot3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctMatRot3_Data_get, _cisstMultiTaskPython.mtsVctMatRot3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctMatrixRotation3<(double,VCT_ROW_MAJOR)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctMatRot3 self) -> mtsVctMatRot3
        __init__(mtsVctMatRot3 self, mtsVctMatRot3 other) -> mtsVctMatRot3
        __init__(mtsVctMatRot3 self, mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type const & data) -> mtsVctMatRot3
        """
        _cisstMultiTaskPython.mtsVctMatRot3_swiginit(self, _cisstMultiTaskPython.new_mtsVctMatRot3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctMatRot3

    def GetData(self, *args):
        r"""
        GetData(mtsVctMatRot3 self) -> mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type
        GetData(mtsVctMatRot3 self) -> mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctMatRot3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctMatRot3 self) -> vctMatRot3"""
        return _cisstMultiTaskPython.mtsVctMatRot3_GetDataCopy(self)

# Register mtsVctMatRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctMatRot3_swigregister(mtsVctMatRot3)

def mtsVctMatRot3_ClassServices():
    r"""mtsVctMatRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctMatRot3_ClassServices()

class mtsVctFrm3Base(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFrm3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFrm3Base_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFrm3Base_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFrm3Base_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFrm3Base

    def GetData(self, *args):
        r"""
        GetData(mtsVctFrm3Base self) -> vctFrm3
        GetData(mtsVctFrm3Base self) -> vctFrm3
        """
        return _cisstMultiTaskPython.mtsVctFrm3Base_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFrm3Base self, mtsVctFrm3Base other)"""
        return _cisstMultiTaskPython.mtsVctFrm3Base_Assign(self, other)

# Register mtsVctFrm3Base in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFrm3Base_swigregister(mtsVctFrm3Base)

def mtsVctFrm3Base_ClassServices():
    r"""mtsVctFrm3Base_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFrm3Base_ClassServices()

class mtsVctFrm3(mtsVctFrm3Base):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFrm3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFrm3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFrm3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFrm3_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFrm3_Data_get, _cisstMultiTaskPython.mtsVctFrm3_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFrameBase<(vctMatrixRotation3<(double,VCT_ROW_MAJOR)>)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFrm3 self) -> mtsVctFrm3
        __init__(mtsVctFrm3 self, mtsVctFrm3 other) -> mtsVctFrm3
        __init__(mtsVctFrm3 self, vctFrm3 data) -> mtsVctFrm3
        """
        _cisstMultiTaskPython.mtsVctFrm3_swiginit(self, _cisstMultiTaskPython.new_mtsVctFrm3(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFrm3

    def GetData(self, *args):
        r"""
        GetData(mtsVctFrm3 self) -> vctFrm3
        GetData(mtsVctFrm3 self) -> vctFrm3
        """
        return _cisstMultiTaskPython.mtsVctFrm3_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFrm3 self) -> vctFrm3"""
        return _cisstMultiTaskPython.mtsVctFrm3_GetDataCopy(self)

# Register mtsVctFrm3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFrm3_swigregister(mtsVctFrm3)

def mtsVctFrm3_ClassServices():
    r"""mtsVctFrm3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFrm3_ClassServices()

class mtsVctDoubleVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctDoubleVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctDoubleVecBase self) -> mtsGenericObjectProxyBase< vctDoubleVec >::value_type
        GetData(mtsVctDoubleVecBase self) -> mtsGenericObjectProxyBase< vctDoubleVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctDoubleVecBase self, mtsVctDoubleVecBase other)"""
        return _cisstMultiTaskPython.mtsVctDoubleVecBase_Assign(self, other)

# Register mtsVctDoubleVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctDoubleVecBase_swigregister(mtsVctDoubleVecBase)

def mtsVctDoubleVecBase_ClassServices():
    r"""mtsVctDoubleVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctDoubleVecBase_ClassServices()

class mtsVctDoubleVec(mtsVctDoubleVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctDoubleVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctDoubleVec_Data_get, _cisstMultiTaskPython.mtsVctDoubleVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctDoubleVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctDoubleVec self) -> mtsVctDoubleVec
        __init__(mtsVctDoubleVec self, mtsVctDoubleVec other) -> mtsVctDoubleVec
        __init__(mtsVctDoubleVec self, mtsGenericObjectProxy< vctDoubleVec >::value_type const & data) -> mtsVctDoubleVec
        """
        _cisstMultiTaskPython.mtsVctDoubleVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctDoubleVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctDoubleVec self) -> mtsGenericObjectProxy< vctDoubleVec >::value_type
        GetData(mtsVctDoubleVec self) -> mtsGenericObjectProxy< vctDoubleVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctDoubleVec self) -> vctDoubleVec"""
        return _cisstMultiTaskPython.mtsVctDoubleVec_GetDataCopy(self)

# Register mtsVctDoubleVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctDoubleVec_swigregister(mtsVctDoubleVec)

def mtsVctDoubleVec_ClassServices():
    r"""mtsVctDoubleVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctDoubleVec_ClassServices()

class mtsVctFloatVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloatVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloatVecBase self) -> mtsGenericObjectProxyBase< vctFloatVec >::value_type
        GetData(mtsVctFloatVecBase self) -> mtsGenericObjectProxyBase< vctFloatVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloatVecBase self, mtsVctFloatVecBase other)"""
        return _cisstMultiTaskPython.mtsVctFloatVecBase_Assign(self, other)

# Register mtsVctFloatVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloatVecBase_swigregister(mtsVctFloatVecBase)

def mtsVctFloatVecBase_ClassServices():
    r"""mtsVctFloatVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloatVecBase_ClassServices()

class mtsVctFloatVec(mtsVctFloatVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloatVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloatVec_Data_get, _cisstMultiTaskPython.mtsVctFloatVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloatVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloatVec self) -> mtsVctFloatVec
        __init__(mtsVctFloatVec self, mtsVctFloatVec other) -> mtsVctFloatVec
        __init__(mtsVctFloatVec self, mtsGenericObjectProxy< vctFloatVec >::value_type const & data) -> mtsVctFloatVec
        """
        _cisstMultiTaskPython.mtsVctFloatVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloatVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloatVec self) -> mtsGenericObjectProxy< vctFloatVec >::value_type
        GetData(mtsVctFloatVec self) -> mtsGenericObjectProxy< vctFloatVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloatVec self) -> vctFloatVec"""
        return _cisstMultiTaskPython.mtsVctFloatVec_GetDataCopy(self)

# Register mtsVctFloatVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloatVec_swigregister(mtsVctFloatVec)

def mtsVctFloatVec_ClassServices():
    r"""mtsVctFloatVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloatVec_ClassServices()

class mtsVctIntVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctIntVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctIntVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctIntVecBase self) -> mtsGenericObjectProxyBase< vctIntVec >::value_type
        GetData(mtsVctIntVecBase self) -> mtsGenericObjectProxyBase< vctIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctIntVecBase self, mtsVctIntVecBase other)"""
        return _cisstMultiTaskPython.mtsVctIntVecBase_Assign(self, other)

# Register mtsVctIntVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctIntVecBase_swigregister(mtsVctIntVecBase)

def mtsVctIntVecBase_ClassServices():
    r"""mtsVctIntVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctIntVecBase_ClassServices()

class mtsVctIntVec(mtsVctIntVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctIntVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctIntVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctIntVec_Data_get, _cisstMultiTaskPython.mtsVctIntVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctIntVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctIntVec self) -> mtsVctIntVec
        __init__(mtsVctIntVec self, mtsVctIntVec other) -> mtsVctIntVec
        __init__(mtsVctIntVec self, mtsGenericObjectProxy< vctIntVec >::value_type const & data) -> mtsVctIntVec
        """
        _cisstMultiTaskPython.mtsVctIntVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctIntVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctIntVec self) -> mtsGenericObjectProxy< vctIntVec >::value_type
        GetData(mtsVctIntVec self) -> mtsGenericObjectProxy< vctIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctIntVec self) -> vctIntVec"""
        return _cisstMultiTaskPython.mtsVctIntVec_GetDataCopy(self)

# Register mtsVctIntVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctIntVec_swigregister(mtsVctIntVec)

def mtsVctIntVec_ClassServices():
    r"""mtsVctIntVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctIntVec_ClassServices()

class mtsVctUIntVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUIntVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUIntVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUIntVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUIntVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUIntVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctUIntVecBase self) -> mtsGenericObjectProxyBase< vctUIntVec >::value_type
        GetData(mtsVctUIntVecBase self) -> mtsGenericObjectProxyBase< vctUIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUIntVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUIntVecBase self, mtsVctUIntVecBase other)"""
        return _cisstMultiTaskPython.mtsVctUIntVecBase_Assign(self, other)

# Register mtsVctUIntVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUIntVecBase_swigregister(mtsVctUIntVecBase)

def mtsVctUIntVecBase_ClassServices():
    r"""mtsVctUIntVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUIntVecBase_ClassServices()

class mtsVctUIntVec(mtsVctUIntVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUIntVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUIntVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUIntVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUIntVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUIntVec_Data_get, _cisstMultiTaskPython.mtsVctUIntVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUIntVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUIntVec self) -> mtsVctUIntVec
        __init__(mtsVctUIntVec self, mtsVctUIntVec other) -> mtsVctUIntVec
        __init__(mtsVctUIntVec self, mtsGenericObjectProxy< vctUIntVec >::value_type const & data) -> mtsVctUIntVec
        """
        _cisstMultiTaskPython.mtsVctUIntVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctUIntVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUIntVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctUIntVec self) -> mtsGenericObjectProxy< vctUIntVec >::value_type
        GetData(mtsVctUIntVec self) -> mtsGenericObjectProxy< vctUIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUIntVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUIntVec self) -> vctUIntVec"""
        return _cisstMultiTaskPython.mtsVctUIntVec_GetDataCopy(self)

# Register mtsVctUIntVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUIntVec_swigregister(mtsVctUIntVec)

def mtsVctUIntVec_ClassServices():
    r"""mtsVctUIntVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUIntVec_ClassServices()

class mtsVctCharVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctCharVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctCharVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctCharVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctCharVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctCharVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctCharVecBase self) -> mtsGenericObjectProxyBase< vctCharVec >::value_type
        GetData(mtsVctCharVecBase self) -> mtsGenericObjectProxyBase< vctCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctCharVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctCharVecBase self, mtsVctCharVecBase other)"""
        return _cisstMultiTaskPython.mtsVctCharVecBase_Assign(self, other)

# Register mtsVctCharVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctCharVecBase_swigregister(mtsVctCharVecBase)

def mtsVctCharVecBase_ClassServices():
    r"""mtsVctCharVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctCharVecBase_ClassServices()

class mtsVctCharVec(mtsVctCharVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctCharVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctCharVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctCharVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctCharVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctCharVec_Data_get, _cisstMultiTaskPython.mtsVctCharVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctCharVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctCharVec self) -> mtsVctCharVec
        __init__(mtsVctCharVec self, mtsVctCharVec other) -> mtsVctCharVec
        __init__(mtsVctCharVec self, mtsGenericObjectProxy< vctCharVec >::value_type const & data) -> mtsVctCharVec
        """
        _cisstMultiTaskPython.mtsVctCharVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctCharVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctCharVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctCharVec self) -> mtsGenericObjectProxy< vctCharVec >::value_type
        GetData(mtsVctCharVec self) -> mtsGenericObjectProxy< vctCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctCharVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctCharVec self) -> vctCharVec"""
        return _cisstMultiTaskPython.mtsVctCharVec_GetDataCopy(self)

# Register mtsVctCharVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctCharVec_swigregister(mtsVctCharVec)

def mtsVctCharVec_ClassServices():
    r"""mtsVctCharVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctCharVec_ClassServices()

class mtsVctUCharVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUCharVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUCharVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUCharVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUCharVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUCharVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctUCharVecBase self) -> mtsGenericObjectProxyBase< vctUCharVec >::value_type
        GetData(mtsVctUCharVecBase self) -> mtsGenericObjectProxyBase< vctUCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUCharVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUCharVecBase self, mtsVctUCharVecBase other)"""
        return _cisstMultiTaskPython.mtsVctUCharVecBase_Assign(self, other)

# Register mtsVctUCharVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUCharVecBase_swigregister(mtsVctUCharVecBase)

def mtsVctUCharVecBase_ClassServices():
    r"""mtsVctUCharVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUCharVecBase_ClassServices()

class mtsVctUCharVec(mtsVctUCharVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUCharVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUCharVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUCharVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUCharVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUCharVec_Data_get, _cisstMultiTaskPython.mtsVctUCharVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUCharVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUCharVec self) -> mtsVctUCharVec
        __init__(mtsVctUCharVec self, mtsVctUCharVec other) -> mtsVctUCharVec
        __init__(mtsVctUCharVec self, mtsGenericObjectProxy< vctUCharVec >::value_type const & data) -> mtsVctUCharVec
        """
        _cisstMultiTaskPython.mtsVctUCharVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctUCharVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUCharVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctUCharVec self) -> mtsGenericObjectProxy< vctUCharVec >::value_type
        GetData(mtsVctUCharVec self) -> mtsGenericObjectProxy< vctUCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUCharVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUCharVec self) -> vctUCharVec"""
        return _cisstMultiTaskPython.mtsVctUCharVec_GetDataCopy(self)

# Register mtsVctUCharVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUCharVec_swigregister(mtsVctUCharVec)

def mtsVctUCharVec_ClassServices():
    r"""mtsVctUCharVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUCharVec_ClassServices()

class mtsVctBoolVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctBoolVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBoolVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBoolVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBoolVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBoolVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctBoolVecBase self) -> mtsGenericObjectProxyBase< vctBoolVec >::value_type
        GetData(mtsVctBoolVecBase self) -> mtsGenericObjectProxyBase< vctBoolVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBoolVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctBoolVecBase self, mtsVctBoolVecBase other)"""
        return _cisstMultiTaskPython.mtsVctBoolVecBase_Assign(self, other)

# Register mtsVctBoolVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBoolVecBase_swigregister(mtsVctBoolVecBase)

def mtsVctBoolVecBase_ClassServices():
    r"""mtsVctBoolVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBoolVecBase_ClassServices()

class mtsVctBoolVec(mtsVctBoolVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctBoolVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBoolVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctBoolVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBoolVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctBoolVec_Data_get, _cisstMultiTaskPython.mtsVctBoolVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctBoolVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctBoolVec self) -> mtsVctBoolVec
        __init__(mtsVctBoolVec self, mtsVctBoolVec other) -> mtsVctBoolVec
        __init__(mtsVctBoolVec self, mtsGenericObjectProxy< vctBoolVec >::value_type const & data) -> mtsVctBoolVec
        """
        _cisstMultiTaskPython.mtsVctBoolVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctBoolVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBoolVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctBoolVec self) -> mtsGenericObjectProxy< vctBoolVec >::value_type
        GetData(mtsVctBoolVec self) -> mtsGenericObjectProxy< vctBoolVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBoolVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctBoolVec self) -> vctBoolVec"""
        return _cisstMultiTaskPython.mtsVctBoolVec_GetDataCopy(self)

# Register mtsVctBoolVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctBoolVec_swigregister(mtsVctBoolVec)

def mtsVctBoolVec_ClassServices():
    r"""mtsVctBoolVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctBoolVec_ClassServices()

class mtsVctShortVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctShortVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShortVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShortVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShortVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShortVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctShortVecBase self) -> mtsGenericObjectProxyBase< vctShortVec >::value_type
        GetData(mtsVctShortVecBase self) -> mtsGenericObjectProxyBase< vctShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShortVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctShortVecBase self, mtsVctShortVecBase other)"""
        return _cisstMultiTaskPython.mtsVctShortVecBase_Assign(self, other)

# Register mtsVctShortVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShortVecBase_swigregister(mtsVctShortVecBase)

def mtsVctShortVecBase_ClassServices():
    r"""mtsVctShortVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShortVecBase_ClassServices()

class mtsVctShortVec(mtsVctShortVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctShortVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShortVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctShortVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShortVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctShortVec_Data_get, _cisstMultiTaskPython.mtsVctShortVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctShortVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctShortVec self) -> mtsVctShortVec
        __init__(mtsVctShortVec self, mtsVctShortVec other) -> mtsVctShortVec
        __init__(mtsVctShortVec self, mtsGenericObjectProxy< vctShortVec >::value_type const & data) -> mtsVctShortVec
        """
        _cisstMultiTaskPython.mtsVctShortVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctShortVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShortVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctShortVec self) -> mtsGenericObjectProxy< vctShortVec >::value_type
        GetData(mtsVctShortVec self) -> mtsGenericObjectProxy< vctShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShortVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctShortVec self) -> vctShortVec"""
        return _cisstMultiTaskPython.mtsVctShortVec_GetDataCopy(self)

# Register mtsVctShortVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctShortVec_swigregister(mtsVctShortVec)

def mtsVctShortVec_ClassServices():
    r"""mtsVctShortVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctShortVec_ClassServices()

class mtsVctUShortVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctUShortVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShortVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShortVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShortVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShortVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShortVecBase self) -> mtsGenericObjectProxyBase< vctUShortVec >::value_type
        GetData(mtsVctUShortVecBase self) -> mtsGenericObjectProxyBase< vctUShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShortVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctUShortVecBase self, mtsVctUShortVecBase other)"""
        return _cisstMultiTaskPython.mtsVctUShortVecBase_Assign(self, other)

# Register mtsVctUShortVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShortVecBase_swigregister(mtsVctUShortVecBase)

def mtsVctUShortVecBase_ClassServices():
    r"""mtsVctUShortVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShortVecBase_ClassServices()

class mtsVctUShortVec(mtsVctUShortVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctUShortVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShortVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctUShortVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShortVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctUShortVec_Data_get, _cisstMultiTaskPython.mtsVctUShortVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctUShortVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctUShortVec self) -> mtsVctUShortVec
        __init__(mtsVctUShortVec self, mtsVctUShortVec other) -> mtsVctUShortVec
        __init__(mtsVctUShortVec self, mtsGenericObjectProxy< vctUShortVec >::value_type const & data) -> mtsVctUShortVec
        """
        _cisstMultiTaskPython.mtsVctUShortVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctUShortVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShortVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctUShortVec self) -> mtsGenericObjectProxy< vctUShortVec >::value_type
        GetData(mtsVctUShortVec self) -> mtsGenericObjectProxy< vctUShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShortVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctUShortVec self) -> vctUShortVec"""
        return _cisstMultiTaskPython.mtsVctUShortVec_GetDataCopy(self)

# Register mtsVctUShortVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctUShortVec_swigregister(mtsVctUShortVec)

def mtsVctUShortVec_ClassServices():
    r"""mtsVctUShortVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctUShortVec_ClassServices()

class mtsVctLongVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctLongVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLongVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLongVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLongVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLongVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctLongVecBase self) -> mtsGenericObjectProxyBase< vctLongVec >::value_type
        GetData(mtsVctLongVecBase self) -> mtsGenericObjectProxyBase< vctLongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLongVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctLongVecBase self, mtsVctLongVecBase other)"""
        return _cisstMultiTaskPython.mtsVctLongVecBase_Assign(self, other)

# Register mtsVctLongVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLongVecBase_swigregister(mtsVctLongVecBase)

def mtsVctLongVecBase_ClassServices():
    r"""mtsVctLongVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLongVecBase_ClassServices()

class mtsVctLongVec(mtsVctLongVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctLongVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLongVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctLongVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLongVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctLongVec_Data_get, _cisstMultiTaskPython.mtsVctLongVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctLongVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctLongVec self) -> mtsVctLongVec
        __init__(mtsVctLongVec self, mtsVctLongVec other) -> mtsVctLongVec
        __init__(mtsVctLongVec self, mtsGenericObjectProxy< vctLongVec >::value_type const & data) -> mtsVctLongVec
        """
        _cisstMultiTaskPython.mtsVctLongVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctLongVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLongVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctLongVec self) -> mtsGenericObjectProxy< vctLongVec >::value_type
        GetData(mtsVctLongVec self) -> mtsGenericObjectProxy< vctLongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLongVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctLongVec self) -> vctLongVec"""
        return _cisstMultiTaskPython.mtsVctLongVec_GetDataCopy(self)

# Register mtsVctLongVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctLongVec_swigregister(mtsVctLongVec)

def mtsVctLongVec_ClassServices():
    r"""mtsVctLongVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctLongVec_ClassServices()

class mtsVctULongVecBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctULongVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULongVecBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULongVecBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULongVecBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULongVecBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctULongVecBase self) -> mtsGenericObjectProxyBase< vctULongVec >::value_type
        GetData(mtsVctULongVecBase self) -> mtsGenericObjectProxyBase< vctULongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULongVecBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctULongVecBase self, mtsVctULongVecBase other)"""
        return _cisstMultiTaskPython.mtsVctULongVecBase_Assign(self, other)

# Register mtsVctULongVecBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULongVecBase_swigregister(mtsVctULongVecBase)

def mtsVctULongVecBase_ClassServices():
    r"""mtsVctULongVecBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULongVecBase_ClassServices()

class mtsVctULongVec(mtsVctULongVecBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctULongVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULongVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctULongVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULongVec_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctULongVec_Data_get, _cisstMultiTaskPython.mtsVctULongVec_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctULongVec)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctULongVec self) -> mtsVctULongVec
        __init__(mtsVctULongVec self, mtsVctULongVec other) -> mtsVctULongVec
        __init__(mtsVctULongVec self, mtsGenericObjectProxy< vctULongVec >::value_type const & data) -> mtsVctULongVec
        """
        _cisstMultiTaskPython.mtsVctULongVec_swiginit(self, _cisstMultiTaskPython.new_mtsVctULongVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULongVec

    def GetData(self, *args):
        r"""
        GetData(mtsVctULongVec self) -> mtsGenericObjectProxy< vctULongVec >::value_type
        GetData(mtsVctULongVec self) -> mtsGenericObjectProxy< vctULongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULongVec_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctULongVec self) -> vctULongVec"""
        return _cisstMultiTaskPython.mtsVctULongVec_GetDataCopy(self)

# Register mtsVctULongVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctULongVec_swigregister(mtsVctULongVec)

def mtsVctULongVec_ClassServices():
    r"""mtsVctULongVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctULongVec_ClassServices()

class mtsVctDoubleMatBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctDoubleMat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleMatBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleMatBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleMatBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleMatBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctDoubleMatBase self) -> mtsGenericObjectProxyBase< vctDoubleMat >::value_type
        GetData(mtsVctDoubleMatBase self) -> mtsGenericObjectProxyBase< vctDoubleMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleMatBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctDoubleMatBase self, mtsVctDoubleMatBase other)"""
        return _cisstMultiTaskPython.mtsVctDoubleMatBase_Assign(self, other)

# Register mtsVctDoubleMatBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctDoubleMatBase_swigregister(mtsVctDoubleMatBase)

def mtsVctDoubleMatBase_ClassServices():
    r"""mtsVctDoubleMatBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctDoubleMatBase_ClassServices()

class mtsVctDoubleMat(mtsVctDoubleMatBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctDoubleMat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleMat_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctDoubleMat_Data_get, _cisstMultiTaskPython.mtsVctDoubleMat_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctDoubleMat)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctDoubleMat self) -> mtsVctDoubleMat
        __init__(mtsVctDoubleMat self, mtsVctDoubleMat other) -> mtsVctDoubleMat
        __init__(mtsVctDoubleMat self, mtsGenericObjectProxy< vctDoubleMat >::value_type const & data) -> mtsVctDoubleMat
        """
        _cisstMultiTaskPython.mtsVctDoubleMat_swiginit(self, _cisstMultiTaskPython.new_mtsVctDoubleMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleMat

    def GetData(self, *args):
        r"""
        GetData(mtsVctDoubleMat self) -> mtsGenericObjectProxy< vctDoubleMat >::value_type
        GetData(mtsVctDoubleMat self) -> mtsGenericObjectProxy< vctDoubleMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleMat_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctDoubleMat self) -> vctDoubleMat"""
        return _cisstMultiTaskPython.mtsVctDoubleMat_GetDataCopy(self)

# Register mtsVctDoubleMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctDoubleMat_swigregister(mtsVctDoubleMat)

def mtsVctDoubleMat_ClassServices():
    r"""mtsVctDoubleMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctDoubleMat_ClassServices()

class mtsVctFloatMatBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctFloatMat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatMatBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatMatBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatMatBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatMatBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloatMatBase self) -> mtsGenericObjectProxyBase< vctFloatMat >::value_type
        GetData(mtsVctFloatMatBase self) -> mtsGenericObjectProxyBase< vctFloatMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatMatBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctFloatMatBase self, mtsVctFloatMatBase other)"""
        return _cisstMultiTaskPython.mtsVctFloatMatBase_Assign(self, other)

# Register mtsVctFloatMatBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloatMatBase_swigregister(mtsVctFloatMatBase)

def mtsVctFloatMatBase_ClassServices():
    r"""mtsVctFloatMatBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloatMatBase_ClassServices()

class mtsVctFloatMat(mtsVctFloatMatBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctFloatMat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatMat_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctFloatMat_Data_get, _cisstMultiTaskPython.mtsVctFloatMat_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctFloatMat)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctFloatMat self) -> mtsVctFloatMat
        __init__(mtsVctFloatMat self, mtsVctFloatMat other) -> mtsVctFloatMat
        __init__(mtsVctFloatMat self, mtsGenericObjectProxy< vctFloatMat >::value_type const & data) -> mtsVctFloatMat
        """
        _cisstMultiTaskPython.mtsVctFloatMat_swiginit(self, _cisstMultiTaskPython.new_mtsVctFloatMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatMat

    def GetData(self, *args):
        r"""
        GetData(mtsVctFloatMat self) -> mtsGenericObjectProxy< vctFloatMat >::value_type
        GetData(mtsVctFloatMat self) -> mtsGenericObjectProxy< vctFloatMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatMat_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctFloatMat self) -> vctFloatMat"""
        return _cisstMultiTaskPython.mtsVctFloatMat_GetDataCopy(self)

# Register mtsVctFloatMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctFloatMat_swigregister(mtsVctFloatMat)

def mtsVctFloatMat_ClassServices():
    r"""mtsVctFloatMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctFloatMat_ClassServices()

class mtsVctIntMatBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< vctIntMat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntMatBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctIntMatBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntMatBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntMatBase

    def GetData(self, *args):
        r"""
        GetData(mtsVctIntMatBase self) -> mtsGenericObjectProxyBase< vctIntMat >::value_type
        GetData(mtsVctIntMatBase self) -> mtsGenericObjectProxyBase< vctIntMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntMatBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsVctIntMatBase self, mtsVctIntMatBase other)"""
        return _cisstMultiTaskPython.mtsVctIntMatBase_Assign(self, other)

# Register mtsVctIntMatBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctIntMatBase_swigregister(mtsVctIntMatBase)

def mtsVctIntMatBase_ClassServices():
    r"""mtsVctIntMatBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctIntMatBase_ClassServices()

class mtsVctIntMat(mtsVctIntMatBase):
    r"""Proxy of C++ mtsGenericObjectProxy< vctIntMat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsVctIntMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntMat_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsVctIntMat_Data_get, _cisstMultiTaskPython.mtsVctIntMat_Data_set, doc=r"""Data : mtsGenericObjectProxy<(vctIntMat)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsVctIntMat self) -> mtsVctIntMat
        __init__(mtsVctIntMat self, mtsVctIntMat other) -> mtsVctIntMat
        __init__(mtsVctIntMat self, mtsGenericObjectProxy< vctIntMat >::value_type const & data) -> mtsVctIntMat
        """
        _cisstMultiTaskPython.mtsVctIntMat_swiginit(self, _cisstMultiTaskPython.new_mtsVctIntMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntMat

    def GetData(self, *args):
        r"""
        GetData(mtsVctIntMat self) -> mtsGenericObjectProxy< vctIntMat >::value_type
        GetData(mtsVctIntMat self) -> mtsGenericObjectProxy< vctIntMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntMat_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsVctIntMat self) -> vctIntMat"""
        return _cisstMultiTaskPython.mtsVctIntMat_GetDataCopy(self)

# Register mtsVctIntMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsVctIntMat_swigregister(mtsVctIntMat)

def mtsVctIntMat_ClassServices():
    r"""mtsVctIntMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsVctIntMat_ClassServices()

class mtsDescriptionComponent(object):
    r"""Proxy of C++ mtsDescriptionComponent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponent
    ProcessName = property(_cisstMultiTaskPython.mtsDescriptionComponent_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionComponent_ProcessName_set, doc=r"""ProcessName : std::string""")
    ComponentName = property(_cisstMultiTaskPython.mtsDescriptionComponent_ComponentName_get, _cisstMultiTaskPython.mtsDescriptionComponent_ComponentName_set, doc=r"""ComponentName : std::string""")
    ClassName = property(_cisstMultiTaskPython.mtsDescriptionComponent_ClassName_get, _cisstMultiTaskPython.mtsDescriptionComponent_ClassName_set, doc=r"""ClassName : std::string""")
    ConstructorArgSerialized = property(_cisstMultiTaskPython.mtsDescriptionComponent_ConstructorArgSerialized_get, _cisstMultiTaskPython.mtsDescriptionComponent_ConstructorArgSerialized_set, doc=r"""ConstructorArgSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionComponent self) -> mtsDescriptionComponent
        __init__(mtsDescriptionComponent self, mtsDescriptionComponent other) -> mtsDescriptionComponent
        __init__(mtsDescriptionComponent self, std::string const & processName, std::string const & componentName) -> mtsDescriptionComponent
        __init__(mtsDescriptionComponent self, std::string const & newProcessName, std::string const & newComponentName, std::string const & newClassName, std::string const & newConstructorArgSerialized) -> mtsDescriptionComponent
        """
        _cisstMultiTaskPython.mtsDescriptionComponent_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionComponent(*args))

    def Copy(self, source):
        r"""Copy(mtsDescriptionComponent self, mtsDescriptionComponent source)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsDescriptionComponent self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsDescriptionComponent self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsDescriptionComponent self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsDescriptionComponent self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsDescriptionComponent self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsDescriptionComponent self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponent___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsDescriptionComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsDescriptionComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsDescriptionComponent self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsDescriptionComponent self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsDescriptionComponent self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsDescriptionComponent self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_DeSerializeTextJSON(self, jsonValue)

# Register mtsDescriptionComponent in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionComponent_swigregister(mtsDescriptionComponent)

class mtsDescriptionComponentClass(object):
    r"""Proxy of C++ mtsDescriptionComponentClass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClass
    ClassName = property(_cisstMultiTaskPython.mtsDescriptionComponentClass_ClassName_get, _cisstMultiTaskPython.mtsDescriptionComponentClass_ClassName_set, doc=r"""ClassName : std::string""")
    ArgType = property(_cisstMultiTaskPython.mtsDescriptionComponentClass_ArgType_get, _cisstMultiTaskPython.mtsDescriptionComponentClass_ArgType_set, doc=r"""ArgType : std::string""")
    ArgTypeId = property(_cisstMultiTaskPython.mtsDescriptionComponentClass_ArgTypeId_get, _cisstMultiTaskPython.mtsDescriptionComponentClass_ArgTypeId_set, doc=r"""ArgTypeId : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionComponentClass self) -> mtsDescriptionComponentClass
        __init__(mtsDescriptionComponentClass self, mtsDescriptionComponentClass other) -> mtsDescriptionComponentClass
        __init__(mtsDescriptionComponentClass self, std::string const & newClassName, std::string const & newArgType, std::string const & newArgTypeId) -> mtsDescriptionComponentClass
        """
        _cisstMultiTaskPython.mtsDescriptionComponentClass_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionComponentClass(*args))

    def Copy(self, source):
        r"""Copy(mtsDescriptionComponentClass self, mtsDescriptionComponentClass source)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsDescriptionComponentClass self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsDescriptionComponentClass self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsDescriptionComponentClass self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsDescriptionComponentClass self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsDescriptionComponentClass self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsDescriptionComponentClass self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsDescriptionComponentClass self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsDescriptionComponentClass self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsDescriptionComponentClass self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsDescriptionComponentClass self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsDescriptionComponentClass self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsDescriptionComponentClass self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_DeSerializeTextJSON(self, jsonValue)

# Register mtsDescriptionComponentClass in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionComponentClass_swigregister(mtsDescriptionComponentClass)

class mtsDescriptionInterface(object):
    r"""Proxy of C++ mtsDescriptionInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionInterface
    ProcessName = property(_cisstMultiTaskPython.mtsDescriptionInterface_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionInterface_ProcessName_set, doc=r"""ProcessName : std::string""")
    ComponentName = property(_cisstMultiTaskPython.mtsDescriptionInterface_ComponentName_get, _cisstMultiTaskPython.mtsDescriptionInterface_ComponentName_set, doc=r"""ComponentName : std::string""")
    InterfaceRequiredNames = property(_cisstMultiTaskPython.mtsDescriptionInterface_InterfaceRequiredNames_get, _cisstMultiTaskPython.mtsDescriptionInterface_InterfaceRequiredNames_set, doc=r"""InterfaceRequiredNames : std::vector<(std::string,std::allocator<(std::string)>)>""")
    InterfaceProvidedNames = property(_cisstMultiTaskPython.mtsDescriptionInterface_InterfaceProvidedNames_get, _cisstMultiTaskPython.mtsDescriptionInterface_InterfaceProvidedNames_set, doc=r"""InterfaceProvidedNames : std::vector<(std::string,std::allocator<(std::string)>)>""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionInterface self) -> mtsDescriptionInterface
        __init__(mtsDescriptionInterface self, mtsDescriptionInterface other) -> mtsDescriptionInterface
        __init__(mtsDescriptionInterface self, std::string const & newProcessName, std::string const & newComponentName, mtsStringVector newInterfaceRequiredNames, mtsStringVector newInterfaceProvidedNames) -> mtsDescriptionInterface
        """
        _cisstMultiTaskPython.mtsDescriptionInterface_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionInterface(*args))

    def Copy(self, source):
        r"""Copy(mtsDescriptionInterface self, mtsDescriptionInterface source)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsDescriptionInterface self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsDescriptionInterface self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsDescriptionInterface self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsDescriptionInterface self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsDescriptionInterface self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsDescriptionInterface self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterface___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsDescriptionInterface self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsDescriptionInterface self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsDescriptionInterface self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsDescriptionInterface self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsDescriptionInterface self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsDescriptionInterface self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_DeSerializeTextJSON(self, jsonValue)

# Register mtsDescriptionInterface in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionInterface_swigregister(mtsDescriptionInterface)

class mtsDescriptionInterfaceFullName(object):
    r"""Proxy of C++ mtsDescriptionInterfaceFullName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionInterfaceFullName
    ProcessName = property(_cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ProcessName_set, doc=r"""ProcessName : std::string""")
    ComponentName = property(_cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ComponentName_get, _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ComponentName_set, doc=r"""ComponentName : std::string""")
    InterfaceName = property(_cisstMultiTaskPython.mtsDescriptionInterfaceFullName_InterfaceName_get, _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_InterfaceName_set, doc=r"""InterfaceName : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionInterfaceFullName self) -> mtsDescriptionInterfaceFullName
        __init__(mtsDescriptionInterfaceFullName self, mtsDescriptionInterfaceFullName other) -> mtsDescriptionInterfaceFullName
        __init__(mtsDescriptionInterfaceFullName self, std::string const & newProcessName, std::string const & newComponentName, std::string const & newInterfaceName) -> mtsDescriptionInterfaceFullName
        """
        _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionInterfaceFullName(*args))

    def Copy(self, source):
        r"""Copy(mtsDescriptionInterfaceFullName self, mtsDescriptionInterfaceFullName source)"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsDescriptionInterfaceFullName self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsDescriptionInterfaceFullName self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsDescriptionInterfaceFullName self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsDescriptionInterfaceFullName self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsDescriptionInterfaceFullName self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsDescriptionInterfaceFullName self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsDescriptionInterfaceFullName self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsDescriptionInterfaceFullName self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsDescriptionInterfaceFullName self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsDescriptionInterfaceFullName self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsDescriptionInterfaceFullName self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsDescriptionInterfaceFullName self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionInterfaceFullName_DeSerializeTextJSON(self, jsonValue)

# Register mtsDescriptionInterfaceFullName in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionInterfaceFullName_swigregister(mtsDescriptionInterfaceFullName)

class mtsDescriptionConnection(object):
    r"""Proxy of C++ mtsDescriptionConnection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnection
    Client = property(_cisstMultiTaskPython.mtsDescriptionConnection_Client_get, _cisstMultiTaskPython.mtsDescriptionConnection_Client_set, doc=r"""Client : mtsDescriptionInterfaceFullName""")
    Server = property(_cisstMultiTaskPython.mtsDescriptionConnection_Server_get, _cisstMultiTaskPython.mtsDescriptionConnection_Server_set, doc=r"""Server : mtsDescriptionInterfaceFullName""")
    ConnectionID = property(_cisstMultiTaskPython.mtsDescriptionConnection_ConnectionID_get, _cisstMultiTaskPython.mtsDescriptionConnection_ConnectionID_set, doc=r"""ConnectionID : ConnectionIDType""")

    def Init(self):
        r"""Init(mtsDescriptionConnection self)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_Init(self)

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionConnection self) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, mtsDescriptionConnection other) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, std::string const & serverProcessName, std::string const & serverComponentName, std::string const & serverInterfaceProvidedName, ConnectionIDType const connectionId=InvalidConnectionID) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, mtsDescriptionInterfaceFullName newClient, mtsDescriptionInterfaceFullName newServer, ConnectionIDType const & newConnectionID) -> mtsDescriptionConnection
        """
        _cisstMultiTaskPython.mtsDescriptionConnection_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionConnection(*args))

    def Copy(self, source):
        r"""Copy(mtsDescriptionConnection self, mtsDescriptionConnection source)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsDescriptionConnection self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsDescriptionConnection self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsDescriptionConnection self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsDescriptionConnection self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsDescriptionConnection self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsDescriptionConnection self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionConnection___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsDescriptionConnection self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsDescriptionConnection self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsDescriptionConnection self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsDescriptionConnection self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsDescriptionConnection self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsDescriptionConnection self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_DeSerializeTextJSON(self, jsonValue)

# Register mtsDescriptionConnection in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionConnection_swigregister(mtsDescriptionConnection)

class mtsComponentStatusControl(object):
    r"""Proxy of C++ mtsComponentStatusControl class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStatusControl
    COMPONENT_START = _cisstMultiTaskPython.mtsComponentStatusControl_COMPONENT_START
    
    COMPONENT_STOP = _cisstMultiTaskPython.mtsComponentStatusControl_COMPONENT_STOP
    
    COMPONENT_RESUME = _cisstMultiTaskPython.mtsComponentStatusControl_COMPONENT_RESUME
    

    @staticmethod
    def ComponentStatusCommandToString(value):
        r"""ComponentStatusCommandToString(mtsComponentStatusControl::ComponentStatusCommand const & value) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandToString(value)

    @staticmethod
    def ComponentStatusCommandFromString(value):
        r"""ComponentStatusCommandFromString(std::string const & value) -> mtsComponentStatusControl::ComponentStatusCommand"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandFromString(value)

    @staticmethod
    def ComponentStatusCommandVectorInt():
        r"""ComponentStatusCommandVectorInt() -> std::vector< int,std::allocator< int > > const &"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorInt()

    @staticmethod
    def ComponentStatusCommandVectorString():
        r"""ComponentStatusCommandVectorString() -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorString()
    ProcessName = property(_cisstMultiTaskPython.mtsComponentStatusControl_ProcessName_get, _cisstMultiTaskPython.mtsComponentStatusControl_ProcessName_set, doc=r"""ProcessName : std::string""")
    ComponentName = property(_cisstMultiTaskPython.mtsComponentStatusControl_ComponentName_get, _cisstMultiTaskPython.mtsComponentStatusControl_ComponentName_set, doc=r"""ComponentName : std::string""")
    DelayInSecond = property(_cisstMultiTaskPython.mtsComponentStatusControl_DelayInSecond_get, _cisstMultiTaskPython.mtsComponentStatusControl_DelayInSecond_set, doc=r"""DelayInSecond : double""")
    Command = property(_cisstMultiTaskPython.mtsComponentStatusControl_Command_get, _cisstMultiTaskPython.mtsComponentStatusControl_Command_set, doc=r"""Command : mtsComponentStatusControl::ComponentStatusCommand""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentStatusControl self) -> mtsComponentStatusControl
        __init__(mtsComponentStatusControl self, mtsComponentStatusControl other) -> mtsComponentStatusControl
        __init__(mtsComponentStatusControl self, std::string const & newProcessName, std::string const & newComponentName, double const & newDelayInSecond, mtsComponentStatusControl::ComponentStatusCommand const & newCommand) -> mtsComponentStatusControl
        """
        _cisstMultiTaskPython.mtsComponentStatusControl_swiginit(self, _cisstMultiTaskPython.new_mtsComponentStatusControl(*args))

    def Copy(self, source):
        r"""Copy(mtsComponentStatusControl self, mtsComponentStatusControl source)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsComponentStatusControl self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsComponentStatusControl self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsComponentStatusControl self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsComponentStatusControl self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsComponentStatusControl self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsComponentStatusControl self) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStatusControl___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsComponentStatusControl self) -> bool"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsComponentStatusControl self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsComponentStatusControl self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsComponentStatusControl self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsComponentStatusControl self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsComponentStatusControl self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_DeSerializeTextJSON(self, jsonValue)

# Register mtsComponentStatusControl in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentStatusControl_swigregister(mtsComponentStatusControl)

def mtsComponentStatusControl_ComponentStatusCommandToString(value):
    r"""mtsComponentStatusControl_ComponentStatusCommandToString(mtsComponentStatusControl::ComponentStatusCommand const & value) -> std::string"""
    return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandToString(value)

def mtsComponentStatusControl_ComponentStatusCommandFromString(value):
    r"""mtsComponentStatusControl_ComponentStatusCommandFromString(std::string const & value) -> mtsComponentStatusControl::ComponentStatusCommand"""
    return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandFromString(value)

def mtsComponentStatusControl_ComponentStatusCommandVectorInt():
    r"""mtsComponentStatusControl_ComponentStatusCommandVectorInt() -> std::vector< int,std::allocator< int > > const &"""
    return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorInt()

def mtsComponentStatusControl_ComponentStatusCommandVectorString():
    r"""mtsComponentStatusControl_ComponentStatusCommandVectorString() -> mtsStringVector"""
    return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorString()


def cmnDataHumanReadable_mtsComponentStatusControl_ComponentStatusCommand(data):
    r"""cmnDataHumanReadable_mtsComponentStatusControl_ComponentStatusCommand(mtsComponentStatusControl::ComponentStatusCommand const & data) -> std::string"""
    return _cisstMultiTaskPython.cmnDataHumanReadable_mtsComponentStatusControl_ComponentStatusCommand(data)
class mtsComponentStateChange(object):
    r"""Proxy of C++ mtsComponentStateChange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStateChange
    ProcessName = property(_cisstMultiTaskPython.mtsComponentStateChange_ProcessName_get, _cisstMultiTaskPython.mtsComponentStateChange_ProcessName_set, doc=r"""ProcessName : std::string""")
    ComponentName = property(_cisstMultiTaskPython.mtsComponentStateChange_ComponentName_get, _cisstMultiTaskPython.mtsComponentStateChange_ComponentName_set, doc=r"""ComponentName : std::string""")
    NewState = property(_cisstMultiTaskPython.mtsComponentStateChange_NewState_get, _cisstMultiTaskPython.mtsComponentStateChange_NewState_set, doc=r"""NewState : mtsComponentState""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentStateChange self) -> mtsComponentStateChange
        __init__(mtsComponentStateChange self, mtsComponentStateChange other) -> mtsComponentStateChange
        __init__(mtsComponentStateChange self, std::string const & newProcessName, std::string const & newComponentName, mtsComponentState newNewState) -> mtsComponentStateChange
        """
        _cisstMultiTaskPython.mtsComponentStateChange_swiginit(self, _cisstMultiTaskPython.new_mtsComponentStateChange(*args))

    def Copy(self, source):
        r"""Copy(mtsComponentStateChange self, mtsComponentStateChange source)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsComponentStateChange self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsComponentStateChange self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsComponentStateChange self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsComponentStateChange self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsComponentStateChange self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsComponentStateChange_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsComponentStateChange self) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStateChange___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsComponentStateChange self) -> bool"""
        return _cisstMultiTaskPython.mtsComponentStateChange_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsComponentStateChange self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponentStateChange_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsComponentStateChange self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsComponentStateChange_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsComponentStateChange self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStateChange_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsComponentStateChange self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsComponentStateChange self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_DeSerializeTextJSON(self, jsonValue)

# Register mtsComponentStateChange in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentStateChange_swigregister(mtsComponentStateChange)

class mtsDescriptionLoadLibrary(object):
    r"""Proxy of C++ mtsDescriptionLoadLibrary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionLoadLibrary
    ProcessName = property(_cisstMultiTaskPython.mtsDescriptionLoadLibrary_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ProcessName_set, doc=r"""ProcessName : std::string""")
    LibraryName = property(_cisstMultiTaskPython.mtsDescriptionLoadLibrary_LibraryName_get, _cisstMultiTaskPython.mtsDescriptionLoadLibrary_LibraryName_set, doc=r"""LibraryName : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionLoadLibrary self) -> mtsDescriptionLoadLibrary
        __init__(mtsDescriptionLoadLibrary self, mtsDescriptionLoadLibrary other) -> mtsDescriptionLoadLibrary
        __init__(mtsDescriptionLoadLibrary self, std::string const & newProcessName, std::string const & newLibraryName) -> mtsDescriptionLoadLibrary
        """
        _cisstMultiTaskPython.mtsDescriptionLoadLibrary_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionLoadLibrary(*args))

    def Copy(self, source):
        r"""Copy(mtsDescriptionLoadLibrary self, mtsDescriptionLoadLibrary source)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsDescriptionLoadLibrary self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsDescriptionLoadLibrary self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsDescriptionLoadLibrary self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsDescriptionLoadLibrary self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsDescriptionLoadLibrary self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsDescriptionLoadLibrary self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsDescriptionLoadLibrary self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsDescriptionLoadLibrary self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsDescriptionLoadLibrary self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsDescriptionLoadLibrary self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsDescriptionLoadLibrary self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsDescriptionLoadLibrary self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_DeSerializeTextJSON(self, jsonValue)

# Register mtsDescriptionLoadLibrary in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionLoadLibrary_swigregister(mtsDescriptionLoadLibrary)

class mtsEndUserInterfaceArg(object):
    r"""Proxy of C++ mtsEndUserInterfaceArg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEndUserInterfaceArg
    OriginalInterface = property(_cisstMultiTaskPython.mtsEndUserInterfaceArg_OriginalInterface_get, _cisstMultiTaskPython.mtsEndUserInterfaceArg_OriginalInterface_set, doc=r"""OriginalInterface : size_t""")
    UserName = property(_cisstMultiTaskPython.mtsEndUserInterfaceArg_UserName_get, _cisstMultiTaskPython.mtsEndUserInterfaceArg_UserName_set, doc=r"""UserName : std::string""")
    EndUserInterface = property(_cisstMultiTaskPython.mtsEndUserInterfaceArg_EndUserInterface_get, _cisstMultiTaskPython.mtsEndUserInterfaceArg_EndUserInterface_set, doc=r"""EndUserInterface : size_t""")

    def __init__(self, *args):
        r"""
        __init__(mtsEndUserInterfaceArg self) -> mtsEndUserInterfaceArg
        __init__(mtsEndUserInterfaceArg self, mtsEndUserInterfaceArg other) -> mtsEndUserInterfaceArg
        __init__(mtsEndUserInterfaceArg self, size_t const & newOriginalInterface, std::string const & newUserName, size_t const & newEndUserInterface) -> mtsEndUserInterfaceArg
        """
        _cisstMultiTaskPython.mtsEndUserInterfaceArg_swiginit(self, _cisstMultiTaskPython.new_mtsEndUserInterfaceArg(*args))

    def Copy(self, source):
        r"""Copy(mtsEndUserInterfaceArg self, mtsEndUserInterfaceArg source)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsEndUserInterfaceArg self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsEndUserInterfaceArg self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsEndUserInterfaceArg self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsEndUserInterfaceArg self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsEndUserInterfaceArg self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsEndUserInterfaceArg self) -> std::string"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsEndUserInterfaceArg self) -> bool"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsEndUserInterfaceArg self) -> size_t"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsEndUserInterfaceArg self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsEndUserInterfaceArg self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsEndUserInterfaceArg self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsEndUserInterfaceArg self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_DeSerializeTextJSON(self, jsonValue)

# Register mtsEndUserInterfaceArg in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEndUserInterfaceArg_swigregister(mtsEndUserInterfaceArg)

class mtsMessage(object):
    r"""Proxy of C++ mtsMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsMessage self) -> mtsMessage
        __init__(mtsMessage self, mtsMessage other) -> mtsMessage
        """
        _cisstMultiTaskPython.mtsMessage_swiginit(self, _cisstMultiTaskPython.new_mtsMessage(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsMessage
    Message = property(_cisstMultiTaskPython.mtsMessage_Message_get, _cisstMultiTaskPython.mtsMessage_Message_set, doc=r"""Message : std::string""")
    Counter = property(_cisstMultiTaskPython.mtsMessage_Counter_get, _cisstMultiTaskPython.mtsMessage_Counter_set, doc=r"""Counter : size_t""")
    Timestamp = property(_cisstMultiTaskPython.mtsMessage_Timestamp_get, _cisstMultiTaskPython.mtsMessage_Timestamp_set, doc=r"""Timestamp : double""")

    def GetTimestamp(self, placeHolder):
        r"""GetTimestamp(mtsMessage self, double & placeHolder)"""
        return _cisstMultiTaskPython.mtsMessage_GetTimestamp(self, placeHolder)

    def SetTimestamp(self, newValue):
        r"""SetTimestamp(mtsMessage self, double const & newValue)"""
        return _cisstMultiTaskPython.mtsMessage_SetTimestamp(self, newValue)

    def SetMessage(self, message):
        r"""SetMessage(mtsMessage self, std::string const & message)"""
        return _cisstMultiTaskPython.mtsMessage_SetMessage(self, message)

    def Copy(self, source):
        r"""Copy(mtsMessage self, mtsMessage source)"""
        return _cisstMultiTaskPython.mtsMessage_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsMessage self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsMessage_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsMessage self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsMessage_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsMessage self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsMessage_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsMessage self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsMessage_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsMessage self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsMessage_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsMessage self) -> std::string"""
        return _cisstMultiTaskPython.mtsMessage___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsMessage self) -> bool"""
        return _cisstMultiTaskPython.mtsMessage_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsMessage self) -> size_t"""
        return _cisstMultiTaskPython.mtsMessage_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsMessage self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsMessage_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsMessage self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsMessage_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsMessage self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsMessage_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsMessage self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsMessage_DeSerializeTextJSON(self, jsonValue)

# Register mtsMessage in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsMessage_swigregister(mtsMessage)

class mtsTaskConstructorArg(mtsGenericObject):
    r"""Proxy of C++ mtsTaskConstructorArg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskConstructorArg
    Name = property(_cisstMultiTaskPython.mtsTaskConstructorArg_Name_get, _cisstMultiTaskPython.mtsTaskConstructorArg_Name_set, doc=r"""Name : std::string""")
    StateTableSize = property(_cisstMultiTaskPython.mtsTaskConstructorArg_StateTableSize_get, _cisstMultiTaskPython.mtsTaskConstructorArg_StateTableSize_set, doc=r"""StateTableSize : unsigned int""")
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskConstructorArg_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskConstructorArg_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsTaskConstructorArg self) -> mtsTaskConstructorArg
        __init__(mtsTaskConstructorArg self, mtsTaskConstructorArg other) -> mtsTaskConstructorArg
        __init__(mtsTaskConstructorArg self, std::string const & newName, unsigned int const & newStateTableSize) -> mtsTaskConstructorArg
        """
        _cisstMultiTaskPython.mtsTaskConstructorArg_swiginit(self, _cisstMultiTaskPython.new_mtsTaskConstructorArg(*args))

    def Copy(self, source):
        r"""Copy(mtsTaskConstructorArg self, mtsTaskConstructorArg source)"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsTaskConstructorArg self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsTaskConstructorArg self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsTaskConstructorArg self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsTaskConstructorArg self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsTaskConstructorArg self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsTaskConstructorArg self) -> std::string"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg___str__(self)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsTaskConstructorArg self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsTaskConstructorArg_ScalarDescription(self, *args)

# Register mtsTaskConstructorArg in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskConstructorArg_swigregister(mtsTaskConstructorArg)

def mtsTaskConstructorArg_ClassServices():
    r"""mtsTaskConstructorArg_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskConstructorArg_ClassServices()

class mtsTaskContinuousConstructorArg(mtsGenericObject):
    r"""Proxy of C++ mtsTaskContinuousConstructorArg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskContinuousConstructorArg
    Name = property(_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_Name_get, _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_Name_set, doc=r"""Name : std::string""")
    StateTableSize = property(_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_StateTableSize_get, _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_StateTableSize_set, doc=r"""StateTableSize : unsigned int""")
    NewThread = property(_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_NewThread_get, _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_NewThread_set, doc=r"""NewThread : bool""")
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsTaskContinuousConstructorArg self) -> mtsTaskContinuousConstructorArg
        __init__(mtsTaskContinuousConstructorArg self, mtsTaskContinuousConstructorArg other) -> mtsTaskContinuousConstructorArg
        __init__(mtsTaskContinuousConstructorArg self, std::string const & newName, unsigned int const & newStateTableSize, bool const & newNewThread) -> mtsTaskContinuousConstructorArg
        """
        _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_swiginit(self, _cisstMultiTaskPython.new_mtsTaskContinuousConstructorArg(*args))

    def Copy(self, source):
        r"""Copy(mtsTaskContinuousConstructorArg self, mtsTaskContinuousConstructorArg source)"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsTaskContinuousConstructorArg self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsTaskContinuousConstructorArg self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsTaskContinuousConstructorArg self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsTaskContinuousConstructorArg self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsTaskContinuousConstructorArg self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsTaskContinuousConstructorArg self) -> std::string"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg___str__(self)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsTaskContinuousConstructorArg self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_ScalarDescription(self, *args)

# Register mtsTaskContinuousConstructorArg in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_swigregister(mtsTaskContinuousConstructorArg)

def mtsTaskContinuousConstructorArg_ClassServices():
    r"""mtsTaskContinuousConstructorArg_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_ClassServices()

class mtsTaskPeriodicConstructorArg(mtsGenericObject):
    r"""Proxy of C++ mtsTaskPeriodicConstructorArg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskPeriodicConstructorArg
    Name = property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Name_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Name_set, doc=r"""Name : std::string""")
    Period = property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Period_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Period_set, doc=r"""Period : double""")
    IsHardRealTime = property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_IsHardRealTime_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_IsHardRealTime_set, doc=r"""IsHardRealTime : bool""")
    StateTableSize = property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_StateTableSize_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_StateTableSize_set, doc=r"""StateTableSize : unsigned int""")
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsTaskPeriodicConstructorArg self) -> mtsTaskPeriodicConstructorArg
        __init__(mtsTaskPeriodicConstructorArg self, mtsTaskPeriodicConstructorArg other) -> mtsTaskPeriodicConstructorArg
        __init__(mtsTaskPeriodicConstructorArg self, std::string const & newName, double const & newPeriod, bool const & newIsHardRealTime, unsigned int const & newStateTableSize) -> mtsTaskPeriodicConstructorArg
        """
        _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_swiginit(self, _cisstMultiTaskPython.new_mtsTaskPeriodicConstructorArg(*args))

    def Copy(self, source):
        r"""Copy(mtsTaskPeriodicConstructorArg self, mtsTaskPeriodicConstructorArg source)"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsTaskPeriodicConstructorArg self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsTaskPeriodicConstructorArg self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsTaskPeriodicConstructorArg self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsTaskPeriodicConstructorArg self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsTaskPeriodicConstructorArg self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsTaskPeriodicConstructorArg self) -> std::string"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg___str__(self)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsTaskPeriodicConstructorArg self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_ScalarDescription(self, *args)

# Register mtsTaskPeriodicConstructorArg in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_swigregister(mtsTaskPeriodicConstructorArg)

def mtsTaskPeriodicConstructorArg_ClassServices():
    r"""mtsTaskPeriodicConstructorArg_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_ClassServices()

class mtsDescriptionConnectionVec(object):
    r"""Proxy of C++ std::vector< mtsDescriptionConnection > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsDescriptionConnectionVec self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsDescriptionConnectionVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsDescriptionConnectionVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___bool__(self)

    def __len__(self):
        r"""__len__(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j) -> mtsDescriptionConnectionVec"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j)
        __setslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j, mtsDescriptionConnectionVec v)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i)
        __delitem__(mtsDescriptionConnectionVec self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsDescriptionConnectionVec self, PySliceObject * slice) -> mtsDescriptionConnectionVec
        __getitem__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i) -> mtsDescriptionConnection
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsDescriptionConnectionVec self, PySliceObject * slice, mtsDescriptionConnectionVec v)
        __setitem__(mtsDescriptionConnectionVec self, PySliceObject * slice)
        __setitem__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, mtsDescriptionConnection x)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsDescriptionConnectionVec self) -> mtsDescriptionConnection"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_pop(self)

    def append(self, x):
        r"""append(mtsDescriptionConnectionVec self, mtsDescriptionConnection x)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_append(self, x)

    def empty(self):
        r"""empty(mtsDescriptionConnectionVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_empty(self)

    def size(self):
        r"""size(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_size(self)

    def swap(self, v):
        r"""swap(mtsDescriptionConnectionVec self, mtsDescriptionConnectionVec v)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_swap(self, v)

    def begin(self):
        r"""begin(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_begin(self)

    def end(self):
        r"""end(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_end(self)

    def rbegin(self):
        r"""rbegin(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_rbegin(self)

    def rend(self):
        r"""rend(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_rend(self)

    def clear(self):
        r"""clear(mtsDescriptionConnectionVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::allocator_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsDescriptionConnectionVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator pos) -> std::vector< mtsDescriptionConnection >::iterator
        erase(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator first, std::vector< mtsDescriptionConnection >::iterator last) -> std::vector< mtsDescriptionConnection >::iterator
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionConnectionVec self) -> mtsDescriptionConnectionVec
        __init__(mtsDescriptionConnectionVec self, mtsDescriptionConnectionVec other) -> mtsDescriptionConnectionVec
        __init__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type size) -> mtsDescriptionConnectionVec
        __init__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type size, mtsDescriptionConnection value) -> mtsDescriptionConnectionVec
        """
        _cisstMultiTaskPython.mtsDescriptionConnectionVec_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionConnectionVec(*args))

    def push_back(self, x):
        r"""push_back(mtsDescriptionConnectionVec self, mtsDescriptionConnection x)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_push_back(self, x)

    def front(self):
        r"""front(mtsDescriptionConnectionVec self) -> mtsDescriptionConnection"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_front(self)

    def back(self):
        r"""back(mtsDescriptionConnectionVec self) -> mtsDescriptionConnection"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_back(self)

    def assign(self, n, x):
        r"""assign(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type n, mtsDescriptionConnection x)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type new_size)
        resize(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type new_size, mtsDescriptionConnection x)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator pos, mtsDescriptionConnection x) -> std::vector< mtsDescriptionConnection >::iterator
        insert(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator pos, std::vector< mtsDescriptionConnection >::size_type n, mtsDescriptionConnection x)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type n)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnectionVec

# Register mtsDescriptionConnectionVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionConnectionVec_swigregister(mtsDescriptionConnectionVec)

class mtsDescriptionConnectionVecProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< mtsDescriptionConnectionVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnectionVecProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsDescriptionConnectionVecProxyBase self) -> mtsDescriptionConnectionVec
        GetData(mtsDescriptionConnectionVecProxyBase self) -> mtsDescriptionConnectionVec
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsDescriptionConnectionVecProxyBase self, mtsDescriptionConnectionVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_Assign(self, other)

# Register mtsDescriptionConnectionVecProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_swigregister(mtsDescriptionConnectionVecProxyBase)

def mtsDescriptionConnectionVecProxyBase_ClassServices():
    r"""mtsDescriptionConnectionVecProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_ClassServices()

class mtsDescriptionConnectionVecProxy(mtsDescriptionConnectionVecProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< mtsDescriptionConnectionVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_Data_get, _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(std::vector<(mtsDescriptionConnection,std::allocator<(mtsDescriptionConnection)>)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVecProxy
        __init__(mtsDescriptionConnectionVecProxy self, mtsDescriptionConnectionVecProxy other) -> mtsDescriptionConnectionVecProxy
        __init__(mtsDescriptionConnectionVecProxy self, mtsDescriptionConnectionVec data) -> mtsDescriptionConnectionVecProxy
        """
        _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionConnectionVecProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnectionVecProxy

    def GetData(self, *args):
        r"""
        GetData(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVec
        GetData(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVec
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVec"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_GetDataCopy(self)

# Register mtsDescriptionConnectionVecProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_swigregister(mtsDescriptionConnectionVecProxy)

def mtsDescriptionConnectionVecProxy_ClassServices():
    r"""mtsDescriptionConnectionVecProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_ClassServices()

class mtsDescriptionComponentClassVec(object):
    r"""Proxy of C++ std::vector< mtsDescriptionComponentClass > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsDescriptionComponentClassVec self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsDescriptionComponentClassVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsDescriptionComponentClassVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___bool__(self)

    def __len__(self):
        r"""__len__(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j) -> mtsDescriptionComponentClassVec"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j)
        __setslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j, mtsDescriptionComponentClassVec v)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i)
        __delitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice) -> mtsDescriptionComponentClassVec
        __getitem__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i) -> mtsDescriptionComponentClass
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice, mtsDescriptionComponentClassVec v)
        __setitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice)
        __setitem__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, mtsDescriptionComponentClass x)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClass"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_pop(self)

    def append(self, x):
        r"""append(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClass x)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_append(self, x)

    def empty(self):
        r"""empty(mtsDescriptionComponentClassVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_empty(self)

    def size(self):
        r"""size(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_size(self)

    def swap(self, v):
        r"""swap(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClassVec v)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_swap(self, v)

    def begin(self):
        r"""begin(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_begin(self)

    def end(self):
        r"""end(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_end(self)

    def rbegin(self):
        r"""rbegin(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_rbegin(self)

    def rend(self):
        r"""rend(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_rend(self)

    def clear(self):
        r"""clear(mtsDescriptionComponentClassVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::allocator_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsDescriptionComponentClassVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator pos) -> std::vector< mtsDescriptionComponentClass >::iterator
        erase(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator first, std::vector< mtsDescriptionComponentClass >::iterator last) -> std::vector< mtsDescriptionComponentClass >::iterator
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClassVec
        __init__(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClassVec other) -> mtsDescriptionComponentClassVec
        __init__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type size) -> mtsDescriptionComponentClassVec
        __init__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type size, mtsDescriptionComponentClass value) -> mtsDescriptionComponentClassVec
        """
        _cisstMultiTaskPython.mtsDescriptionComponentClassVec_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionComponentClassVec(*args))

    def push_back(self, x):
        r"""push_back(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClass x)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_push_back(self, x)

    def front(self):
        r"""front(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClass"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_front(self)

    def back(self):
        r"""back(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClass"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_back(self)

    def assign(self, n, x):
        r"""assign(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type n, mtsDescriptionComponentClass x)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type new_size)
        resize(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type new_size, mtsDescriptionComponentClass x)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator pos, mtsDescriptionComponentClass x) -> std::vector< mtsDescriptionComponentClass >::iterator
        insert(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator pos, std::vector< mtsDescriptionComponentClass >::size_type n, mtsDescriptionComponentClass x)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type n)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClassVec

# Register mtsDescriptionComponentClassVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionComponentClassVec_swigregister(mtsDescriptionComponentClassVec)

class mtsDescriptionComponentClassVecProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< mtsDescriptionComponentClassVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClassVecProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsDescriptionComponentClassVecProxyBase self) -> mtsDescriptionComponentClassVec
        GetData(mtsDescriptionComponentClassVecProxyBase self) -> mtsDescriptionComponentClassVec
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsDescriptionComponentClassVecProxyBase self, mtsDescriptionComponentClassVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_Assign(self, other)

# Register mtsDescriptionComponentClassVecProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_swigregister(mtsDescriptionComponentClassVecProxyBase)

def mtsDescriptionComponentClassVecProxyBase_ClassServices():
    r"""mtsDescriptionComponentClassVecProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_ClassServices()

class mtsDescriptionComponentClassVecProxy(mtsDescriptionComponentClassVecProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< mtsDescriptionComponentClassVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_Data_get, _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(std::vector<(mtsDescriptionComponentClass,std::allocator<(mtsDescriptionComponentClass)>)>)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVecProxy
        __init__(mtsDescriptionComponentClassVecProxy self, mtsDescriptionComponentClassVecProxy other) -> mtsDescriptionComponentClassVecProxy
        __init__(mtsDescriptionComponentClassVecProxy self, mtsDescriptionComponentClassVec data) -> mtsDescriptionComponentClassVecProxy
        """
        _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_swiginit(self, _cisstMultiTaskPython.new_mtsDescriptionComponentClassVecProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClassVecProxy

    def GetData(self, *args):
        r"""
        GetData(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVec
        GetData(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVec
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVec"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_GetDataCopy(self)

# Register mtsDescriptionComponentClassVecProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_swigregister(mtsDescriptionComponentClassVecProxy)

def mtsDescriptionComponentClassVecProxy_ClassServices():
    r"""mtsDescriptionComponentClassVecProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_ClassServices()

class mtsComponentState(object):
    r"""Proxy of C++ mtsComponentState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentState
    CONSTRUCTED = _cisstMultiTaskPython.mtsComponentState_CONSTRUCTED
    
    INITIALIZING = _cisstMultiTaskPython.mtsComponentState_INITIALIZING
    
    READY = _cisstMultiTaskPython.mtsComponentState_READY
    
    ACTIVE = _cisstMultiTaskPython.mtsComponentState_ACTIVE
    
    FINISHING = _cisstMultiTaskPython.mtsComponentState_FINISHING
    
    FINISHED = _cisstMultiTaskPython.mtsComponentState_FINISHED
    

    @staticmethod
    def EnumToString(value):
        r"""EnumToString(mtsComponentState::Enum const & value) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentState_EnumToString(value)

    @staticmethod
    def EnumFromString(value):
        r"""EnumFromString(std::string const & value) -> mtsComponentState::Enum"""
        return _cisstMultiTaskPython.mtsComponentState_EnumFromString(value)

    @staticmethod
    def EnumVectorInt():
        r"""EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
        return _cisstMultiTaskPython.mtsComponentState_EnumVectorInt()

    @staticmethod
    def EnumVectorString():
        r"""EnumVectorString() -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponentState_EnumVectorString()

    def GetState(self, placeHolder):
        r"""GetState(mtsComponentState self, mtsComponentState::Enum & placeHolder)"""
        return _cisstMultiTaskPython.mtsComponentState_GetState(self, placeHolder)

    def SetState(self, newValue):
        r"""SetState(mtsComponentState self, mtsComponentState::Enum const & newValue)"""
        return _cisstMultiTaskPython.mtsComponentState_SetState(self, newValue)

    def State(self, *args):
        r"""
        State(mtsComponentState self) -> mtsComponentState::Enum const
        State(mtsComponentState self) -> mtsComponentState::Enum &
        """
        return _cisstMultiTaskPython.mtsComponentState_State(self, *args)

    def __eq__(self, state):
        r"""__eq__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___eq__(self, state)

    def __ne__(self, state):
        r"""__ne__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___ne__(self, state)

    def __lt__(self, state):
        r"""__lt__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___lt__(self, state)

    def __le__(self, state):
        r"""__le__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___le__(self, state)

    def __gt__(self, state):
        r"""__gt__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___gt__(self, state)

    def __ge__(self, state):
        r"""__ge__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___ge__(self, state)

    def __init__(self, *args):
        r"""
        __init__(mtsComponentState self) -> mtsComponentState
        __init__(mtsComponentState self, mtsComponentState other) -> mtsComponentState
        __init__(mtsComponentState self, mtsComponentState::Enum const & newState) -> mtsComponentState
        """
        _cisstMultiTaskPython.mtsComponentState_swiginit(self, _cisstMultiTaskPython.new_mtsComponentState(*args))

    def Copy(self, source):
        r"""Copy(mtsComponentState self, mtsComponentState source)"""
        return _cisstMultiTaskPython.mtsComponentState_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsComponentState self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsComponentState_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsComponentState self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsComponentState_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsComponentState self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsComponentState_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsComponentState self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsComponentState_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsComponentState self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsComponentState_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsComponentState self) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentState___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsComponentState self) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsComponentState self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponentState_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsComponentState self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsComponentState_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsComponentState self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsComponentState_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsComponentState self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentState_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsComponentState self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentState_DeSerializeTextJSON(self, jsonValue)

# Register mtsComponentState in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentState_swigregister(mtsComponentState)

def mtsComponentState_EnumToString(value):
    r"""mtsComponentState_EnumToString(mtsComponentState::Enum const & value) -> std::string"""
    return _cisstMultiTaskPython.mtsComponentState_EnumToString(value)

def mtsComponentState_EnumFromString(value):
    r"""mtsComponentState_EnumFromString(std::string const & value) -> mtsComponentState::Enum"""
    return _cisstMultiTaskPython.mtsComponentState_EnumFromString(value)

def mtsComponentState_EnumVectorInt():
    r"""mtsComponentState_EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
    return _cisstMultiTaskPython.mtsComponentState_EnumVectorInt()

def mtsComponentState_EnumVectorString():
    r"""mtsComponentState_EnumVectorString() -> mtsStringVector"""
    return _cisstMultiTaskPython.mtsComponentState_EnumVectorString()


def cmnDataHumanReadable_mtsComponentState_Enum(data):
    r"""cmnDataHumanReadable_mtsComponentState_Enum(mtsComponentState::Enum const & data) -> std::string"""
    return _cisstMultiTaskPython.cmnDataHumanReadable_mtsComponentState_Enum(data)
class mtsComponentStateProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< mtsComponentState > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentStateProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentStateProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentStateProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStateProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsComponentStateProxyBase self) -> mtsComponentState
        GetData(mtsComponentStateProxyBase self) -> mtsComponentState
        """
        return _cisstMultiTaskPython.mtsComponentStateProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsComponentStateProxyBase self, mtsComponentStateProxyBase other)"""
        return _cisstMultiTaskPython.mtsComponentStateProxyBase_Assign(self, other)

# Register mtsComponentStateProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentStateProxyBase_swigregister(mtsComponentStateProxyBase)

def mtsComponentStateProxyBase_ClassServices():
    r"""mtsComponentStateProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentStateProxyBase_ClassServices()

class mtsComponentStateProxy(mtsComponentStateProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< mtsComponentState > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentStateProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsComponentStateProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentStateProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsComponentStateProxy_Data_get, _cisstMultiTaskPython.mtsComponentStateProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(mtsComponentState)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsComponentStateProxy self) -> mtsComponentStateProxy
        __init__(mtsComponentStateProxy self, mtsComponentStateProxy other) -> mtsComponentStateProxy
        __init__(mtsComponentStateProxy self, mtsComponentState data) -> mtsComponentStateProxy
        """
        _cisstMultiTaskPython.mtsComponentStateProxy_swiginit(self, _cisstMultiTaskPython.new_mtsComponentStateProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStateProxy

    def GetData(self, *args):
        r"""
        GetData(mtsComponentStateProxy self) -> mtsComponentState
        GetData(mtsComponentStateProxy self) -> mtsComponentState
        """
        return _cisstMultiTaskPython.mtsComponentStateProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsComponentStateProxy self) -> mtsComponentState"""
        return _cisstMultiTaskPython.mtsComponentStateProxy_GetDataCopy(self)

# Register mtsComponentStateProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsComponentStateProxy_swigregister(mtsComponentStateProxy)

def mtsComponentStateProxy_ClassServices():
    r"""mtsComponentStateProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsComponentStateProxy_ClassServices()

class mtsCommandVoidDescription(object):
    r"""Proxy of C++ mtsCommandVoidDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoidDescription
    Name = property(_cisstMultiTaskPython.mtsCommandVoidDescription_Name_get, _cisstMultiTaskPython.mtsCommandVoidDescription_Name_set, doc=r"""Name : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsCommandVoidDescription self) -> mtsCommandVoidDescription
        __init__(mtsCommandVoidDescription self, mtsCommandVoidDescription other) -> mtsCommandVoidDescription
        __init__(mtsCommandVoidDescription self, std::string const & newName) -> mtsCommandVoidDescription
        """
        _cisstMultiTaskPython.mtsCommandVoidDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandVoidDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsCommandVoidDescription self, mtsCommandVoidDescription source)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsCommandVoidDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsCommandVoidDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsCommandVoidDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsCommandVoidDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsCommandVoidDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsCommandVoidDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsCommandVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsCommandVoidDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsCommandVoidDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsCommandVoidDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsCommandVoidDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsCommandVoidDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsCommandVoidDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandVoidDescription_swigregister(mtsCommandVoidDescription)

class mtsCommandWriteDescription(object):
    r"""Proxy of C++ mtsCommandWriteDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteDescription
    Name = property(_cisstMultiTaskPython.mtsCommandWriteDescription_Name_get, _cisstMultiTaskPython.mtsCommandWriteDescription_Name_set, doc=r"""Name : std::string""")
    ArgumentPrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandWriteDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandWriteDescription_ArgumentPrototypeSerialized_set, doc=r"""ArgumentPrototypeSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsCommandWriteDescription self) -> mtsCommandWriteDescription
        __init__(mtsCommandWriteDescription self, mtsCommandWriteDescription other) -> mtsCommandWriteDescription
        __init__(mtsCommandWriteDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized) -> mtsCommandWriteDescription
        """
        _cisstMultiTaskPython.mtsCommandWriteDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandWriteDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsCommandWriteDescription self, mtsCommandWriteDescription source)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsCommandWriteDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsCommandWriteDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsCommandWriteDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsCommandWriteDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsCommandWriteDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsCommandWriteDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsCommandWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsCommandWriteDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsCommandWriteDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsCommandWriteDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsCommandWriteDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsCommandWriteDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsCommandWriteDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandWriteDescription_swigregister(mtsCommandWriteDescription)

class mtsCommandReadDescription(object):
    r"""Proxy of C++ mtsCommandReadDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandReadDescription
    Name = property(_cisstMultiTaskPython.mtsCommandReadDescription_Name_get, _cisstMultiTaskPython.mtsCommandReadDescription_Name_set, doc=r"""Name : std::string""")
    ArgumentPrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandReadDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandReadDescription_ArgumentPrototypeSerialized_set, doc=r"""ArgumentPrototypeSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsCommandReadDescription self) -> mtsCommandReadDescription
        __init__(mtsCommandReadDescription self, mtsCommandReadDescription other) -> mtsCommandReadDescription
        __init__(mtsCommandReadDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized) -> mtsCommandReadDescription
        """
        _cisstMultiTaskPython.mtsCommandReadDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandReadDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsCommandReadDescription self, mtsCommandReadDescription source)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsCommandReadDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsCommandReadDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsCommandReadDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsCommandReadDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsCommandReadDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsCommandReadDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandReadDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsCommandReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsCommandReadDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsCommandReadDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsCommandReadDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsCommandReadDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsCommandReadDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsCommandReadDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandReadDescription_swigregister(mtsCommandReadDescription)

class mtsCommandQualifiedReadDescription(object):
    r"""Proxy of C++ mtsCommandQualifiedReadDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandQualifiedReadDescription
    Name = property(_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Name_get, _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Name_set, doc=r"""Name : std::string""")
    Argument1PrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument1PrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument1PrototypeSerialized_set, doc=r"""Argument1PrototypeSerialized : std::string""")
    Argument2PrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument2PrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument2PrototypeSerialized_set, doc=r"""Argument2PrototypeSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsCommandQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription
        __init__(mtsCommandQualifiedReadDescription self, mtsCommandQualifiedReadDescription other) -> mtsCommandQualifiedReadDescription
        __init__(mtsCommandQualifiedReadDescription self, std::string const & newName, std::string const & newArgument1PrototypeSerialized, std::string const & newArgument2PrototypeSerialized) -> mtsCommandQualifiedReadDescription
        """
        _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandQualifiedReadDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsCommandQualifiedReadDescription self, mtsCommandQualifiedReadDescription source)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsCommandQualifiedReadDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsCommandQualifiedReadDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsCommandQualifiedReadDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsCommandQualifiedReadDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsCommandQualifiedReadDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsCommandQualifiedReadDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsCommandQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsCommandQualifiedReadDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsCommandQualifiedReadDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsCommandQualifiedReadDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsCommandQualifiedReadDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsCommandQualifiedReadDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsCommandQualifiedReadDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_swigregister(mtsCommandQualifiedReadDescription)

class mtsCommandVoidReturnDescription(object):
    r"""Proxy of C++ mtsCommandVoidReturnDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoidReturnDescription
    Name = property(_cisstMultiTaskPython.mtsCommandVoidReturnDescription_Name_get, _cisstMultiTaskPython.mtsCommandVoidReturnDescription_Name_set, doc=r"""Name : std::string""")
    ResultPrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandVoidReturnDescription_ResultPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ResultPrototypeSerialized_set, doc=r"""ResultPrototypeSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsCommandVoidReturnDescription self) -> mtsCommandVoidReturnDescription
        __init__(mtsCommandVoidReturnDescription self, mtsCommandVoidReturnDescription other) -> mtsCommandVoidReturnDescription
        __init__(mtsCommandVoidReturnDescription self, std::string const & newName, std::string const & newResultPrototypeSerialized) -> mtsCommandVoidReturnDescription
        """
        _cisstMultiTaskPython.mtsCommandVoidReturnDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandVoidReturnDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsCommandVoidReturnDescription self, mtsCommandVoidReturnDescription source)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsCommandVoidReturnDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsCommandVoidReturnDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsCommandVoidReturnDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsCommandVoidReturnDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsCommandVoidReturnDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsCommandVoidReturnDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsCommandVoidReturnDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsCommandVoidReturnDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsCommandVoidReturnDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsCommandVoidReturnDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsCommandVoidReturnDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsCommandVoidReturnDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsCommandVoidReturnDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandVoidReturnDescription_swigregister(mtsCommandVoidReturnDescription)

class mtsCommandWriteReturnDescription(object):
    r"""Proxy of C++ mtsCommandWriteReturnDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteReturnDescription
    Name = property(_cisstMultiTaskPython.mtsCommandWriteReturnDescription_Name_get, _cisstMultiTaskPython.mtsCommandWriteReturnDescription_Name_set, doc=r"""Name : std::string""")
    ArgumentPrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandWriteReturnDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ArgumentPrototypeSerialized_set, doc=r"""ArgumentPrototypeSerialized : std::string""")
    ResultPrototypeSerialized = property(_cisstMultiTaskPython.mtsCommandWriteReturnDescription_ResultPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ResultPrototypeSerialized_set, doc=r"""ResultPrototypeSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsCommandWriteReturnDescription self) -> mtsCommandWriteReturnDescription
        __init__(mtsCommandWriteReturnDescription self, mtsCommandWriteReturnDescription other) -> mtsCommandWriteReturnDescription
        __init__(mtsCommandWriteReturnDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized, std::string const & newResultPrototypeSerialized) -> mtsCommandWriteReturnDescription
        """
        _cisstMultiTaskPython.mtsCommandWriteReturnDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandWriteReturnDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsCommandWriteReturnDescription self, mtsCommandWriteReturnDescription source)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsCommandWriteReturnDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsCommandWriteReturnDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsCommandWriteReturnDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsCommandWriteReturnDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsCommandWriteReturnDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsCommandWriteReturnDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsCommandWriteReturnDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsCommandWriteReturnDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsCommandWriteReturnDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsCommandWriteReturnDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsCommandWriteReturnDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsCommandWriteReturnDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsCommandWriteReturnDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandWriteReturnDescription_swigregister(mtsCommandWriteReturnDescription)

class mtsEventVoidDescription(object):
    r"""Proxy of C++ mtsEventVoidDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventVoidDescription
    Name = property(_cisstMultiTaskPython.mtsEventVoidDescription_Name_get, _cisstMultiTaskPython.mtsEventVoidDescription_Name_set, doc=r"""Name : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsEventVoidDescription self) -> mtsEventVoidDescription
        __init__(mtsEventVoidDescription self, mtsEventVoidDescription other) -> mtsEventVoidDescription
        __init__(mtsEventVoidDescription self, std::string const & newName) -> mtsEventVoidDescription
        """
        _cisstMultiTaskPython.mtsEventVoidDescription_swiginit(self, _cisstMultiTaskPython.new_mtsEventVoidDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsEventVoidDescription self, mtsEventVoidDescription source)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsEventVoidDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsEventVoidDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsEventVoidDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsEventVoidDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsEventVoidDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsEventVoidDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsEventVoidDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsEventVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsEventVoidDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsEventVoidDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsEventVoidDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsEventVoidDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsEventVoidDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsEventVoidDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventVoidDescription_swigregister(mtsEventVoidDescription)

class mtsEventWriteDescription(object):
    r"""Proxy of C++ mtsEventWriteDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventWriteDescription
    Name = property(_cisstMultiTaskPython.mtsEventWriteDescription_Name_get, _cisstMultiTaskPython.mtsEventWriteDescription_Name_set, doc=r"""Name : std::string""")
    ArgumentPrototypeSerialized = property(_cisstMultiTaskPython.mtsEventWriteDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsEventWriteDescription_ArgumentPrototypeSerialized_set, doc=r"""ArgumentPrototypeSerialized : std::string""")

    def __init__(self, *args):
        r"""
        __init__(mtsEventWriteDescription self) -> mtsEventWriteDescription
        __init__(mtsEventWriteDescription self, mtsEventWriteDescription other) -> mtsEventWriteDescription
        __init__(mtsEventWriteDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized) -> mtsEventWriteDescription
        """
        _cisstMultiTaskPython.mtsEventWriteDescription_swiginit(self, _cisstMultiTaskPython.new_mtsEventWriteDescription(*args))

    def Copy(self, source):
        r"""Copy(mtsEventWriteDescription self, mtsEventWriteDescription source)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsEventWriteDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsEventWriteDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsEventWriteDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsEventWriteDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsEventWriteDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsEventWriteDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsEventWriteDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsEventWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsEventWriteDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsEventWriteDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsEventWriteDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsEventWriteDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsEventWriteDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsEventWriteDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventWriteDescription_swigregister(mtsEventWriteDescription)

class mtsInterfaceProvidedDescription(object):
    r"""Proxy of C++ mtsInterfaceProvidedDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsInterfaceProvidedDescription self) -> mtsInterfaceProvidedDescription
        __init__(mtsInterfaceProvidedDescription self, mtsInterfaceProvidedDescription other) -> mtsInterfaceProvidedDescription
        """
        _cisstMultiTaskPython.mtsInterfaceProvidedDescription_swiginit(self, _cisstMultiTaskPython.new_mtsInterfaceProvidedDescription(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvidedDescription
    InterfaceName = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_InterfaceName_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_InterfaceName_set, doc=r"""InterfaceName : std::string""")
    CommandsVoid = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoid_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoid_set, doc=r"""CommandsVoid : mtsCommandsVoidDescription""")
    CommandsWrite = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWrite_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWrite_set, doc=r"""CommandsWrite : mtsCommandsWriteDescription""")
    CommandsRead = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsRead_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsRead_set, doc=r"""CommandsRead : mtsCommandsReadDescription""")
    CommandsQualifiedRead = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsQualifiedRead_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsQualifiedRead_set, doc=r"""CommandsQualifiedRead : mtsCommandsQualifiedReadDescription""")
    CommandsVoidReturn = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoidReturn_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoidReturn_set, doc=r"""CommandsVoidReturn : mtsCommandsVoidReturnDescription""")
    CommandsWriteReturn = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWriteReturn_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWriteReturn_set, doc=r"""CommandsWriteReturn : mtsCommandsWriteReturnDescription""")
    EventsVoid = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsVoid_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsVoid_set, doc=r"""EventsVoid : mtsEventsVoidDescription""")
    EventsWrite = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsWrite_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsWrite_set, doc=r"""EventsWrite : mtsEventsWriteDescription""")

    def Copy(self, source):
        r"""Copy(mtsInterfaceProvidedDescription self, mtsInterfaceProvidedDescription source)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsInterfaceProvidedDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsInterfaceProvidedDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsInterfaceProvidedDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsInterfaceProvidedDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsInterfaceProvidedDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsInterfaceProvidedDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsInterfaceProvidedDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsInterfaceProvidedDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsInterfaceProvidedDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsInterfaceProvidedDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsInterfaceProvidedDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsInterfaceProvidedDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsInterfaceProvidedDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceProvidedDescription_swigregister(mtsInterfaceProvidedDescription)

class mtsInterfaceRequiredDescription(object):
    r"""Proxy of C++ mtsInterfaceRequiredDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mtsInterfaceRequiredDescription self) -> mtsInterfaceRequiredDescription
        __init__(mtsInterfaceRequiredDescription self, mtsInterfaceRequiredDescription other) -> mtsInterfaceRequiredDescription
        """
        _cisstMultiTaskPython.mtsInterfaceRequiredDescription_swiginit(self, _cisstMultiTaskPython.new_mtsInterfaceRequiredDescription(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequiredDescription
    InterfaceName = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_InterfaceName_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_InterfaceName_set, doc=r"""InterfaceName : std::string""")
    FunctionVoidNames = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidNames_set, doc=r"""FunctionVoidNames : mtsCommandPointerNames""")
    FunctionWriteNames = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteNames_set, doc=r"""FunctionWriteNames : mtsCommandPointerNames""")
    FunctionReadNames = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionReadNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionReadNames_set, doc=r"""FunctionReadNames : mtsCommandPointerNames""")
    FunctionQualifiedReadNames = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionQualifiedReadNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionQualifiedReadNames_set, doc=r"""FunctionQualifiedReadNames : mtsCommandPointerNames""")
    FunctionVoidReturnNames = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidReturnNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidReturnNames_set, doc=r"""FunctionVoidReturnNames : mtsCommandPointerNames""")
    FunctionWriteReturnNames = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteReturnNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteReturnNames_set, doc=r"""FunctionWriteReturnNames : mtsCommandPointerNames""")
    EventHandlersVoid = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersVoid_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersVoid_set, doc=r"""EventHandlersVoid : mtsEventHandlersVoidDescription""")
    EventHandlersWrite = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersWrite_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersWrite_set, doc=r"""EventHandlersWrite : mtsEventHandlersWriteDescription""")
    IsRequired = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_IsRequired_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_IsRequired_set, doc=r"""IsRequired : bool""")

    def Copy(self, source):
        r"""Copy(mtsInterfaceRequiredDescription self, mtsInterfaceRequiredDescription source)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_Copy(self, source)

    def SerializeBinary(self, outputStream):
        r"""SerializeBinary(mtsInterfaceRequiredDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeBinary(self, outputStream)

    def DeSerializeBinary(self, inputStream, localFormat, remoteFormat):
        r"""DeSerializeBinary(mtsInterfaceRequiredDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_DeSerializeBinary(self, inputStream, localFormat, remoteFormat)

    def SerializeText(self, *args):
        r"""SerializeText(mtsInterfaceRequiredDescription self, ostream outputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeText(self, *args)

    def SerializeDescription(self, *args):
        r"""SerializeDescription(mtsInterfaceRequiredDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeDescription(self, *args)

    def DeSerializeText(self, *args):
        r"""DeSerializeText(mtsInterfaceRequiredDescription self, istream inputStream, char const delimiter=',')"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_DeSerializeText(self, *args)

    def __str__(self):
        r"""__str__(mtsInterfaceRequiredDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription___str__(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(mtsInterfaceRequiredDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        r"""ScalarNumber(mtsInterfaceRequiredDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_ScalarNumber(self)

    def Scalar(self, index):
        r"""Scalar(mtsInterfaceRequiredDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_Scalar(self, index)

    def ScalarDescription(self, *args):
        r"""ScalarDescription(mtsInterfaceRequiredDescription self, size_t const index, std::string const & userDescription="") -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, jsonValue):
        r"""SerializeTextJSON(mtsInterfaceRequiredDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeTextJSON(self, jsonValue)

    def DeSerializeTextJSON(self, jsonValue):
        r"""DeSerializeTextJSON(mtsInterfaceRequiredDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_DeSerializeTextJSON(self, jsonValue)

# Register mtsInterfaceRequiredDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceRequiredDescription_swigregister(mtsInterfaceRequiredDescription)


def cmnSerializeRaw(*args):
    r"""
    cmnSerializeRaw(ostream outputStream, mtsExecutionResult object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionComponent object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionComponentClass object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionInterface object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionInterfaceFullName object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionConnection object)
    cmnSerializeRaw(ostream outputStream, mtsComponentStatusControl object)
    cmnSerializeRaw(ostream outputStream, mtsComponentStateChange object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionLoadLibrary object)
    cmnSerializeRaw(ostream outputStream, mtsEndUserInterfaceArg object)
    cmnSerializeRaw(ostream outputStream, mtsMessage object)
    cmnSerializeRaw(ostream outputStream, mtsTaskConstructorArg object)
    cmnSerializeRaw(ostream outputStream, mtsTaskContinuousConstructorArg object)
    cmnSerializeRaw(ostream outputStream, mtsTaskPeriodicConstructorArg object)
    cmnSerializeRaw(ostream outputStream, mtsComponentState object)
    cmnSerializeRaw(ostream outputStream, mtsCommandVoidDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandWriteDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandReadDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandQualifiedReadDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandVoidReturnDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandWriteReturnDescription object)
    cmnSerializeRaw(ostream outputStream, mtsEventVoidDescription object)
    cmnSerializeRaw(ostream outputStream, mtsEventWriteDescription object)
    cmnSerializeRaw(ostream outputStream, mtsInterfaceProvidedDescription object)
    cmnSerializeRaw(ostream outputStream, mtsInterfaceRequiredDescription object)
    """
    return _cisstMultiTaskPython.cmnSerializeRaw(*args)

def cmnDeSerializeRaw(*args):
    r"""
    cmnDeSerializeRaw(istream inputStream, mtsExecutionResult placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionComponent placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionComponentClass placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionInterface placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionInterfaceFullName placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionConnection placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsComponentStatusControl placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsComponentStateChange placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionLoadLibrary placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsEndUserInterfaceArg placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsMessage placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsTaskConstructorArg placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsTaskContinuousConstructorArg placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsTaskPeriodicConstructorArg placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsComponentState placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandVoidDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandWriteDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandReadDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandQualifiedReadDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandVoidReturnDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandWriteReturnDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsEventVoidDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsEventWriteDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsInterfaceProvidedDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsInterfaceRequiredDescription placeHolder)
    """
    return _cisstMultiTaskPython.cmnDeSerializeRaw(*args)
class mtsInterfaceProvidedDescriptionProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< mtsInterfaceProvidedDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvidedDescriptionProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsInterfaceProvidedDescriptionProxyBase self) -> mtsInterfaceProvidedDescription
        GetData(mtsInterfaceProvidedDescriptionProxyBase self) -> mtsInterfaceProvidedDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsInterfaceProvidedDescriptionProxyBase self, mtsInterfaceProvidedDescriptionProxyBase other)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_Assign(self, other)

# Register mtsInterfaceProvidedDescriptionProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_swigregister(mtsInterfaceProvidedDescriptionProxyBase)

def mtsInterfaceProvidedDescriptionProxyBase_ClassServices():
    r"""mtsInterfaceProvidedDescriptionProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_ClassServices()

class mtsInterfaceProvidedDescriptionProxy(mtsInterfaceProvidedDescriptionProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< mtsInterfaceProvidedDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_Data_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(mtsInterfaceProvidedDescription)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescriptionProxy
        __init__(mtsInterfaceProvidedDescriptionProxy self, mtsInterfaceProvidedDescriptionProxy other) -> mtsInterfaceProvidedDescriptionProxy
        __init__(mtsInterfaceProvidedDescriptionProxy self, mtsInterfaceProvidedDescription data) -> mtsInterfaceProvidedDescriptionProxy
        """
        _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_swiginit(self, _cisstMultiTaskPython.new_mtsInterfaceProvidedDescriptionProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvidedDescriptionProxy

    def GetData(self, *args):
        r"""
        GetData(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescription
        GetData(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescription"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_GetDataCopy(self)

# Register mtsInterfaceProvidedDescriptionProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_swigregister(mtsInterfaceProvidedDescriptionProxy)

def mtsInterfaceProvidedDescriptionProxy_ClassServices():
    r"""mtsInterfaceProvidedDescriptionProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_ClassServices()

class mtsInterfaceRequiredDescriptionProxyBase(mtsGenericObject):
    r"""Proxy of C++ mtsGenericObjectProxyBase< mtsInterfaceRequiredDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_ClassServices()
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequiredDescriptionProxyBase

    def GetData(self, *args):
        r"""
        GetData(mtsInterfaceRequiredDescriptionProxyBase self) -> mtsInterfaceRequiredDescription
        GetData(mtsInterfaceRequiredDescriptionProxyBase self) -> mtsInterfaceRequiredDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_GetData(self, *args)

    def Assign(self, other):
        r"""Assign(mtsInterfaceRequiredDescriptionProxyBase self, mtsInterfaceRequiredDescriptionProxyBase other)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_Assign(self, other)

# Register mtsInterfaceRequiredDescriptionProxyBase in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_swigregister(mtsInterfaceRequiredDescriptionProxyBase)

def mtsInterfaceRequiredDescriptionProxyBase_ClassServices():
    r"""mtsInterfaceRequiredDescriptionProxyBase_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_ClassServices()

class mtsInterfaceRequiredDescriptionProxy(mtsInterfaceRequiredDescriptionProxyBase):
    r"""Proxy of C++ mtsGenericObjectProxy< mtsInterfaceRequiredDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_ClassServices()
    Data = property(_cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_Data_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_Data_set, doc=r"""Data : mtsGenericObjectProxy<(mtsInterfaceRequiredDescription)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescriptionProxy
        __init__(mtsInterfaceRequiredDescriptionProxy self, mtsInterfaceRequiredDescriptionProxy other) -> mtsInterfaceRequiredDescriptionProxy
        __init__(mtsInterfaceRequiredDescriptionProxy self, mtsInterfaceRequiredDescription data) -> mtsInterfaceRequiredDescriptionProxy
        """
        _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_swiginit(self, _cisstMultiTaskPython.new_mtsInterfaceRequiredDescriptionProxy(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequiredDescriptionProxy

    def GetData(self, *args):
        r"""
        GetData(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescription
        GetData(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_GetData(self, *args)

    def GetDataCopy(self):
        r"""GetDataCopy(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescription"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_GetDataCopy(self)

# Register mtsInterfaceRequiredDescriptionProxy in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_swigregister(mtsInterfaceRequiredDescriptionProxy)

def mtsInterfaceRequiredDescriptionProxy_ClassServices():
    r"""mtsInterfaceRequiredDescriptionProxy_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_ClassServices()

class mtsCommandsVoidDescription(object):
    r"""Proxy of C++ std::vector< mtsCommandVoidDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsCommandsVoidDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsCommandsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsCommandsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___bool__(self)

    def __len__(self):
        r"""__len__(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j) -> mtsCommandsVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j)
        __setslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j, mtsCommandsVoidDescription v)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i)
        __delitem__(mtsCommandsVoidDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsCommandsVoidDescription self, PySliceObject * slice) -> mtsCommandsVoidDescription
        __getitem__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i) -> mtsCommandVoidDescription
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsCommandsVoidDescription self, PySliceObject * slice, mtsCommandsVoidDescription v)
        __setitem__(mtsCommandsVoidDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, mtsCommandVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsCommandsVoidDescription self) -> mtsCommandVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_pop(self)

    def append(self, x):
        r"""append(mtsCommandsVoidDescription self, mtsCommandVoidDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_append(self, x)

    def empty(self):
        r"""empty(mtsCommandsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_empty(self)

    def size(self):
        r"""size(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_size(self)

    def swap(self, v):
        r"""swap(mtsCommandsVoidDescription self, mtsCommandsVoidDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_swap(self, v)

    def begin(self):
        r"""begin(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_begin(self)

    def end(self):
        r"""end(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_end(self)

    def rbegin(self):
        r"""rbegin(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_rbegin(self)

    def rend(self):
        r"""rend(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_rend(self)

    def clear(self):
        r"""clear(mtsCommandsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsCommandsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator pos) -> std::vector< mtsCommandVoidDescription >::iterator
        erase(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator first, std::vector< mtsCommandVoidDescription >::iterator last) -> std::vector< mtsCommandVoidDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsCommandsVoidDescription self) -> mtsCommandsVoidDescription
        __init__(mtsCommandsVoidDescription self, mtsCommandsVoidDescription other) -> mtsCommandsVoidDescription
        __init__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type size) -> mtsCommandsVoidDescription
        __init__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type size, mtsCommandVoidDescription value) -> mtsCommandsVoidDescription
        """
        _cisstMultiTaskPython.mtsCommandsVoidDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandsVoidDescription(*args))

    def push_back(self, x):
        r"""push_back(mtsCommandsVoidDescription self, mtsCommandVoidDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_push_back(self, x)

    def front(self):
        r"""front(mtsCommandsVoidDescription self) -> mtsCommandVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_front(self)

    def back(self):
        r"""back(mtsCommandsVoidDescription self) -> mtsCommandVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_back(self)

    def assign(self, n, x):
        r"""assign(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type n, mtsCommandVoidDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type new_size)
        resize(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type new_size, mtsCommandVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator pos, mtsCommandVoidDescription x) -> std::vector< mtsCommandVoidDescription >::iterator
        insert(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator pos, std::vector< mtsCommandVoidDescription >::size_type n, mtsCommandVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsVoidDescription

# Register mtsCommandsVoidDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandsVoidDescription_swigregister(mtsCommandsVoidDescription)

class mtsCommandsWriteDescription(object):
    r"""Proxy of C++ std::vector< mtsCommandWriteDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsCommandsWriteDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsCommandsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsCommandsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___bool__(self)

    def __len__(self):
        r"""__len__(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j) -> mtsCommandsWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j)
        __setslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j, mtsCommandsWriteDescription v)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i)
        __delitem__(mtsCommandsWriteDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsCommandsWriteDescription self, PySliceObject * slice) -> mtsCommandsWriteDescription
        __getitem__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i) -> mtsCommandWriteDescription
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsCommandsWriteDescription self, PySliceObject * slice, mtsCommandsWriteDescription v)
        __setitem__(mtsCommandsWriteDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, mtsCommandWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsCommandsWriteDescription self) -> mtsCommandWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_pop(self)

    def append(self, x):
        r"""append(mtsCommandsWriteDescription self, mtsCommandWriteDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_append(self, x)

    def empty(self):
        r"""empty(mtsCommandsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_empty(self)

    def size(self):
        r"""size(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_size(self)

    def swap(self, v):
        r"""swap(mtsCommandsWriteDescription self, mtsCommandsWriteDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_swap(self, v)

    def begin(self):
        r"""begin(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_begin(self)

    def end(self):
        r"""end(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_end(self)

    def rbegin(self):
        r"""rbegin(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_rbegin(self)

    def rend(self):
        r"""rend(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_rend(self)

    def clear(self):
        r"""clear(mtsCommandsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsCommandsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator pos) -> std::vector< mtsCommandWriteDescription >::iterator
        erase(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator first, std::vector< mtsCommandWriteDescription >::iterator last) -> std::vector< mtsCommandWriteDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsCommandsWriteDescription self) -> mtsCommandsWriteDescription
        __init__(mtsCommandsWriteDescription self, mtsCommandsWriteDescription other) -> mtsCommandsWriteDescription
        __init__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type size) -> mtsCommandsWriteDescription
        __init__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type size, mtsCommandWriteDescription value) -> mtsCommandsWriteDescription
        """
        _cisstMultiTaskPython.mtsCommandsWriteDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandsWriteDescription(*args))

    def push_back(self, x):
        r"""push_back(mtsCommandsWriteDescription self, mtsCommandWriteDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_push_back(self, x)

    def front(self):
        r"""front(mtsCommandsWriteDescription self) -> mtsCommandWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_front(self)

    def back(self):
        r"""back(mtsCommandsWriteDescription self) -> mtsCommandWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_back(self)

    def assign(self, n, x):
        r"""assign(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type n, mtsCommandWriteDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type new_size)
        resize(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type new_size, mtsCommandWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator pos, mtsCommandWriteDescription x) -> std::vector< mtsCommandWriteDescription >::iterator
        insert(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator pos, std::vector< mtsCommandWriteDescription >::size_type n, mtsCommandWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsWriteDescription

# Register mtsCommandsWriteDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandsWriteDescription_swigregister(mtsCommandsWriteDescription)

class mtsCommandsReadDescription(object):
    r"""Proxy of C++ std::vector< mtsCommandReadDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsCommandsReadDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsCommandsReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsCommandsReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___bool__(self)

    def __len__(self):
        r"""__len__(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j) -> mtsCommandsReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j)
        __setslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j, mtsCommandsReadDescription v)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i)
        __delitem__(mtsCommandsReadDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsCommandsReadDescription self, PySliceObject * slice) -> mtsCommandsReadDescription
        __getitem__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i) -> mtsCommandReadDescription
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsCommandsReadDescription self, PySliceObject * slice, mtsCommandsReadDescription v)
        __setitem__(mtsCommandsReadDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, mtsCommandReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsCommandsReadDescription self) -> mtsCommandReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_pop(self)

    def append(self, x):
        r"""append(mtsCommandsReadDescription self, mtsCommandReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_append(self, x)

    def empty(self):
        r"""empty(mtsCommandsReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_empty(self)

    def size(self):
        r"""size(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_size(self)

    def swap(self, v):
        r"""swap(mtsCommandsReadDescription self, mtsCommandsReadDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_swap(self, v)

    def begin(self):
        r"""begin(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_begin(self)

    def end(self):
        r"""end(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_end(self)

    def rbegin(self):
        r"""rbegin(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_rbegin(self)

    def rend(self):
        r"""rend(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_rend(self)

    def clear(self):
        r"""clear(mtsCommandsReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsCommandsReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator pos) -> std::vector< mtsCommandReadDescription >::iterator
        erase(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator first, std::vector< mtsCommandReadDescription >::iterator last) -> std::vector< mtsCommandReadDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsCommandsReadDescription self) -> mtsCommandsReadDescription
        __init__(mtsCommandsReadDescription self, mtsCommandsReadDescription other) -> mtsCommandsReadDescription
        __init__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type size) -> mtsCommandsReadDescription
        __init__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type size, mtsCommandReadDescription value) -> mtsCommandsReadDescription
        """
        _cisstMultiTaskPython.mtsCommandsReadDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandsReadDescription(*args))

    def push_back(self, x):
        r"""push_back(mtsCommandsReadDescription self, mtsCommandReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_push_back(self, x)

    def front(self):
        r"""front(mtsCommandsReadDescription self) -> mtsCommandReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_front(self)

    def back(self):
        r"""back(mtsCommandsReadDescription self) -> mtsCommandReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_back(self)

    def assign(self, n, x):
        r"""assign(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type n, mtsCommandReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type new_size)
        resize(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type new_size, mtsCommandReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator pos, mtsCommandReadDescription x) -> std::vector< mtsCommandReadDescription >::iterator
        insert(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator pos, std::vector< mtsCommandReadDescription >::size_type n, mtsCommandReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsReadDescription

# Register mtsCommandsReadDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandsReadDescription_swigregister(mtsCommandsReadDescription)

class mtsCommandsQualifiedReadDescription(object):
    r"""Proxy of C++ std::vector< mtsCommandQualifiedReadDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsCommandsQualifiedReadDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsCommandsQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsCommandsQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___bool__(self)

    def __len__(self):
        r"""__len__(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j) -> mtsCommandsQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j)
        __setslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j, mtsCommandsQualifiedReadDescription v)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i)
        __delitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice) -> mtsCommandsQualifiedReadDescription
        __getitem__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i) -> mtsCommandQualifiedReadDescription
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice, mtsCommandsQualifiedReadDescription v)
        __setitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, mtsCommandQualifiedReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsCommandsQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_pop(self)

    def append(self, x):
        r"""append(mtsCommandsQualifiedReadDescription self, mtsCommandQualifiedReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_append(self, x)

    def empty(self):
        r"""empty(mtsCommandsQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_empty(self)

    def size(self):
        r"""size(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_size(self)

    def swap(self, v):
        r"""swap(mtsCommandsQualifiedReadDescription self, mtsCommandsQualifiedReadDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_swap(self, v)

    def begin(self):
        r"""begin(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_begin(self)

    def end(self):
        r"""end(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_end(self)

    def rbegin(self):
        r"""rbegin(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_rbegin(self)

    def rend(self):
        r"""rend(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_rend(self)

    def clear(self):
        r"""clear(mtsCommandsQualifiedReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsCommandsQualifiedReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator pos) -> std::vector< mtsCommandQualifiedReadDescription >::iterator
        erase(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator first, std::vector< mtsCommandQualifiedReadDescription >::iterator last) -> std::vector< mtsCommandQualifiedReadDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsCommandsQualifiedReadDescription self) -> mtsCommandsQualifiedReadDescription
        __init__(mtsCommandsQualifiedReadDescription self, mtsCommandsQualifiedReadDescription other) -> mtsCommandsQualifiedReadDescription
        __init__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type size) -> mtsCommandsQualifiedReadDescription
        __init__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type size, mtsCommandQualifiedReadDescription value) -> mtsCommandsQualifiedReadDescription
        """
        _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_swiginit(self, _cisstMultiTaskPython.new_mtsCommandsQualifiedReadDescription(*args))

    def push_back(self, x):
        r"""push_back(mtsCommandsQualifiedReadDescription self, mtsCommandQualifiedReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_push_back(self, x)

    def front(self):
        r"""front(mtsCommandsQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_front(self)

    def back(self):
        r"""back(mtsCommandsQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_back(self)

    def assign(self, n, x):
        r"""assign(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type n, mtsCommandQualifiedReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type new_size)
        resize(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type new_size, mtsCommandQualifiedReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator pos, mtsCommandQualifiedReadDescription x) -> std::vector< mtsCommandQualifiedReadDescription >::iterator
        insert(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator pos, std::vector< mtsCommandQualifiedReadDescription >::size_type n, mtsCommandQualifiedReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsQualifiedReadDescription

# Register mtsCommandsQualifiedReadDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_swigregister(mtsCommandsQualifiedReadDescription)

class mtsEventsVoidDescription(object):
    r"""Proxy of C++ std::vector< mtsEventVoidDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsEventsVoidDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsEventsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsEventsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___bool__(self)

    def __len__(self):
        r"""__len__(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j) -> mtsEventsVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j)
        __setslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j, mtsEventsVoidDescription v)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i)
        __delitem__(mtsEventsVoidDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsEventsVoidDescription self, PySliceObject * slice) -> mtsEventsVoidDescription
        __getitem__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i) -> mtsEventVoidDescription
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsEventsVoidDescription self, PySliceObject * slice, mtsEventsVoidDescription v)
        __setitem__(mtsEventsVoidDescription self, PySliceObject * slice)
        __setitem__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, mtsEventVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsEventsVoidDescription self) -> mtsEventVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_pop(self)

    def append(self, x):
        r"""append(mtsEventsVoidDescription self, mtsEventVoidDescription x)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_append(self, x)

    def empty(self):
        r"""empty(mtsEventsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_empty(self)

    def size(self):
        r"""size(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_size(self)

    def swap(self, v):
        r"""swap(mtsEventsVoidDescription self, mtsEventsVoidDescription v)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_swap(self, v)

    def begin(self):
        r"""begin(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_begin(self)

    def end(self):
        r"""end(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_end(self)

    def rbegin(self):
        r"""rbegin(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_rbegin(self)

    def rend(self):
        r"""rend(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_rend(self)

    def clear(self):
        r"""clear(mtsEventsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsEventsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator pos) -> std::vector< mtsEventVoidDescription >::iterator
        erase(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator first, std::vector< mtsEventVoidDescription >::iterator last) -> std::vector< mtsEventVoidDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsEventsVoidDescription self) -> mtsEventsVoidDescription
        __init__(mtsEventsVoidDescription self, mtsEventsVoidDescription other) -> mtsEventsVoidDescription
        __init__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type size) -> mtsEventsVoidDescription
        __init__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type size, mtsEventVoidDescription value) -> mtsEventsVoidDescription
        """
        _cisstMultiTaskPython.mtsEventsVoidDescription_swiginit(self, _cisstMultiTaskPython.new_mtsEventsVoidDescription(*args))

    def push_back(self, x):
        r"""push_back(mtsEventsVoidDescription self, mtsEventVoidDescription x)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_push_back(self, x)

    def front(self):
        r"""front(mtsEventsVoidDescription self) -> mtsEventVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_front(self)

    def back(self):
        r"""back(mtsEventsVoidDescription self) -> mtsEventVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_back(self)

    def assign(self, n, x):
        r"""assign(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type n, mtsEventVoidDescription x)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type new_size)
        resize(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type new_size, mtsEventVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator pos, mtsEventVoidDescription x) -> std::vector< mtsEventVoidDescription >::iterator
        insert(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator pos, std::vector< mtsEventVoidDescription >::size_type n, mtsEventVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventsVoidDescription

# Register mtsEventsVoidDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventsVoidDescription_swigregister(mtsEventsVoidDescription)

class mtsEventsWriteDescription(object):
    r"""Proxy of C++ std::vector< mtsEventWriteDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mtsEventsWriteDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mtsEventsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mtsEventsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___bool__(self)

    def __len__(self):
        r"""__len__(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j) -> mtsEventsWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j)
        __setslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j, mtsEventsWriteDescription v)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i)
        __delitem__(mtsEventsWriteDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mtsEventsWriteDescription self, PySliceObject * slice) -> mtsEventsWriteDescription
        __getitem__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i) -> mtsEventWriteDescription
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mtsEventsWriteDescription self, PySliceObject * slice, mtsEventsWriteDescription v)
        __setitem__(mtsEventsWriteDescription self, PySliceObject * slice)
        __setitem__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, mtsEventWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___setitem__(self, *args)

    def pop(self):
        r"""pop(mtsEventsWriteDescription self) -> mtsEventWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_pop(self)

    def append(self, x):
        r"""append(mtsEventsWriteDescription self, mtsEventWriteDescription x)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_append(self, x)

    def empty(self):
        r"""empty(mtsEventsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_empty(self)

    def size(self):
        r"""size(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_size(self)

    def swap(self, v):
        r"""swap(mtsEventsWriteDescription self, mtsEventsWriteDescription v)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_swap(self, v)

    def begin(self):
        r"""begin(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_begin(self)

    def end(self):
        r"""end(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_end(self)

    def rbegin(self):
        r"""rbegin(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_rbegin(self)

    def rend(self):
        r"""rend(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_rend(self)

    def clear(self):
        r"""clear(mtsEventsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_clear(self)

    def get_allocator(self):
        r"""get_allocator(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mtsEventsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator pos) -> std::vector< mtsEventWriteDescription >::iterator
        erase(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator first, std::vector< mtsEventWriteDescription >::iterator last) -> std::vector< mtsEventWriteDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mtsEventsWriteDescription self) -> mtsEventsWriteDescription
        __init__(mtsEventsWriteDescription self, mtsEventsWriteDescription other) -> mtsEventsWriteDescription
        __init__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type size) -> mtsEventsWriteDescription
        __init__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type size, mtsEventWriteDescription value) -> mtsEventsWriteDescription
        """
        _cisstMultiTaskPython.mtsEventsWriteDescription_swiginit(self, _cisstMultiTaskPython.new_mtsEventsWriteDescription(*args))

    def push_back(self, x):
        r"""push_back(mtsEventsWriteDescription self, mtsEventWriteDescription x)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_push_back(self, x)

    def front(self):
        r"""front(mtsEventsWriteDescription self) -> mtsEventWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_front(self)

    def back(self):
        r"""back(mtsEventsWriteDescription self) -> mtsEventWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_back(self)

    def assign(self, n, x):
        r"""assign(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type n, mtsEventWriteDescription x)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type new_size)
        resize(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type new_size, mtsEventWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator pos, mtsEventWriteDescription x) -> std::vector< mtsEventWriteDescription >::iterator
        insert(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator pos, std::vector< mtsEventWriteDescription >::size_type n, mtsEventWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_reserve(self, n)

    def capacity(self):
        r"""capacity(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_capacity(self)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventsWriteDescription

# Register mtsEventsWriteDescription in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsEventsWriteDescription_swigregister(mtsEventsWriteDescription)

class mtsDoubleVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleVec self) -> mtsDoubleVec
        __init__(mtsDoubleVec self, mtsVector< double >::size_type size) -> mtsDoubleVec
        __init__(mtsDoubleVec self, mtsDoubleVec otherVector) -> mtsDoubleVec
        __init__(mtsDoubleVec self, mtsVector< double >::VectorType const & otherVector) -> mtsDoubleVec
        """
        _cisstMultiTaskPython.mtsDoubleVec_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleVec

    def __str__(self):
        r"""__str__(mtsDoubleVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsDoubleVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsDoubleVec self) -> mtsVector< double >::VectorType
        Data(mtsDoubleVec self) -> mtsVector< double >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsDoubleVec_Data(self, *args)

# Register mtsDoubleVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleVec_swigregister(mtsDoubleVec)

def mtsDoubleVec_ClassServices():
    r"""mtsDoubleVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleVec_ClassServices()

class mtsFloatVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatVec self) -> mtsFloatVec
        __init__(mtsFloatVec self, mtsVector< float >::size_type size) -> mtsFloatVec
        __init__(mtsFloatVec self, mtsFloatVec otherVector) -> mtsFloatVec
        __init__(mtsFloatVec self, mtsVector< float >::VectorType const & otherVector) -> mtsFloatVec
        """
        _cisstMultiTaskPython.mtsFloatVec_swiginit(self, _cisstMultiTaskPython.new_mtsFloatVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatVec

    def __str__(self):
        r"""__str__(mtsFloatVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsFloatVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsFloatVec self) -> mtsVector< float >::VectorType
        Data(mtsFloatVec self) -> mtsVector< float >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsFloatVec_Data(self, *args)

# Register mtsFloatVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatVec_swigregister(mtsFloatVec)

def mtsFloatVec_ClassServices():
    r"""mtsFloatVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatVec_ClassServices()

class mtsLongVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLongVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsLongVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLongVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsLongVec self) -> mtsLongVec
        __init__(mtsLongVec self, mtsVector< long >::size_type size) -> mtsLongVec
        __init__(mtsLongVec self, mtsLongVec otherVector) -> mtsLongVec
        __init__(mtsLongVec self, mtsVector< long >::VectorType const & otherVector) -> mtsLongVec
        """
        _cisstMultiTaskPython.mtsLongVec_swiginit(self, _cisstMultiTaskPython.new_mtsLongVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLongVec

    def __str__(self):
        r"""__str__(mtsLongVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsLongVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsLongVec self) -> mtsVector< long >::VectorType
        Data(mtsLongVec self) -> mtsVector< long >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsLongVec_Data(self, *args)

# Register mtsLongVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsLongVec_swigregister(mtsLongVec)

def mtsLongVec_ClassServices():
    r"""mtsLongVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsLongVec_ClassServices()

class mtsULongVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsULongVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsULongVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsULongVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsULongVec self) -> mtsULongVec
        __init__(mtsULongVec self, mtsVector< unsigned long >::size_type size) -> mtsULongVec
        __init__(mtsULongVec self, mtsULongVec otherVector) -> mtsULongVec
        __init__(mtsULongVec self, mtsVector< unsigned long >::VectorType const & otherVector) -> mtsULongVec
        """
        _cisstMultiTaskPython.mtsULongVec_swiginit(self, _cisstMultiTaskPython.new_mtsULongVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsULongVec

    def __str__(self):
        r"""__str__(mtsULongVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsULongVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsULongVec self) -> mtsVector< unsigned long >::VectorType
        Data(mtsULongVec self) -> mtsVector< unsigned long >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsULongVec_Data(self, *args)

# Register mtsULongVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsULongVec_swigregister(mtsULongVec)

def mtsULongVec_ClassServices():
    r"""mtsULongVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsULongVec_ClassServices()

class mtsIntVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsIntVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsIntVec self) -> mtsIntVec
        __init__(mtsIntVec self, mtsVector< int >::size_type size) -> mtsIntVec
        __init__(mtsIntVec self, mtsIntVec otherVector) -> mtsIntVec
        __init__(mtsIntVec self, mtsVector< int >::VectorType const & otherVector) -> mtsIntVec
        """
        _cisstMultiTaskPython.mtsIntVec_swiginit(self, _cisstMultiTaskPython.new_mtsIntVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntVec

    def __str__(self):
        r"""__str__(mtsIntVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsIntVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsIntVec self) -> mtsVector< int >::VectorType
        Data(mtsIntVec self) -> mtsVector< int >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsIntVec_Data(self, *args)

# Register mtsIntVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsIntVec_swigregister(mtsIntVec)

def mtsIntVec_ClassServices():
    r"""mtsIntVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsIntVec_ClassServices()

class mtsUIntVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUIntVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUIntVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUIntVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsUIntVec self) -> mtsUIntVec
        __init__(mtsUIntVec self, mtsVector< unsigned int >::size_type size) -> mtsUIntVec
        __init__(mtsUIntVec self, mtsUIntVec otherVector) -> mtsUIntVec
        __init__(mtsUIntVec self, mtsVector< unsigned int >::VectorType const & otherVector) -> mtsUIntVec
        """
        _cisstMultiTaskPython.mtsUIntVec_swiginit(self, _cisstMultiTaskPython.new_mtsUIntVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUIntVec

    def __str__(self):
        r"""__str__(mtsUIntVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsUIntVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsUIntVec self) -> mtsVector< unsigned int >::VectorType
        Data(mtsUIntVec self) -> mtsVector< unsigned int >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsUIntVec_Data(self, *args)

# Register mtsUIntVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUIntVec_swigregister(mtsUIntVec)

def mtsUIntVec_ClassServices():
    r"""mtsUIntVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUIntVec_ClassServices()

class mtsShortVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShortVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsShortVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShortVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsShortVec self) -> mtsShortVec
        __init__(mtsShortVec self, mtsVector< short >::size_type size) -> mtsShortVec
        __init__(mtsShortVec self, mtsShortVec otherVector) -> mtsShortVec
        __init__(mtsShortVec self, mtsVector< short >::VectorType const & otherVector) -> mtsShortVec
        """
        _cisstMultiTaskPython.mtsShortVec_swiginit(self, _cisstMultiTaskPython.new_mtsShortVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShortVec

    def __str__(self):
        r"""__str__(mtsShortVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsShortVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsShortVec self) -> mtsVector< short >::VectorType
        Data(mtsShortVec self) -> mtsVector< short >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsShortVec_Data(self, *args)

# Register mtsShortVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsShortVec_swigregister(mtsShortVec)

def mtsShortVec_ClassServices():
    r"""mtsShortVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsShortVec_ClassServices()

class mtsUShortVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< unsigned short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUShortVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUShortVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUShortVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsUShortVec self) -> mtsUShortVec
        __init__(mtsUShortVec self, mtsVector< unsigned short >::size_type size) -> mtsUShortVec
        __init__(mtsUShortVec self, mtsUShortVec otherVector) -> mtsUShortVec
        __init__(mtsUShortVec self, mtsVector< unsigned short >::VectorType const & otherVector) -> mtsUShortVec
        """
        _cisstMultiTaskPython.mtsUShortVec_swiginit(self, _cisstMultiTaskPython.new_mtsUShortVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUShortVec

    def __str__(self):
        r"""__str__(mtsUShortVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsUShortVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsUShortVec self) -> mtsVector< unsigned short >::VectorType
        Data(mtsUShortVec self) -> mtsVector< unsigned short >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsUShortVec_Data(self, *args)

# Register mtsUShortVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUShortVec_swigregister(mtsUShortVec)

def mtsUShortVec_ClassServices():
    r"""mtsUShortVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUShortVec_ClassServices()

class mtsCharVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsCharVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsCharVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsCharVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsCharVec self) -> mtsCharVec
        __init__(mtsCharVec self, mtsVector< char >::size_type size) -> mtsCharVec
        __init__(mtsCharVec self, mtsCharVec otherVector) -> mtsCharVec
        __init__(mtsCharVec self, mtsVector< char >::VectorType const & otherVector) -> mtsCharVec
        """
        _cisstMultiTaskPython.mtsCharVec_swiginit(self, _cisstMultiTaskPython.new_mtsCharVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCharVec

    def __str__(self):
        r"""__str__(mtsCharVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsCharVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsCharVec self) -> mtsVector< char >::VectorType
        Data(mtsCharVec self) -> mtsVector< char >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsCharVec_Data(self, *args)

# Register mtsCharVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsCharVec_swigregister(mtsCharVec)

def mtsCharVec_ClassServices():
    r"""mtsCharVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsCharVec_ClassServices()

class mtsUCharVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< unsigned char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUCharVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsUCharVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUCharVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsUCharVec self) -> mtsUCharVec
        __init__(mtsUCharVec self, mtsVector< unsigned char >::size_type size) -> mtsUCharVec
        __init__(mtsUCharVec self, mtsUCharVec otherVector) -> mtsUCharVec
        __init__(mtsUCharVec self, mtsVector< unsigned char >::VectorType const & otherVector) -> mtsUCharVec
        """
        _cisstMultiTaskPython.mtsUCharVec_swiginit(self, _cisstMultiTaskPython.new_mtsUCharVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUCharVec

    def __str__(self):
        r"""__str__(mtsUCharVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsUCharVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsUCharVec self) -> mtsVector< unsigned char >::VectorType
        Data(mtsUCharVec self) -> mtsVector< unsigned char >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsUCharVec_Data(self, *args)

# Register mtsUCharVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsUCharVec_swigregister(mtsUCharVec)

def mtsUCharVec_ClassServices():
    r"""mtsUCharVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsUCharVec_ClassServices()

class mtsBoolVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsBoolVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsBoolVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsBoolVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsBoolVec self) -> mtsBoolVec
        __init__(mtsBoolVec self, mtsVector< bool >::size_type size) -> mtsBoolVec
        __init__(mtsBoolVec self, mtsBoolVec otherVector) -> mtsBoolVec
        __init__(mtsBoolVec self, mtsVector< bool >::VectorType const & otherVector) -> mtsBoolVec
        """
        _cisstMultiTaskPython.mtsBoolVec_swiginit(self, _cisstMultiTaskPython.new_mtsBoolVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsBoolVec

    def __str__(self):
        r"""__str__(mtsBoolVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsBoolVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsBoolVec self) -> mtsVector< bool >::VectorType
        Data(mtsBoolVec self) -> mtsVector< bool >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsBoolVec_Data(self, *args)

# Register mtsBoolVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsBoolVec_swigregister(mtsBoolVec)

def mtsBoolVec_ClassServices():
    r"""mtsBoolVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsBoolVec_ClassServices()

class mtsStdStringVec(mtsGenericObject):
    r"""Proxy of C++ mtsVector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringVec_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStdStringVec_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringVec_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsStdStringVec self) -> mtsStdStringVec
        __init__(mtsStdStringVec self, mtsVector< std::string >::size_type size) -> mtsStdStringVec
        __init__(mtsStdStringVec self, mtsStdStringVec otherVector) -> mtsStdStringVec
        __init__(mtsStdStringVec self, mtsVector< std::string >::VectorType const & otherVector) -> mtsStdStringVec
        """
        _cisstMultiTaskPython.mtsStdStringVec_swiginit(self, _cisstMultiTaskPython.new_mtsStdStringVec(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringVec

    def __str__(self):
        r"""__str__(mtsStdStringVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsStdStringVec___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsStdStringVec self) -> mtsVector< std::string >::VectorType
        Data(mtsStdStringVec self) -> mtsVector< std::string >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsStdStringVec_Data(self, *args)

# Register mtsStdStringVec in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStdStringVec_swigregister(mtsStdStringVec)

def mtsStdStringVec_ClassServices():
    r"""mtsStdStringVec_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStdStringVec_ClassServices()

class mtsDoubleMat(mtsGenericObject):
    r"""Proxy of C++ mtsMatrix< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMat_ClassServices()
    DIMENSION = _cisstMultiTaskPython.mtsDoubleMat_DIMENSION
    

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleMat self) -> mtsDoubleMat
        __init__(mtsDoubleMat self, mtsMatrix< double >::size_type rows, mtsMatrix< double >::size_type cols) -> mtsDoubleMat
        __init__(mtsDoubleMat self, mtsMatrix< double >::nsize_type const & size) -> mtsDoubleMat
        __init__(mtsDoubleMat self, mtsDoubleMat otherMatrix) -> mtsDoubleMat
        __init__(mtsDoubleMat self, mtsMatrix< double >::MatrixType const & otherMatrix) -> mtsDoubleMat
        """
        _cisstMultiTaskPython.mtsDoubleMat_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMat

    def __str__(self):
        r"""__str__(mtsDoubleMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsDoubleMat___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsDoubleMat self) -> mtsMatrix< double >::MatrixType
        Data(mtsDoubleMat self) -> mtsMatrix< double >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsDoubleMat_Data(self, *args)

# Register mtsDoubleMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleMat_swigregister(mtsDoubleMat)

def mtsDoubleMat_ClassServices():
    r"""mtsDoubleMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleMat_ClassServices()

class mtsIntMat(mtsGenericObject):
    r"""Proxy of C++ mtsMatrix< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsIntMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntMat_ClassServices()
    DIMENSION = _cisstMultiTaskPython.mtsIntMat_DIMENSION
    

    def __init__(self, *args):
        r"""
        __init__(mtsIntMat self) -> mtsIntMat
        __init__(mtsIntMat self, mtsMatrix< int >::size_type rows, mtsMatrix< int >::size_type cols) -> mtsIntMat
        __init__(mtsIntMat self, mtsMatrix< int >::nsize_type const & size) -> mtsIntMat
        __init__(mtsIntMat self, mtsIntMat otherMatrix) -> mtsIntMat
        __init__(mtsIntMat self, mtsMatrix< int >::MatrixType const & otherMatrix) -> mtsIntMat
        """
        _cisstMultiTaskPython.mtsIntMat_swiginit(self, _cisstMultiTaskPython.new_mtsIntMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntMat

    def __str__(self):
        r"""__str__(mtsIntMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsIntMat___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsIntMat self) -> mtsMatrix< int >::MatrixType
        Data(mtsIntMat self) -> mtsMatrix< int >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsIntMat_Data(self, *args)

# Register mtsIntMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsIntMat_swigregister(mtsIntMat)

def mtsIntMat_ClassServices():
    r"""mtsIntMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsIntMat_ClassServices()

class mtsShortMat(mtsGenericObject):
    r"""Proxy of C++ mtsMatrix< short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShortMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsShortMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShortMat_ClassServices()
    DIMENSION = _cisstMultiTaskPython.mtsShortMat_DIMENSION
    

    def __init__(self, *args):
        r"""
        __init__(mtsShortMat self) -> mtsShortMat
        __init__(mtsShortMat self, mtsMatrix< short >::size_type rows, mtsMatrix< short >::size_type cols) -> mtsShortMat
        __init__(mtsShortMat self, mtsMatrix< short >::nsize_type const & size) -> mtsShortMat
        __init__(mtsShortMat self, mtsShortMat otherMatrix) -> mtsShortMat
        __init__(mtsShortMat self, mtsMatrix< short >::MatrixType const & otherMatrix) -> mtsShortMat
        """
        _cisstMultiTaskPython.mtsShortMat_swiginit(self, _cisstMultiTaskPython.new_mtsShortMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShortMat

    def __str__(self):
        r"""__str__(mtsShortMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsShortMat___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsShortMat self) -> mtsMatrix< short >::MatrixType
        Data(mtsShortMat self) -> mtsMatrix< short >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsShortMat_Data(self, *args)

# Register mtsShortMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsShortMat_swigregister(mtsShortMat)

def mtsShortMat_ClassServices():
    r"""mtsShortMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsShortMat_ClassServices()

class mtsLongMat(mtsGenericObject):
    r"""Proxy of C++ mtsMatrix< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLongMat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsLongMat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLongMat_ClassServices()
    DIMENSION = _cisstMultiTaskPython.mtsLongMat_DIMENSION
    

    def __init__(self, *args):
        r"""
        __init__(mtsLongMat self) -> mtsLongMat
        __init__(mtsLongMat self, mtsMatrix< long >::size_type rows, mtsMatrix< long >::size_type cols) -> mtsLongMat
        __init__(mtsLongMat self, mtsMatrix< long >::nsize_type const & size) -> mtsLongMat
        __init__(mtsLongMat self, mtsLongMat otherMatrix) -> mtsLongMat
        __init__(mtsLongMat self, mtsMatrix< long >::MatrixType const & otherMatrix) -> mtsLongMat
        """
        _cisstMultiTaskPython.mtsLongMat_swiginit(self, _cisstMultiTaskPython.new_mtsLongMat(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLongMat

    def __str__(self):
        r"""__str__(mtsLongMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsLongMat___str__(self)

    def Data(self, *args):
        r"""
        Data(mtsLongMat self) -> mtsMatrix< long >::MatrixType
        Data(mtsLongMat self) -> mtsMatrix< long >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsLongMat_Data(self, *args)

# Register mtsLongMat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsLongMat_swigregister(mtsLongMat)

def mtsLongMat_ClassServices():
    r"""mtsLongMat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsLongMat_ClassServices()

class mtsDoubleQuat(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleQuat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleQuat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleQuat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleQuat_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleQuat self) -> mtsDoubleQuat
        __init__(mtsDoubleQuat self, vctDoubleQuat const & other) -> mtsDoubleQuat
        """
        _cisstMultiTaskPython.mtsDoubleQuat_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleQuat(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleQuat self) -> vctDoubleQuat
        Data(mtsDoubleQuat self) -> vctDoubleQuat const &
        """
        return _cisstMultiTaskPython.mtsDoubleQuat_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleQuat

# Register mtsDoubleQuat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleQuat_swigregister(mtsDoubleQuat)

def mtsDoubleQuat_ClassServices():
    r"""mtsDoubleQuat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleQuat_ClassServices()

class mtsFloatQuat(mtsGenericObject):
    r"""Proxy of C++ mtsFloatQuat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatQuat_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatQuat_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatQuat_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatQuat self) -> mtsFloatQuat
        __init__(mtsFloatQuat self, vctFloatQuat const & other) -> mtsFloatQuat
        """
        _cisstMultiTaskPython.mtsFloatQuat_swiginit(self, _cisstMultiTaskPython.new_mtsFloatQuat(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatQuat self) -> vctFloatQuat
        Data(mtsFloatQuat self) -> vctFloatQuat const &
        """
        return _cisstMultiTaskPython.mtsFloatQuat_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatQuat

# Register mtsFloatQuat in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatQuat_swigregister(mtsFloatQuat)

def mtsFloatQuat_ClassServices():
    r"""mtsFloatQuat_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatQuat_ClassServices()

class mtsDoubleQuatRot3(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleQuatRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleQuatRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleQuatRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleQuatRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleQuatRot3 self) -> mtsDoubleQuatRot3
        __init__(mtsDoubleQuatRot3 self, vctDoubleQuatRot3 const & other) -> mtsDoubleQuatRot3
        """
        _cisstMultiTaskPython.mtsDoubleQuatRot3_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleQuatRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleQuatRot3 self) -> vctDoubleQuatRot3
        Data(mtsDoubleQuatRot3 self) -> vctDoubleQuatRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleQuatRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleQuatRot3

# Register mtsDoubleQuatRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleQuatRot3_swigregister(mtsDoubleQuatRot3)

def mtsDoubleQuatRot3_ClassServices():
    r"""mtsDoubleQuatRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleQuatRot3_ClassServices()

class mtsFloatQuatRot3(mtsGenericObject):
    r"""Proxy of C++ mtsFloatQuatRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatQuatRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatQuatRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatQuatRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatQuatRot3 self) -> mtsFloatQuatRot3
        __init__(mtsFloatQuatRot3 self, vctFloatQuatRot3 const & other) -> mtsFloatQuatRot3
        """
        _cisstMultiTaskPython.mtsFloatQuatRot3_swiginit(self, _cisstMultiTaskPython.new_mtsFloatQuatRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatQuatRot3 self) -> vctFloatQuatRot3
        Data(mtsFloatQuatRot3 self) -> vctFloatQuatRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatQuatRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatQuatRot3

# Register mtsFloatQuatRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatQuatRot3_swigregister(mtsFloatQuatRot3)

def mtsFloatQuatRot3_ClassServices():
    r"""mtsFloatQuatRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatQuatRot3_ClassServices()

class mtsDoubleAxAnRot3(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleAxAnRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleAxAnRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleAxAnRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleAxAnRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleAxAnRot3 self) -> mtsDoubleAxAnRot3
        __init__(mtsDoubleAxAnRot3 self, vctDoubleAxAnRot3 const & other) -> mtsDoubleAxAnRot3
        """
        _cisstMultiTaskPython.mtsDoubleAxAnRot3_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleAxAnRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleAxAnRot3 self) -> vctDoubleAxAnRot3
        Data(mtsDoubleAxAnRot3 self) -> vctDoubleAxAnRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleAxAnRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleAxAnRot3

# Register mtsDoubleAxAnRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleAxAnRot3_swigregister(mtsDoubleAxAnRot3)

def mtsDoubleAxAnRot3_ClassServices():
    r"""mtsDoubleAxAnRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleAxAnRot3_ClassServices()

class mtsFloatAxAnRot3(mtsGenericObject):
    r"""Proxy of C++ mtsFloatAxAnRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatAxAnRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatAxAnRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatAxAnRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatAxAnRot3 self) -> mtsFloatAxAnRot3
        __init__(mtsFloatAxAnRot3 self, vctFloatAxAnRot3 const & other) -> mtsFloatAxAnRot3
        """
        _cisstMultiTaskPython.mtsFloatAxAnRot3_swiginit(self, _cisstMultiTaskPython.new_mtsFloatAxAnRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatAxAnRot3 self) -> vctFloatAxAnRot3
        Data(mtsFloatAxAnRot3 self) -> vctFloatAxAnRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatAxAnRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatAxAnRot3

# Register mtsFloatAxAnRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatAxAnRot3_swigregister(mtsFloatAxAnRot3)

def mtsFloatAxAnRot3_ClassServices():
    r"""mtsFloatAxAnRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatAxAnRot3_ClassServices()

class mtsDoubleRodRot3(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleRodRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleRodRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleRodRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleRodRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleRodRot3 self) -> mtsDoubleRodRot3
        __init__(mtsDoubleRodRot3 self, vctDoubleRodRot3 const & other) -> mtsDoubleRodRot3
        """
        _cisstMultiTaskPython.mtsDoubleRodRot3_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleRodRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleRodRot3 self) -> vctDoubleRodRot3
        Data(mtsDoubleRodRot3 self) -> vctDoubleRodRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleRodRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleRodRot3

# Register mtsDoubleRodRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleRodRot3_swigregister(mtsDoubleRodRot3)

def mtsDoubleRodRot3_ClassServices():
    r"""mtsDoubleRodRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleRodRot3_ClassServices()

class mtsFloatRodRot3(mtsGenericObject):
    r"""Proxy of C++ mtsFloatRodRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatRodRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatRodRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatRodRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatRodRot3 self) -> mtsFloatRodRot3
        __init__(mtsFloatRodRot3 self, vctFloatRodRot3 const & other) -> mtsFloatRodRot3
        """
        _cisstMultiTaskPython.mtsFloatRodRot3_swiginit(self, _cisstMultiTaskPython.new_mtsFloatRodRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatRodRot3 self) -> vctFloatRodRot3
        Data(mtsFloatRodRot3 self) -> vctFloatRodRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatRodRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatRodRot3

# Register mtsFloatRodRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatRodRot3_swigregister(mtsFloatRodRot3)

def mtsFloatRodRot3_ClassServices():
    r"""mtsFloatRodRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatRodRot3_ClassServices()

class mtsDoubleMatRot3(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleMatRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMatRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMatRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMatRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleMatRot3 self) -> mtsDoubleMatRot3
        __init__(mtsDoubleMatRot3 self, vctDoubleMatRot3 const & other) -> mtsDoubleMatRot3
        """
        _cisstMultiTaskPython.mtsDoubleMatRot3_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleMatRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleMatRot3 self) -> vctDoubleMatRot3
        Data(mtsDoubleMatRot3 self) -> vctDoubleMatRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleMatRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMatRot3

# Register mtsDoubleMatRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleMatRot3_swigregister(mtsDoubleMatRot3)

def mtsDoubleMatRot3_ClassServices():
    r"""mtsDoubleMatRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleMatRot3_ClassServices()

class mtsFloatMatRot3(mtsGenericObject):
    r"""Proxy of C++ mtsFloatMatRot3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatMatRot3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatMatRot3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatMatRot3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatMatRot3 self) -> mtsFloatMatRot3
        __init__(mtsFloatMatRot3 self, vctFloatMatRot3 const & other) -> mtsFloatMatRot3
        """
        _cisstMultiTaskPython.mtsFloatMatRot3_swiginit(self, _cisstMultiTaskPython.new_mtsFloatMatRot3(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatMatRot3 self) -> vctFloatMatRot3
        Data(mtsFloatMatRot3 self) -> vctFloatMatRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatMatRot3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatMatRot3

# Register mtsFloatMatRot3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatMatRot3_swigregister(mtsFloatMatRot3)

def mtsFloatMatRot3_ClassServices():
    r"""mtsFloatMatRot3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatMatRot3_ClassServices()

class mtsDoubleQuatFrm3(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleQuatFrm3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleQuatFrm3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleQuatFrm3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleQuatFrm3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleQuatFrm3 self) -> mtsDoubleQuatFrm3
        __init__(mtsDoubleQuatFrm3 self, vctDoubleQuatFrm3 const & other) -> mtsDoubleQuatFrm3
        """
        _cisstMultiTaskPython.mtsDoubleQuatFrm3_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleQuatFrm3(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleQuatFrm3 self) -> vctDoubleQuatFrm3
        Data(mtsDoubleQuatFrm3 self) -> vctDoubleQuatFrm3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleQuatFrm3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleQuatFrm3

# Register mtsDoubleQuatFrm3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleQuatFrm3_swigregister(mtsDoubleQuatFrm3)

def mtsDoubleQuatFrm3_ClassServices():
    r"""mtsDoubleQuatFrm3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleQuatFrm3_ClassServices()

class mtsFloatQuatFrm3(mtsGenericObject):
    r"""Proxy of C++ mtsFloatQuatFrm3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatQuatFrm3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatQuatFrm3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatQuatFrm3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatQuatFrm3 self) -> mtsFloatQuatFrm3
        __init__(mtsFloatQuatFrm3 self, vctFloatQuatFrm3 const & other) -> mtsFloatQuatFrm3
        """
        _cisstMultiTaskPython.mtsFloatQuatFrm3_swiginit(self, _cisstMultiTaskPython.new_mtsFloatQuatFrm3(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatQuatFrm3 self) -> vctFloatQuatFrm3
        Data(mtsFloatQuatFrm3 self) -> vctFloatQuatFrm3 const &
        """
        return _cisstMultiTaskPython.mtsFloatQuatFrm3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatQuatFrm3

# Register mtsFloatQuatFrm3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatQuatFrm3_swigregister(mtsFloatQuatFrm3)

def mtsFloatQuatFrm3_ClassServices():
    r"""mtsFloatQuatFrm3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatQuatFrm3_ClassServices()

class mtsDoubleMatFrm3(mtsGenericObject, cisstVectorPython.vctFrm3):
    r"""Proxy of C++ mtsDoubleMatFrm3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMatFrm3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMatFrm3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMatFrm3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleMatFrm3 self) -> mtsDoubleMatFrm3
        __init__(mtsDoubleMatFrm3 self, vctFrm3 other) -> mtsDoubleMatFrm3
        """
        _cisstMultiTaskPython.mtsDoubleMatFrm3_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleMatFrm3(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleMatFrm3 self) -> vctFrm3
        Data(mtsDoubleMatFrm3 self) -> vctFrm3
        """
        return _cisstMultiTaskPython.mtsDoubleMatFrm3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMatFrm3

# Register mtsDoubleMatFrm3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleMatFrm3_swigregister(mtsDoubleMatFrm3)

def mtsDoubleMatFrm3_ClassServices():
    r"""mtsDoubleMatFrm3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleMatFrm3_ClassServices()

class mtsFloatMatFrm3(mtsGenericObject):
    r"""Proxy of C++ mtsFloatMatFrm3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatMatFrm3_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatMatFrm3_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatMatFrm3_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatMatFrm3 self) -> mtsFloatMatFrm3
        __init__(mtsFloatMatFrm3 self, vctFloatMatFrm3 const & other) -> mtsFloatMatFrm3
        """
        _cisstMultiTaskPython.mtsFloatMatFrm3_swiginit(self, _cisstMultiTaskPython.new_mtsFloatMatFrm3(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatMatFrm3 self) -> vctFloatMatFrm3
        Data(mtsFloatMatFrm3 self) -> vctFloatMatFrm3 const &
        """
        return _cisstMultiTaskPython.mtsFloatMatFrm3_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatMatFrm3

# Register mtsFloatMatFrm3 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatMatFrm3_swigregister(mtsFloatMatFrm3)

def mtsFloatMatFrm3_ClassServices():
    r"""mtsFloatMatFrm3_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatMatFrm3_ClassServices()

class mtsDoubleFrm4x4(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleFrm4x4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleFrm4x4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleFrm4x4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleFrm4x4_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleFrm4x4 self) -> mtsDoubleFrm4x4
        __init__(mtsDoubleFrm4x4 self, vctDoubleFrm4x4 const & other) -> mtsDoubleFrm4x4
        """
        _cisstMultiTaskPython.mtsDoubleFrm4x4_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleFrm4x4(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleFrm4x4 self) -> vctDoubleFrm4x4
        Data(mtsDoubleFrm4x4 self) -> vctDoubleFrm4x4 const &
        """
        return _cisstMultiTaskPython.mtsDoubleFrm4x4_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleFrm4x4

# Register mtsDoubleFrm4x4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleFrm4x4_swigregister(mtsDoubleFrm4x4)

def mtsDoubleFrm4x4_ClassServices():
    r"""mtsDoubleFrm4x4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleFrm4x4_ClassServices()

class mtsFloatFrm4x4(mtsGenericObject):
    r"""Proxy of C++ mtsFloatFrm4x4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatFrm4x4_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatFrm4x4_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatFrm4x4_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatFrm4x4 self) -> mtsFloatFrm4x4
        __init__(mtsFloatFrm4x4 self, vctFloatFrm4x4 const & other) -> mtsFloatFrm4x4
        """
        _cisstMultiTaskPython.mtsFloatFrm4x4_swiginit(self, _cisstMultiTaskPython.new_mtsFloatFrm4x4(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatFrm4x4 self) -> vctFloatFrm4x4
        Data(mtsFloatFrm4x4 self) -> vctFloatFrm4x4 const &
        """
        return _cisstMultiTaskPython.mtsFloatFrm4x4_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatFrm4x4

# Register mtsFloatFrm4x4 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatFrm4x4_swigregister(mtsFloatFrm4x4)

def mtsFloatFrm4x4_ClassServices():
    r"""mtsFloatFrm4x4_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatFrm4x4_ClassServices()

class mtsDoubleAnRot2(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleAnRot2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleAnRot2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleAnRot2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleAnRot2_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleAnRot2 self) -> mtsDoubleAnRot2
        __init__(mtsDoubleAnRot2 self, vctDoubleAnRot2 const & other) -> mtsDoubleAnRot2
        """
        _cisstMultiTaskPython.mtsDoubleAnRot2_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleAnRot2(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleAnRot2 self) -> vctDoubleAnRot2
        Data(mtsDoubleAnRot2 self) -> vctDoubleAnRot2 const &
        """
        return _cisstMultiTaskPython.mtsDoubleAnRot2_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleAnRot2

# Register mtsDoubleAnRot2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleAnRot2_swigregister(mtsDoubleAnRot2)

def mtsDoubleAnRot2_ClassServices():
    r"""mtsDoubleAnRot2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleAnRot2_ClassServices()

class mtsFloatAnRot2(mtsGenericObject):
    r"""Proxy of C++ mtsFloatAnRot2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatAnRot2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatAnRot2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatAnRot2_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatAnRot2 self) -> mtsFloatAnRot2
        __init__(mtsFloatAnRot2 self, vctFloatAnRot2 const & other) -> mtsFloatAnRot2
        """
        _cisstMultiTaskPython.mtsFloatAnRot2_swiginit(self, _cisstMultiTaskPython.new_mtsFloatAnRot2(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatAnRot2 self) -> vctFloatAnRot2
        Data(mtsFloatAnRot2 self) -> vctFloatAnRot2 const &
        """
        return _cisstMultiTaskPython.mtsFloatAnRot2_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatAnRot2

# Register mtsFloatAnRot2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatAnRot2_swigregister(mtsFloatAnRot2)

def mtsFloatAnRot2_ClassServices():
    r"""mtsFloatAnRot2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatAnRot2_ClassServices()

class mtsDoubleMatRot2(mtsGenericObject):
    r"""Proxy of C++ mtsDoubleMatRot2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMatRot2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMatRot2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMatRot2_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsDoubleMatRot2 self) -> mtsDoubleMatRot2
        __init__(mtsDoubleMatRot2 self, vctDoubleMatRot2 const & other) -> mtsDoubleMatRot2
        """
        _cisstMultiTaskPython.mtsDoubleMatRot2_swiginit(self, _cisstMultiTaskPython.new_mtsDoubleMatRot2(*args))

    def Data(self, *args):
        r"""
        Data(mtsDoubleMatRot2 self) -> vctDoubleMatRot2
        Data(mtsDoubleMatRot2 self) -> vctDoubleMatRot2 const &
        """
        return _cisstMultiTaskPython.mtsDoubleMatRot2_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMatRot2

# Register mtsDoubleMatRot2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsDoubleMatRot2_swigregister(mtsDoubleMatRot2)

def mtsDoubleMatRot2_ClassServices():
    r"""mtsDoubleMatRot2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsDoubleMatRot2_ClassServices()

class mtsFloatMatRot2(mtsGenericObject):
    r"""Proxy of C++ mtsFloatMatRot2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatMatRot2_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsFloatMatRot2_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatMatRot2_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsFloatMatRot2 self) -> mtsFloatMatRot2
        __init__(mtsFloatMatRot2 self, vctFloatMatRot2 const & other) -> mtsFloatMatRot2
        """
        _cisstMultiTaskPython.mtsFloatMatRot2_swiginit(self, _cisstMultiTaskPython.new_mtsFloatMatRot2(*args))

    def Data(self, *args):
        r"""
        Data(mtsFloatMatRot2 self) -> vctFloatMatRot2
        Data(mtsFloatMatRot2 self) -> vctFloatMatRot2 const &
        """
        return _cisstMultiTaskPython.mtsFloatMatRot2_Data(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatMatRot2

# Register mtsFloatMatRot2 in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsFloatMatRot2_swigregister(mtsFloatMatRot2)

def mtsFloatMatRot2_ClassServices():
    r"""mtsFloatMatRot2_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsFloatMatRot2_ClassServices()

class mtsStateIndex(mtsGenericObject):
    r"""Proxy of C++ mtsStateIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStateIndex_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsStateIndex_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStateIndex_ClassServices()

    def __init__(self, *args):
        r"""
        __init__(mtsStateIndex self) -> mtsStateIndex
        __init__(mtsStateIndex self, double timestamp, int index, mtsStateIndex::TimeTicksType ticks, int Length) -> mtsStateIndex
        """
        _cisstMultiTaskPython.mtsStateIndex_swiginit(self, _cisstMultiTaskPython.new_mtsStateIndex(*args))
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStateIndex

    def Length(self):
        r"""Length(mtsStateIndex self) -> int"""
        return _cisstMultiTaskPython.mtsStateIndex_Length(self)

    def Index(self):
        r"""Index(mtsStateIndex self) -> int"""
        return _cisstMultiTaskPython.mtsStateIndex_Index(self)

    def Ticks(self):
        r"""Ticks(mtsStateIndex self) -> mtsStateIndex::TimeTicksType"""
        return _cisstMultiTaskPython.mtsStateIndex_Ticks(self)

    def __isub__(self, number):
        r"""__isub__(mtsStateIndex self, int number) -> mtsStateIndex"""
        return _cisstMultiTaskPython.mtsStateIndex___isub__(self, number)

    def __sub__(self, number):
        r"""__sub__(mtsStateIndex self, int number) -> mtsStateIndex"""
        return _cisstMultiTaskPython.mtsStateIndex___sub__(self, number)

    def __eq__(self, that):
        r"""__eq__(mtsStateIndex self, mtsStateIndex that) -> bool"""
        return _cisstMultiTaskPython.mtsStateIndex___eq__(self, that)

    def __ne__(self, that):
        r"""__ne__(mtsStateIndex self, mtsStateIndex that) -> bool"""
        return _cisstMultiTaskPython.mtsStateIndex___ne__(self, that)

# Register mtsStateIndex in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsStateIndex_swigregister(mtsStateIndex)

def mtsStateIndex_ClassServices():
    r"""mtsStateIndex_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsStateIndex_ClassServices()

class mtsIntervalStatistics(mtsGenericObject):
    r"""Proxy of C++ mtsIntervalStatistics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntervalStatistics_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstMultiTaskPython.mtsIntervalStatistics_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_ClassServices()

    def PeriodAvg(self):
        r"""PeriodAvg(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_PeriodAvg(self)

    def PeriodStdDev(self):
        r"""PeriodStdDev(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_PeriodStdDev(self)

    def PeriodMin(self):
        r"""PeriodMin(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_PeriodMin(self)

    def PeriodMax(self):
        r"""PeriodMax(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_PeriodMax(self)

    def ComputeTimeAvg(self):
        r"""ComputeTimeAvg(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_ComputeTimeAvg(self)

    def ComputeTimeStdDev(self):
        r"""ComputeTimeStdDev(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_ComputeTimeStdDev(self)

    def ComputeTimeMin(self):
        r"""ComputeTimeMin(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_ComputeTimeMin(self)

    def ComputeTimeMax(self):
        r"""ComputeTimeMax(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_ComputeTimeMax(self)

    def NumberOfSamples(self):
        r"""NumberOfSamples(mtsIntervalStatistics self) -> unsigned int const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_NumberOfSamples(self)

    def NumberOfOverruns(self):
        r"""NumberOfOverruns(mtsIntervalStatistics self) -> unsigned int const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_NumberOfOverruns(self)

    def SetStatisticsInterval(self, time):
        r"""SetStatisticsInterval(mtsIntervalStatistics self, double const & time)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_SetStatisticsInterval(self, time)

    def StatisticsInterval(self):
        r"""StatisticsInterval(mtsIntervalStatistics self) -> double const &"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_StatisticsInterval(self)

    def Update(self, sample, computeTime):
        r"""Update(mtsIntervalStatistics self, double const sample, double const computeTime)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_Update(self, sample, computeTime)

    def SetCallback(self, callback):
        r"""SetCallback(mtsIntervalStatistics self, mtsCallableVoidBase * callback)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_SetCallback(self, callback)

    def Reset(self):
        r"""Reset(mtsIntervalStatistics self)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_Reset(self)

    def SetFromExisting(self, periodAvg, periodStdDev, periodMin, periodMax, computeTimeAvg, computeTimeStdDev, computeTimeMin, computeTimeMax, numberOfSamples, numberOfOverruns, statisticsInterval):
        r"""SetFromExisting(mtsIntervalStatistics self, double const periodAvg, double const periodStdDev, double const periodMin, double const periodMax, double const computeTimeAvg, double const computeTimeStdDev, double const computeTimeMin, double const computeTimeMax, unsigned int const numberOfSamples, unsigned int const numberOfOverruns, double const statisticsInterval)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_SetFromExisting(self, periodAvg, periodStdDev, periodMin, periodMax, computeTimeAvg, computeTimeStdDev, computeTimeMin, computeTimeMax, numberOfSamples, numberOfOverruns, statisticsInterval)

    def __init__(self):
        r"""__init__(mtsIntervalStatistics self) -> mtsIntervalStatistics"""
        _cisstMultiTaskPython.mtsIntervalStatistics_swiginit(self, _cisstMultiTaskPython.new_mtsIntervalStatistics())
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntervalStatistics

# Register mtsIntervalStatistics in _cisstMultiTaskPython:
_cisstMultiTaskPython.mtsIntervalStatistics_swigregister(mtsIntervalStatistics)

def mtsIntervalStatistics_ClassServices():
    r"""mtsIntervalStatistics_ClassServices() -> cmnClassServicesBase"""
    return _cisstMultiTaskPython.mtsIntervalStatistics_ClassServices()



