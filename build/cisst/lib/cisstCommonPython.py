# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cisstCommonPython
else:
    import _cisstCommonPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_SwigPyIterator

    def value(self):
        return _cisstCommonPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstCommonPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstCommonPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstCommonPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstCommonPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstCommonPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstCommonPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstCommonPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstCommonPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstCommonPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstCommonPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstCommonPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstCommonPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstCommonPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstCommonPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstCommonPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cisstCommonPython:
_cisstCommonPython.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstCommonPython.ios_base_erase_event
    imbue_event = _cisstCommonPython.ios_base_imbue_event
    copyfmt_event = _cisstCommonPython.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _cisstCommonPython.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _cisstCommonPython.ios_base_flags(self, *args)

    def setf(self, *args):
        return _cisstCommonPython.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _cisstCommonPython.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _cisstCommonPython.ios_base_precision(self, *args)

    def width(self, *args):
        return _cisstCommonPython.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _cisstCommonPython.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _cisstCommonPython.ios_base_imbue(self, __loc)

    def getloc(self):
        return _cisstCommonPython.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _cisstCommonPython.ios_base_xalloc()

    def iword(self, __ix):
        return _cisstCommonPython.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _cisstCommonPython.ios_base_pword(self, __ix)
    __swig_destroy__ = _cisstCommonPython.delete_ios_base

# Register ios_base in _cisstCommonPython:
_cisstCommonPython.ios_base_swigregister(ios_base)
cvar = _cisstCommonPython.cvar
ios_base.boolalpha = _cisstCommonPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstCommonPython.cvar.ios_base_dec
ios_base.fixed = _cisstCommonPython.cvar.ios_base_fixed
ios_base.hex = _cisstCommonPython.cvar.ios_base_hex
ios_base.internal = _cisstCommonPython.cvar.ios_base_internal
ios_base.left = _cisstCommonPython.cvar.ios_base_left
ios_base.oct = _cisstCommonPython.cvar.ios_base_oct
ios_base.right = _cisstCommonPython.cvar.ios_base_right
ios_base.scientific = _cisstCommonPython.cvar.ios_base_scientific
ios_base.showbase = _cisstCommonPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstCommonPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstCommonPython.cvar.ios_base_showpos
ios_base.skipws = _cisstCommonPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstCommonPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstCommonPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstCommonPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstCommonPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstCommonPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstCommonPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstCommonPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstCommonPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstCommonPython.cvar.ios_base_goodbit
ios_base.app = _cisstCommonPython.cvar.ios_base_app
ios_base.ate = _cisstCommonPython.cvar.ios_base_ate
ios_base.binary = _cisstCommonPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstCommonPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstCommonPython.cvar.ios_base_out
ios_base.trunc = _cisstCommonPython.cvar.ios_base_trunc
ios_base.beg = _cisstCommonPython.cvar.ios_base_beg
ios_base.cur = _cisstCommonPython.cvar.ios_base_cur
ios_base.end = _cisstCommonPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _cisstCommonPython.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return _cisstCommonPython.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _cisstCommonPython.ios_rdstate(self)

    def clear(self, *args):
        return _cisstCommonPython.ios_clear(self, *args)

    def setstate(self, __state):
        return _cisstCommonPython.ios_setstate(self, __state)

    def good(self):
        return _cisstCommonPython.ios_good(self)

    def eof(self):
        return _cisstCommonPython.ios_eof(self)

    def fail(self):
        return _cisstCommonPython.ios_fail(self)

    def bad(self):
        return _cisstCommonPython.ios_bad(self)

    def exceptions(self, *args):
        return _cisstCommonPython.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _cisstCommonPython.ios_swiginit(self, _cisstCommonPython.new_ios(__sb))
    __swig_destroy__ = _cisstCommonPython.delete_ios

    def tie(self, *args):
        return _cisstCommonPython.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _cisstCommonPython.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _cisstCommonPython.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _cisstCommonPython.ios_fill(self, *args)

    def imbue(self, __loc):
        return _cisstCommonPython.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _cisstCommonPython.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _cisstCommonPython.ios_widen(self, __c)

# Register ios in _cisstCommonPython:
_cisstCommonPython.ios_swigregister(ios)

class streambuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_streambuf

    def pubimbue(self, __loc):
        return _cisstCommonPython.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _cisstCommonPython.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _cisstCommonPython.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _cisstCommonPython.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _cisstCommonPython.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _cisstCommonPython.streambuf_pubsync(self)

    def in_avail(self):
        return _cisstCommonPython.streambuf_in_avail(self)

    def snextc(self):
        return _cisstCommonPython.streambuf_snextc(self)

    def sbumpc(self):
        return _cisstCommonPython.streambuf_sbumpc(self)

    def sgetc(self):
        return _cisstCommonPython.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _cisstCommonPython.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _cisstCommonPython.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _cisstCommonPython.streambuf_sungetc(self)

    def sputc(self, __c):
        return _cisstCommonPython.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _cisstCommonPython.streambuf_sputn(self, __s, __n)

# Register streambuf in _cisstCommonPython:
_cisstCommonPython.streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstCommonPython.ostream_swiginit(self, _cisstCommonPython.new_ostream(__sb))
    __swig_destroy__ = _cisstCommonPython.delete_ostream

    def __lshift__(self, *args):
        return _cisstCommonPython.ostream___lshift__(self, *args)

    def put(self, __c):
        return _cisstCommonPython.ostream_put(self, __c)

    def write(self, __s, __n):
        return _cisstCommonPython.ostream_write(self, __s, __n)

    def flush(self):
        return _cisstCommonPython.ostream_flush(self)

    def tellp(self):
        return _cisstCommonPython.ostream_tellp(self)

    def seekp(self, *args):
        return _cisstCommonPython.ostream_seekp(self, *args)

# Register ostream in _cisstCommonPython:
_cisstCommonPython.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstCommonPython.istream_swiginit(self, _cisstCommonPython.new_istream(__sb))
    __swig_destroy__ = _cisstCommonPython.delete_istream

    def __rshift__(self, *args):
        return _cisstCommonPython.istream___rshift__(self, *args)

    def gcount(self):
        return _cisstCommonPython.istream_gcount(self)

    def get(self, *args):
        return _cisstCommonPython.istream_get(self, *args)

    def getline(self, *args):
        return _cisstCommonPython.istream_getline(self, *args)

    def ignore(self, *args):
        return _cisstCommonPython.istream_ignore(self, *args)

    def peek(self):
        return _cisstCommonPython.istream_peek(self)

    def read(self, __s, __n):
        return _cisstCommonPython.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _cisstCommonPython.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _cisstCommonPython.istream_putback(self, __c)

    def unget(self):
        return _cisstCommonPython.istream_unget(self)

    def sync(self):
        return _cisstCommonPython.istream_sync(self)

    def tellg(self):
        return _cisstCommonPython.istream_tellg(self)

    def seekg(self, *args):
        return _cisstCommonPython.istream_seekg(self, *args)

# Register istream in _cisstCommonPython:
_cisstCommonPython.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _cisstCommonPython.iostream_swiginit(self, _cisstCommonPython.new_iostream(__sb))
    __swig_destroy__ = _cisstCommonPython.delete_iostream

# Register iostream in _cisstCommonPython:
_cisstCommonPython.iostream_swigregister(iostream)

endl_cb_ptr = _cisstCommonPython.endl_cb_ptr
endl = _cisstCommonPython.endl
ends_cb_ptr = _cisstCommonPython.ends_cb_ptr
ends = _cisstCommonPython.ends
flush_cb_ptr = _cisstCommonPython.flush_cb_ptr
flush = _cisstCommonPython.flush
class cmnGenericObject(object):
    r"""Proxy of C++ cmnGenericObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_cmnGenericObject

    def Services(self):
        r"""Services(cmnGenericObject self) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnGenericObject_Services(self)

    def ReconstructFrom(self, other):
        r"""ReconstructFrom(cmnGenericObject self, cmnGenericObject other) -> bool"""
        return _cisstCommonPython.cmnGenericObject_ReconstructFrom(self, other)

    def ToString(self):
        r"""ToString(cmnGenericObject self) -> std::string"""
        return _cisstCommonPython.cmnGenericObject_ToString(self)

    def GetLogMultiplexer(self):
        r"""GetLogMultiplexer(cmnGenericObject self) -> cmnLODMultiplexerStreambufChar"""
        return _cisstCommonPython.cmnGenericObject_GetLogMultiplexer(self)

    def ScalarNumber(self):
        r"""ScalarNumber(cmnGenericObject self) -> size_t"""
        return _cisstCommonPython.cmnGenericObject_ScalarNumber(self)

    def ScalarNumberIsFixed(self):
        r"""ScalarNumberIsFixed(cmnGenericObject self) -> bool"""
        return _cisstCommonPython.cmnGenericObject_ScalarNumberIsFixed(self)

    def Scalar(self, MARKED_AS_UNUSEDindex):
        r"""Scalar(cmnGenericObject self, size_t const MARKED_AS_UNUSEDindex) -> double"""
        return _cisstCommonPython.cmnGenericObject_Scalar(self, MARKED_AS_UNUSEDindex)

    def ScalarDescription(self, MARKED_AS_UNUSEDindex, MARKED_AS_UNUSEDuserDescription):
        r"""ScalarDescription(cmnGenericObject self, size_t const MARKED_AS_UNUSEDindex, std::string const & MARKED_AS_UNUSEDuserDescription) -> std::string"""
        return _cisstCommonPython.cmnGenericObject_ScalarDescription(self, MARKED_AS_UNUSEDindex, MARKED_AS_UNUSEDuserDescription)

# Register cmnGenericObject in _cisstCommonPython:
_cisstCommonPython.cmnGenericObject_swigregister(cmnGenericObject)

class cmnClassServicesBase(object):
    r"""Proxy of C++ cmnClassServicesBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstCommonPython.delete_cmnClassServicesBase

    def CreateWithArg(self, arg):
        r"""CreateWithArg(cmnClassServicesBase self, cmnGenericObject arg) -> cmnGenericObject"""
        return _cisstCommonPython.cmnClassServicesBase_CreateWithArg(self, arg)

    def Create(self, *args):
        r"""
        Create(cmnClassServicesBase self) -> cmnGenericObject
        Create(cmnClassServicesBase self, cmnGenericObject other) -> cmnGenericObject
        Create(cmnClassServicesBase self, cmnGenericObject existing, cmnGenericObject other) -> bool
        """
        return _cisstCommonPython.cmnClassServicesBase_Create(self, *args)

    def CreateArray(self, *args):
        r"""
        CreateArray(cmnClassServicesBase self, size_t size) -> cmnGenericObject
        CreateArray(cmnClassServicesBase self, size_t size, cmnGenericObject other) -> cmnGenericObject
        """
        return _cisstCommonPython.cmnClassServicesBase_CreateArray(self, *args)

    def DeleteArray(self, data, size):
        r"""DeleteArray(cmnClassServicesBase self, cmnClassServicesBase::generic_pointer & data, size_t & size) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_DeleteArray(self, data, size)

    def Delete(self, existing):
        r"""Delete(cmnClassServicesBase self, cmnGenericObject existing) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_Delete(self, existing)

    def GetSize(self):
        r"""GetSize(cmnClassServicesBase self) -> size_t"""
        return _cisstCommonPython.cmnClassServicesBase_GetSize(self)

    def HasDynamicCreation(self):
        r"""HasDynamicCreation(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_HasDynamicCreation(self)

    def DefaultConstructorAvailable(self):
        r"""DefaultConstructorAvailable(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_DefaultConstructorAvailable(self)

    def CopyConstructorAvailable(self):
        r"""CopyConstructorAvailable(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_CopyConstructorAvailable(self)

    def OneArgConstructorAvailable(self):
        r"""OneArgConstructorAvailable(cmnClassServicesBase self) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_OneArgConstructorAvailable(self)

    def GetConstructorArgServices(self):
        r"""GetConstructorArgServices(cmnClassServicesBase self) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnClassServicesBase_GetConstructorArgServices(self)

    def GetName(self):
        r"""GetName(cmnClassServicesBase self) -> std::string const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetName(self)

    def TypeInfoPointer(self):
        r"""TypeInfoPointer(cmnClassServicesBase self) -> std::type_info const *"""
        return _cisstCommonPython.cmnClassServicesBase_TypeInfoPointer(self)

    def GetLogMask(self):
        r"""GetLogMask(cmnClassServicesBase self) -> cmnLogMask const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetLogMask(self)

    def GetLoD(self):
        r"""GetLoD(cmnClassServicesBase self) -> cmnLogMask const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetLoD(self)

    def SetLogMask(self, mask):
        r"""SetLogMask(cmnClassServicesBase self, cmnLogMask mask)"""
        return _cisstCommonPython.cmnClassServicesBase_SetLogMask(self, mask)

    def GetParentServices(self):
        r"""GetParentServices(cmnClassServicesBase self) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnClassServicesBase_GetParentServices(self)

    def IsDerivedFrom(self, parentServices):
        r"""IsDerivedFrom(cmnClassServicesBase self, cmnClassServicesBase parentServices) -> bool"""
        return _cisstCommonPython.cmnClassServicesBase_IsDerivedFrom(self, parentServices)

    def GetLibraryName(self):
        r"""GetLibraryName(cmnClassServicesBase self) -> std::string const &"""
        return _cisstCommonPython.cmnClassServicesBase_GetLibraryName(self)

# Register cmnClassServicesBase in _cisstCommonPython:
_cisstCommonPython.cmnClassServicesBase_swigregister(cmnClassServicesBase)

class cmnClassRegister(object):
    r"""Proxy of C++ cmnClassRegister class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FindClassServicesInstance(self, *args):
        r"""
        FindClassServicesInstance(cmnClassRegister self, std::string const & className) -> cmnClassServicesBase
        FindClassServicesInstance(cmnClassRegister self, std::type_info const & typeInfo) -> cmnClassServicesBase
        """
        return _cisstCommonPython.cmnClassRegister_FindClassServicesInstance(self, *args)

    def RegisterInstance(self, classServicesPointer, className):
        r"""RegisterInstance(cmnClassRegister self, cmnClassServicesBase classServicesPointer, std::string const & className) -> std::string const *"""
        return _cisstCommonPython.cmnClassRegister_RegisterInstance(self, classServicesPointer, className)

    def SetLogMaskClassAllInstance(self, mask):
        r"""SetLogMaskClassAllInstance(cmnClassRegister self, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassAllInstance(self, mask)

    def SetLogMaskClassMatchingInstance(self, stringToMatch, mask):
        r"""SetLogMaskClassMatchingInstance(cmnClassRegister self, std::string const & stringToMatch, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassMatchingInstance(self, stringToMatch, mask)

    def ToStringInstance(self):
        r"""ToStringInstance(cmnClassRegister self) -> std::string"""
        return _cisstCommonPython.cmnClassRegister_ToStringInstance(self)

    def ToStreamInstance(self, outputStream):
        r"""ToStreamInstance(cmnClassRegister self, ostream outputStream)"""
        return _cisstCommonPython.cmnClassRegister_ToStreamInstance(self, outputStream)

    def sizeInstance(self):
        r"""sizeInstance(cmnClassRegister self) -> cmnClassRegister::size_type"""
        return _cisstCommonPython.cmnClassRegister_sizeInstance(self)

    def beginInstance(self):
        r"""beginInstance(cmnClassRegister self) -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_beginInstance(self)

    def endInstance(self):
        r"""endInstance(cmnClassRegister self) -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_endInstance(self)

    @staticmethod
    def Instance():
        r"""Instance() -> cmnClassRegister"""
        return _cisstCommonPython.cmnClassRegister_Instance()

    @staticmethod
    def Register(classServicesPointer, className):
        r"""Register(cmnClassServicesBase classServicesPointer, std::string const & className) -> std::string const *"""
        return _cisstCommonPython.cmnClassRegister_Register(classServicesPointer, className)

    @staticmethod
    def SetLogMaskClass(className, mask):
        r"""SetLogMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClass(className, mask)

    @staticmethod
    def SetLogMaskClassAll(mask):
        r"""SetLogMaskClassAll(cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassAll(mask)

    @staticmethod
    def SetLogMaskClassMatching(stringToMatch, mask):
        r"""SetLogMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnClassRegister_SetLogMaskClassMatching(stringToMatch, mask)

    @staticmethod
    def FindClassServices(*args):
        r"""
        FindClassServices(std::string const & className) -> cmnClassServicesBase
        FindClassServices(std::type_info const & typeInfo) -> cmnClassServicesBase
        """
        return _cisstCommonPython.cmnClassRegister_FindClassServices(*args)

    @staticmethod
    def Create(*args):
        r"""
        Create(std::string const & className) -> cmnGenericObject
        Create(std::string const & className, cmnGenericObject other) -> cmnGenericObject
        """
        return _cisstCommonPython.cmnClassRegister_Create(*args)

    @staticmethod
    def ToString():
        r"""ToString() -> std::string"""
        return _cisstCommonPython.cmnClassRegister_ToString()

    @staticmethod
    def size():
        r"""size() -> cmnClassRegister::size_type"""
        return _cisstCommonPython.cmnClassRegister_size()

    @staticmethod
    def begin():
        r"""begin() -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_begin()

    @staticmethod
    def end():
        r"""end() -> cmnClassRegister::const_iterator"""
        return _cisstCommonPython.cmnClassRegister_end()

    def iterator(self):
        r"""iterator(cmnClassRegister self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassRegister_iterator(self)

    def __iter__(self):
        return self.iterator()

    __swig_destroy__ = _cisstCommonPython.delete_cmnClassRegister

# Register cmnClassRegister in _cisstCommonPython:
_cisstCommonPython.cmnClassRegister_swigregister(cmnClassRegister)

def cmnClassRegister_Instance():
    r"""cmnClassRegister_Instance() -> cmnClassRegister"""
    return _cisstCommonPython.cmnClassRegister_Instance()

def cmnClassRegister_Register(classServicesPointer, className):
    r"""cmnClassRegister_Register(cmnClassServicesBase classServicesPointer, std::string const & className) -> std::string const *"""
    return _cisstCommonPython.cmnClassRegister_Register(classServicesPointer, className)

def cmnClassRegister_SetLogMaskClass(className, mask):
    r"""cmnClassRegister_SetLogMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnClassRegister_SetLogMaskClass(className, mask)

def cmnClassRegister_SetLogMaskClassAll(mask):
    r"""cmnClassRegister_SetLogMaskClassAll(cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnClassRegister_SetLogMaskClassAll(mask)

def cmnClassRegister_SetLogMaskClassMatching(stringToMatch, mask):
    r"""cmnClassRegister_SetLogMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnClassRegister_SetLogMaskClassMatching(stringToMatch, mask)

def cmnClassRegister_FindClassServices(*args):
    r"""
    cmnClassRegister_FindClassServices(std::string const & className) -> cmnClassServicesBase
    cmnClassRegister_FindClassServices(std::type_info const & typeInfo) -> cmnClassServicesBase
    """
    return _cisstCommonPython.cmnClassRegister_FindClassServices(*args)

def cmnClassRegister_Create(*args):
    r"""
    cmnClassRegister_Create(std::string const & className) -> cmnGenericObject
    cmnClassRegister_Create(std::string const & className, cmnGenericObject other) -> cmnGenericObject
    """
    return _cisstCommonPython.cmnClassRegister_Create(*args)

def cmnClassRegister_ToString():
    r"""cmnClassRegister_ToString() -> std::string"""
    return _cisstCommonPython.cmnClassRegister_ToString()

def cmnClassRegister_size():
    r"""cmnClassRegister_size() -> cmnClassRegister::size_type"""
    return _cisstCommonPython.cmnClassRegister_size()

def cmnClassRegister_begin():
    r"""cmnClassRegister_begin() -> cmnClassRegister::const_iterator"""
    return _cisstCommonPython.cmnClassRegister_begin()

def cmnClassRegister_end():
    r"""cmnClassRegister_end() -> cmnClassRegister::const_iterator"""
    return _cisstCommonPython.cmnClassRegister_end()

LIBRARY_NAME_FOR_CISST_REGISTER = _cisstCommonPython.LIBRARY_NAME_FOR_CISST_REGISTER

class cmnClassServicesContainer(object):
    r"""Proxy of C++ std::map< std::string,cmnClassServicesBase * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(cmnClassServicesContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassServicesContainer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(cmnClassServicesContainer self) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer___nonzero__(self)

    def __bool__(self):
        r"""__bool__(cmnClassServicesContainer self) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer___bool__(self)

    def __len__(self):
        r"""__len__(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::size_type"""
        return _cisstCommonPython.cmnClassServicesContainer___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key) -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnClassServicesContainer___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key)"""
        return _cisstCommonPython.cmnClassServicesContainer___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer_has_key(self, key)

    def keys(self):
        r"""keys(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_keys(self)

    def values(self):
        r"""values(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_values(self)

    def items(self):
        r"""items(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_items(self)

    def __contains__(self, key):
        r"""__contains__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(cmnClassServicesContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassServicesContainer_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(cmnClassServicesContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnClassServicesContainer_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key)
        __setitem__(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & key, cmnClassServicesBase x)
        """
        return _cisstCommonPython.cmnClassServicesContainer___setitem__(self, *args)

    def asdict(self):
        r"""asdict(cmnClassServicesContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnClassServicesContainer_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(cmnClassServicesContainer self, std::less< std::string > const & other) -> cmnClassServicesContainer
        __init__(cmnClassServicesContainer self) -> cmnClassServicesContainer
        __init__(cmnClassServicesContainer self, cmnClassServicesContainer other) -> cmnClassServicesContainer
        """
        _cisstCommonPython.cmnClassServicesContainer_swiginit(self, _cisstCommonPython.new_cmnClassServicesContainer(*args))

    def empty(self):
        r"""empty(cmnClassServicesContainer self) -> bool"""
        return _cisstCommonPython.cmnClassServicesContainer_empty(self)

    def size(self):
        r"""size(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::size_type"""
        return _cisstCommonPython.cmnClassServicesContainer_size(self)

    def swap(self, v):
        r"""swap(cmnClassServicesContainer self, cmnClassServicesContainer v)"""
        return _cisstCommonPython.cmnClassServicesContainer_swap(self, v)

    def begin(self):
        r"""begin(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_begin(self)

    def end(self):
        r"""end(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_end(self)

    def rbegin(self):
        r"""rbegin(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::reverse_iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_rbegin(self)

    def rend(self):
        r"""rend(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::reverse_iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_rend(self)

    def clear(self):
        r"""clear(cmnClassServicesContainer self)"""
        return _cisstCommonPython.cmnClassServicesContainer_clear(self)

    def get_allocator(self):
        r"""get_allocator(cmnClassServicesContainer self) -> std::map< std::string,cmnClassServicesBase * >::allocator_type"""
        return _cisstCommonPython.cmnClassServicesContainer_get_allocator(self)

    def count(self, x):
        r"""count(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::size_type"""
        return _cisstCommonPython.cmnClassServicesContainer_count(self, x)

    def erase(self, *args):
        r"""
        erase(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::size_type
        erase(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::iterator position)
        erase(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::iterator first, std::map< std::string,cmnClassServicesBase * >::iterator last)
        """
        return _cisstCommonPython.cmnClassServicesContainer_erase(self, *args)

    def find(self, x):
        r"""find(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(cmnClassServicesContainer self, std::map< std::string,cmnClassServicesBase * >::key_type const & x) -> std::map< std::string,cmnClassServicesBase * >::iterator"""
        return _cisstCommonPython.cmnClassServicesContainer_upper_bound(self, x)
    __swig_destroy__ = _cisstCommonPython.delete_cmnClassServicesContainer

# Register cmnClassServicesContainer in _cisstCommonPython:
_cisstCommonPython.cmnClassServicesContainer_swigregister(cmnClassServicesContainer)
CMN_NO_DYNAMIC_CREATION = cvar.CMN_NO_DYNAMIC_CREATION
CMN_DYNAMIC_CREATION_DEFAULT = cvar.CMN_DYNAMIC_CREATION_DEFAULT
CMN_DYNAMIC_CREATION_COPY = cvar.CMN_DYNAMIC_CREATION_COPY
CMN_DYNAMIC_CREATION = cvar.CMN_DYNAMIC_CREATION
CMN_DYNAMIC_CREATION_SETNAME = cvar.CMN_DYNAMIC_CREATION_SETNAME
CMN_DYNAMIC_CREATION_ONEARG = cvar.CMN_DYNAMIC_CREATION_ONEARG

class cmnObjectRegister(object):
    r"""Proxy of C++ cmnObjectRegister class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        r"""Instance() -> cmnObjectRegister"""
        return _cisstCommonPython.cmnObjectRegister_Instance()

    @staticmethod
    def Register(objectName, objectPointer):
        r"""Register(std::string const & objectName, cmnGenericObject objectPointer) -> bool"""
        return _cisstCommonPython.cmnObjectRegister_Register(objectName, objectPointer)

    @staticmethod
    def Remove(objectName):
        r"""Remove(std::string const & objectName) -> bool"""
        return _cisstCommonPython.cmnObjectRegister_Remove(objectName)

    @staticmethod
    def FindObject(objectName):
        r"""FindObject(std::string const & objectName) -> cmnGenericObject"""
        return _cisstCommonPython.cmnObjectRegister_FindObject(objectName)

    @staticmethod
    def FindName(objectPointer):
        r"""FindName(cmnGenericObject objectPointer) -> std::string"""
        return _cisstCommonPython.cmnObjectRegister_FindName(objectPointer)

    @staticmethod
    def ToString():
        r"""ToString() -> std::string"""
        return _cisstCommonPython.cmnObjectRegister_ToString()

    @staticmethod
    def begin():
        r"""begin() -> cmnObjectRegister::const_iterator"""
        return _cisstCommonPython.cmnObjectRegister_begin()

    @staticmethod
    def end():
        r"""end() -> cmnObjectRegister::const_iterator"""
        return _cisstCommonPython.cmnObjectRegister_end()

    def iterator(self):
        r"""iterator(cmnObjectRegister self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnObjectRegister_iterator(self)

    def __iter__(self):
        return self.iterator()


# Register cmnObjectRegister in _cisstCommonPython:
_cisstCommonPython.cmnObjectRegister_swigregister(cmnObjectRegister)

def cmnObjectRegister_Instance():
    r"""cmnObjectRegister_Instance() -> cmnObjectRegister"""
    return _cisstCommonPython.cmnObjectRegister_Instance()

def cmnObjectRegister_Register(objectName, objectPointer):
    r"""cmnObjectRegister_Register(std::string const & objectName, cmnGenericObject objectPointer) -> bool"""
    return _cisstCommonPython.cmnObjectRegister_Register(objectName, objectPointer)

def cmnObjectRegister_Remove(objectName):
    r"""cmnObjectRegister_Remove(std::string const & objectName) -> bool"""
    return _cisstCommonPython.cmnObjectRegister_Remove(objectName)

def cmnObjectRegister_FindObject(objectName):
    r"""cmnObjectRegister_FindObject(std::string const & objectName) -> cmnGenericObject"""
    return _cisstCommonPython.cmnObjectRegister_FindObject(objectName)

def cmnObjectRegister_FindName(objectPointer):
    r"""cmnObjectRegister_FindName(cmnGenericObject objectPointer) -> std::string"""
    return _cisstCommonPython.cmnObjectRegister_FindName(objectPointer)

def cmnObjectRegister_ToString():
    r"""cmnObjectRegister_ToString() -> std::string"""
    return _cisstCommonPython.cmnObjectRegister_ToString()

def cmnObjectRegister_begin():
    r"""cmnObjectRegister_begin() -> cmnObjectRegister::const_iterator"""
    return _cisstCommonPython.cmnObjectRegister_begin()

def cmnObjectRegister_end():
    r"""cmnObjectRegister_end() -> cmnObjectRegister::const_iterator"""
    return _cisstCommonPython.cmnObjectRegister_end()

class cmnGenericObjectContainer(object):
    r"""Proxy of C++ std::map< std::string,cmnGenericObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(cmnGenericObjectContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(cmnGenericObjectContainer self) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer___nonzero__(self)

    def __bool__(self):
        r"""__bool__(cmnGenericObjectContainer self) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer___bool__(self)

    def __len__(self):
        r"""__len__(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::size_type"""
        return _cisstCommonPython.cmnGenericObjectContainer___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key) -> cmnGenericObject"""
        return _cisstCommonPython.cmnGenericObjectContainer___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key)"""
        return _cisstCommonPython.cmnGenericObjectContainer___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer_has_key(self, key)

    def keys(self):
        r"""keys(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_keys(self)

    def values(self):
        r"""values(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_values(self)

    def items(self):
        r"""items(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_items(self)

    def __contains__(self, key):
        r"""__contains__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(cmnGenericObjectContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(cmnGenericObjectContainer self) -> SwigPyIterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key)
        __setitem__(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & key, cmnGenericObject x)
        """
        return _cisstCommonPython.cmnGenericObjectContainer___setitem__(self, *args)

    def asdict(self):
        r"""asdict(cmnGenericObjectContainer self) -> PyObject *"""
        return _cisstCommonPython.cmnGenericObjectContainer_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(cmnGenericObjectContainer self, std::less< std::string > const & other) -> cmnGenericObjectContainer
        __init__(cmnGenericObjectContainer self) -> cmnGenericObjectContainer
        __init__(cmnGenericObjectContainer self, cmnGenericObjectContainer other) -> cmnGenericObjectContainer
        """
        _cisstCommonPython.cmnGenericObjectContainer_swiginit(self, _cisstCommonPython.new_cmnGenericObjectContainer(*args))

    def empty(self):
        r"""empty(cmnGenericObjectContainer self) -> bool"""
        return _cisstCommonPython.cmnGenericObjectContainer_empty(self)

    def size(self):
        r"""size(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::size_type"""
        return _cisstCommonPython.cmnGenericObjectContainer_size(self)

    def swap(self, v):
        r"""swap(cmnGenericObjectContainer self, cmnGenericObjectContainer v)"""
        return _cisstCommonPython.cmnGenericObjectContainer_swap(self, v)

    def begin(self):
        r"""begin(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_begin(self)

    def end(self):
        r"""end(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_end(self)

    def rbegin(self):
        r"""rbegin(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::reverse_iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_rbegin(self)

    def rend(self):
        r"""rend(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::reverse_iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_rend(self)

    def clear(self):
        r"""clear(cmnGenericObjectContainer self)"""
        return _cisstCommonPython.cmnGenericObjectContainer_clear(self)

    def get_allocator(self):
        r"""get_allocator(cmnGenericObjectContainer self) -> std::map< std::string,cmnGenericObject * >::allocator_type"""
        return _cisstCommonPython.cmnGenericObjectContainer_get_allocator(self)

    def count(self, x):
        r"""count(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::size_type"""
        return _cisstCommonPython.cmnGenericObjectContainer_count(self, x)

    def erase(self, *args):
        r"""
        erase(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::size_type
        erase(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::iterator position)
        erase(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::iterator first, std::map< std::string,cmnGenericObject * >::iterator last)
        """
        return _cisstCommonPython.cmnGenericObjectContainer_erase(self, *args)

    def find(self, x):
        r"""find(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(cmnGenericObjectContainer self, std::map< std::string,cmnGenericObject * >::key_type const & x) -> std::map< std::string,cmnGenericObject * >::iterator"""
        return _cisstCommonPython.cmnGenericObjectContainer_upper_bound(self, x)
    __swig_destroy__ = _cisstCommonPython.delete_cmnGenericObjectContainer

# Register cmnGenericObjectContainer in _cisstCommonPython:
_cisstCommonPython.cmnGenericObjectContainer_swigregister(cmnGenericObjectContainer)

class cmnDouble(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnDouble_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnDouble_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnDouble_ClassServices()
    Data = property(_cisstCommonPython.cmnDouble_Data_get, _cisstCommonPython.cmnDouble_Data_set, doc=r"""Data : cmnGenericObjectProxy<(double)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnDouble self) -> cmnDouble
        __init__(cmnDouble self, cmnGenericObjectProxy< double >::value_type const & data) -> cmnDouble
        """
        _cisstCommonPython.cmnDouble_swiginit(self, _cisstCommonPython.new_cmnDouble(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnDouble

# Register cmnDouble in _cisstCommonPython:
_cisstCommonPython.cmnDouble_swigregister(cmnDouble)

def cmnDouble_ClassServices():
    r"""cmnDouble_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnDouble_ClassServices()

class cmnInt(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnInt_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnInt_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnInt_ClassServices()
    Data = property(_cisstCommonPython.cmnInt_Data_get, _cisstCommonPython.cmnInt_Data_set, doc=r"""Data : cmnGenericObjectProxy<(int)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnInt self) -> cmnInt
        __init__(cmnInt self, cmnGenericObjectProxy< int >::value_type const & data) -> cmnInt
        """
        _cisstCommonPython.cmnInt_swiginit(self, _cisstCommonPython.new_cmnInt(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnInt

# Register cmnInt in _cisstCommonPython:
_cisstCommonPython.cmnInt_swigregister(cmnInt)

def cmnInt_ClassServices():
    r"""cmnInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnInt_ClassServices()

class cmnUInt(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnUInt_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnUInt_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnUInt_ClassServices()
    Data = property(_cisstCommonPython.cmnUInt_Data_get, _cisstCommonPython.cmnUInt_Data_set, doc=r"""Data : cmnGenericObjectProxy<(unsigned int)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnUInt self) -> cmnUInt
        __init__(cmnUInt self, cmnGenericObjectProxy< unsigned int >::value_type const & data) -> cmnUInt
        """
        _cisstCommonPython.cmnUInt_swiginit(self, _cisstCommonPython.new_cmnUInt(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnUInt

# Register cmnUInt in _cisstCommonPython:
_cisstCommonPython.cmnUInt_swigregister(cmnUInt)

def cmnUInt_ClassServices():
    r"""cmnUInt_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnUInt_ClassServices()

class cmnShort(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnShort_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnShort_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnShort_ClassServices()
    Data = property(_cisstCommonPython.cmnShort_Data_get, _cisstCommonPython.cmnShort_Data_set, doc=r"""Data : cmnGenericObjectProxy<(short)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnShort self) -> cmnShort
        __init__(cmnShort self, cmnGenericObjectProxy< short >::value_type const & data) -> cmnShort
        """
        _cisstCommonPython.cmnShort_swiginit(self, _cisstCommonPython.new_cmnShort(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnShort

# Register cmnShort in _cisstCommonPython:
_cisstCommonPython.cmnShort_swigregister(cmnShort)

def cmnShort_ClassServices():
    r"""cmnShort_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnShort_ClassServices()

class cmnUShort(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< unsigned short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnUShort_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnUShort_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnUShort_ClassServices()
    Data = property(_cisstCommonPython.cmnUShort_Data_get, _cisstCommonPython.cmnUShort_Data_set, doc=r"""Data : cmnGenericObjectProxy<(unsigned short)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnUShort self) -> cmnUShort
        __init__(cmnUShort self, cmnGenericObjectProxy< unsigned short >::value_type const & data) -> cmnUShort
        """
        _cisstCommonPython.cmnUShort_swiginit(self, _cisstCommonPython.new_cmnUShort(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnUShort

# Register cmnUShort in _cisstCommonPython:
_cisstCommonPython.cmnUShort_swigregister(cmnUShort)

def cmnUShort_ClassServices():
    r"""cmnUShort_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnUShort_ClassServices()

class cmnLong(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnLong_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnLong_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnLong_ClassServices()
    Data = property(_cisstCommonPython.cmnLong_Data_get, _cisstCommonPython.cmnLong_Data_set, doc=r"""Data : cmnGenericObjectProxy<(long)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnLong self) -> cmnLong
        __init__(cmnLong self, cmnGenericObjectProxy< long >::value_type const & data) -> cmnLong
        """
        _cisstCommonPython.cmnLong_swiginit(self, _cisstCommonPython.new_cmnLong(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnLong

# Register cmnLong in _cisstCommonPython:
_cisstCommonPython.cmnLong_swigregister(cmnLong)

def cmnLong_ClassServices():
    r"""cmnLong_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnLong_ClassServices()

class cmnULong(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnULong_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnULong_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnULong_ClassServices()
    Data = property(_cisstCommonPython.cmnULong_Data_get, _cisstCommonPython.cmnULong_Data_set, doc=r"""Data : cmnGenericObjectProxy<(unsigned long)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnULong self) -> cmnULong
        __init__(cmnULong self, cmnGenericObjectProxy< unsigned long >::value_type const & data) -> cmnULong
        """
        _cisstCommonPython.cmnULong_swiginit(self, _cisstCommonPython.new_cmnULong(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnULong

# Register cmnULong in _cisstCommonPython:
_cisstCommonPython.cmnULong_swigregister(cmnULong)

def cmnULong_ClassServices():
    r"""cmnULong_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnULong_ClassServices()

class cmnBool(cmnGenericObject):
    r"""Proxy of C++ cmnGenericObjectProxy< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnBool_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnBool_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnBool_ClassServices()
    Data = property(_cisstCommonPython.cmnBool_Data_get, _cisstCommonPython.cmnBool_Data_set, doc=r"""Data : cmnGenericObjectProxy<(bool)>::value_type""")

    def __init__(self, *args):
        r"""
        __init__(cmnBool self) -> cmnBool
        __init__(cmnBool self, cmnGenericObjectProxy< bool >::value_type const & data) -> cmnBool
        """
        _cisstCommonPython.cmnBool_swiginit(self, _cisstCommonPython.new_cmnBool(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnBool

# Register cmnBool in _cisstCommonPython:
_cisstCommonPython.cmnBool_swigregister(cmnBool)

def cmnBool_ClassServices():
    r"""cmnBool_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnBool_ClassServices()

class cmnLODMultiplexerStreambufChar(streambuf):
    r"""Proxy of C++ cmnLODMultiplexerStreambuf< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(cmnLODMultiplexerStreambufChar self, std::ofstream & fileStream) -> cmnLODMultiplexerStreambufChar
        __init__(cmnLODMultiplexerStreambufChar self) -> cmnLODMultiplexerStreambufChar
        """
        _cisstCommonPython.cmnLODMultiplexerStreambufChar_swiginit(self, _cisstCommonPython.new_cmnLODMultiplexerStreambufChar(*args))

    def AddChannel(self, *args):
        r"""
        AddChannel(cmnLODMultiplexerStreambufChar self, streambuf channel, cmnLogMask mask) -> bool
        AddChannel(cmnLODMultiplexerStreambufChar self, ostream outstream, cmnLogMask mask) -> bool
        """
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_AddChannel(self, *args)

    def AddMultiplexer(self, multiplexer):
        r"""AddMultiplexer(cmnLODMultiplexerStreambufChar self, cmnLODMultiplexerStreambufChar multiplexer) -> bool"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_AddMultiplexer(self, multiplexer)

    def RemoveMultiplexer(self, multiplexer):
        r"""RemoveMultiplexer(cmnLODMultiplexerStreambufChar self, cmnLODMultiplexerStreambufChar multiplexer)"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_RemoveMultiplexer(self, multiplexer)

    def RemoveChannel(self, *args):
        r"""
        RemoveChannel(cmnLODMultiplexerStreambufChar self, streambuf channel)
        RemoveChannel(cmnLODMultiplexerStreambufChar self, ostream outstream)
        """
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_RemoveChannel(self, *args)

    def RemoveAllChannels(self):
        r"""RemoveAllChannels(cmnLODMultiplexerStreambufChar self)"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_RemoveAllChannels(self)

    def SetChannelMask(self, channel, mask):
        r"""SetChannelMask(cmnLODMultiplexerStreambufChar self, streambuf channel, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_SetChannelMask(self, channel, mask)

    def GetChannelMask(self, channel, mask):
        r"""GetChannelMask(cmnLODMultiplexerStreambufChar self, streambuf channel, cmnLogMask & mask) -> bool"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_GetChannelMask(self, channel, mask)

    def GetChannels(self):
        r"""GetChannels(cmnLODMultiplexerStreambufChar self) -> cmnLODMultiplexerStreambuf< char >::ChannelContainerType const &"""
        return _cisstCommonPython.cmnLODMultiplexerStreambufChar_GetChannels(self)
    __swig_destroy__ = _cisstCommonPython.delete_cmnLODMultiplexerStreambufChar

# Register cmnLODMultiplexerStreambufChar in _cisstCommonPython:
_cisstCommonPython.cmnLODMultiplexerStreambufChar_swigregister(cmnLODMultiplexerStreambufChar)

class cmnCallbackStreambufChar(streambuf):
    r"""Proxy of C++ cmnCallbackStreambuf< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, func):
        r"""__init__(cmnCallbackStreambufChar self, cmnCallbackStreambuf< char >::CallbackType func) -> cmnCallbackStreambufChar"""
        _cisstCommonPython.cmnCallbackStreambufChar_swiginit(self, _cisstCommonPython.new_cmnCallbackStreambufChar(func))
    __swig_destroy__ = _cisstCommonPython.delete_cmnCallbackStreambufChar

# Register cmnCallbackStreambufChar in _cisstCommonPython:
_cisstCommonPython.cmnCallbackStreambufChar_swigregister(cmnCallbackStreambufChar)

CMN_LOG_LEVEL_NONE = _cisstCommonPython.CMN_LOG_LEVEL_NONE

CMN_LOG_LEVEL_INIT_ERROR = _cisstCommonPython.CMN_LOG_LEVEL_INIT_ERROR

CMN_LOG_LEVEL_INIT_WARNING = _cisstCommonPython.CMN_LOG_LEVEL_INIT_WARNING

CMN_LOG_LEVEL_INIT_VERBOSE = _cisstCommonPython.CMN_LOG_LEVEL_INIT_VERBOSE

CMN_LOG_LEVEL_INIT_DEBUG = _cisstCommonPython.CMN_LOG_LEVEL_INIT_DEBUG

CMN_LOG_LEVEL_RUN_ERROR = _cisstCommonPython.CMN_LOG_LEVEL_RUN_ERROR

CMN_LOG_LEVEL_RUN_WARNING = _cisstCommonPython.CMN_LOG_LEVEL_RUN_WARNING

CMN_LOG_LEVEL_RUN_VERBOSE = _cisstCommonPython.CMN_LOG_LEVEL_RUN_VERBOSE

CMN_LOG_LEVEL_RUN_DEBUG = _cisstCommonPython.CMN_LOG_LEVEL_RUN_DEBUG

CMN_LOG_ALLOW_NONE = _cisstCommonPython.CMN_LOG_ALLOW_NONE

CMN_LOG_ALLOW_ERRORS = _cisstCommonPython.CMN_LOG_ALLOW_ERRORS

CMN_LOG_ALLOW_WARNINGS = _cisstCommonPython.CMN_LOG_ALLOW_WARNINGS

CMN_LOG_ALLOW_ERRORS_AND_WARNINGS = _cisstCommonPython.CMN_LOG_ALLOW_ERRORS_AND_WARNINGS

CMN_LOG_ALLOW_VERBOSE = _cisstCommonPython.CMN_LOG_ALLOW_VERBOSE

CMN_LOG_ALLOW_DEBUG = _cisstCommonPython.CMN_LOG_ALLOW_DEBUG

CMN_LOG_ALLOW_ALL = _cisstCommonPython.CMN_LOG_ALLOW_ALL

CMN_LOG_ALLOW_DEFAULT = _cisstCommonPython.CMN_LOG_ALLOW_DEFAULT


def cmnLogLevelToIndex(level):
    r"""cmnLogLevelToIndex(cmnLogLevel const & level) -> size_t"""
    return _cisstCommonPython.cmnLogLevelToIndex(level)

def cmnIndexToLogLevel(index):
    r"""cmnIndexToLogLevel(size_t const & index) -> cmnLogLevel"""
    return _cisstCommonPython.cmnIndexToLogLevel(index)

def cmnLogIndexToString(index):
    r"""cmnLogIndexToString(size_t const & index) -> std::string const &"""
    return _cisstCommonPython.cmnLogIndexToString(index)

def cmnLogLevelToString(level):
    r"""cmnLogLevelToString(cmnLogLevel const & level) -> std::string const &"""
    return _cisstCommonPython.cmnLogLevelToString(level)

def cmnLogMaskToString(mask):
    r"""cmnLogMaskToString(cmnLogMask const & mask) -> std::string"""
    return _cisstCommonPython.cmnLogMaskToString(mask)
class cmnLogger(object):
    r"""Proxy of C++ cmnLogger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        r"""Instance() -> cmnLogger"""
        return _cisstCommonPython.cmnLogger_Instance()

    @staticmethod
    def SetMask(mask):
        r"""SetMask(cmnLogMask mask)"""
        return _cisstCommonPython.cmnLogger_SetMask(mask)

    @staticmethod
    def GetMask():
        r"""GetMask() -> cmnLogMask"""
        return _cisstCommonPython.cmnLogger_GetMask()

    @staticmethod
    def SetMaskFunction(mask):
        r"""SetMaskFunction(cmnLogMask mask)"""
        return _cisstCommonPython.cmnLogger_SetMaskFunction(mask)

    @staticmethod
    def GetMaskFunction():
        r"""GetMaskFunction() -> cmnLogMask"""
        return _cisstCommonPython.cmnLogger_GetMaskFunction()

    @staticmethod
    def SetMaskClass(className, mask):
        r"""SetMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLogger_SetMaskClass(className, mask)

    @staticmethod
    def SetMaskClassAll(mask):
        r"""SetMaskClassAll(cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLogger_SetMaskClassAll(mask)

    @staticmethod
    def SetMaskClassMatching(stringToMatch, mask):
        r"""SetMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
        return _cisstCommonPython.cmnLogger_SetMaskClassMatching(stringToMatch, mask)

    @staticmethod
    def GetMultiplexer():
        r"""GetMultiplexer() -> cmnLODMultiplexerStreambufChar"""
        return _cisstCommonPython.cmnLogger_GetMultiplexer()

    @staticmethod
    def HaltDefaultLog():
        r"""HaltDefaultLog()"""
        return _cisstCommonPython.cmnLogger_HaltDefaultLog()

    @staticmethod
    def ResumeDefaultLog(newLoD=0x33):
        r"""ResumeDefaultLog(cmnLogMask newLoD=0x33)"""
        return _cisstCommonPython.cmnLogger_ResumeDefaultLog(newLoD)

    @staticmethod
    def SetMaskDefaultLog(newLoD=0x33):
        r"""SetMaskDefaultLog(cmnLogMask newLoD=0x33)"""
        return _cisstCommonPython.cmnLogger_SetMaskDefaultLog(newLoD)

    @staticmethod
    def AddChannel(outputStream, mask=0xFF):
        r"""AddChannel(ostream outputStream, cmnLogMask mask=0xFF)"""
        return _cisstCommonPython.cmnLogger_AddChannel(outputStream, mask)

    @staticmethod
    def AddChannelToStdOut(mask=0x33):
        r"""AddChannelToStdOut(cmnLogMask mask=0x33)"""
        return _cisstCommonPython.cmnLogger_AddChannelToStdOut(mask)

    @staticmethod
    def AddChannelToStdErr(mask=0x33):
        r"""AddChannelToStdErr(cmnLogMask mask=0x33)"""
        return _cisstCommonPython.cmnLogger_AddChannelToStdErr(mask)

    @staticmethod
    def RemoveChannel(outputStream):
        r"""RemoveChannel(ostream outputStream)"""
        return _cisstCommonPython.cmnLogger_RemoveChannel(outputStream)

    @staticmethod
    def ExtractFileName(file):
        r"""ExtractFileName(char const * file) -> char const *"""
        return _cisstCommonPython.cmnLogger_ExtractFileName(file)

    @staticmethod
    def Kill():
        r"""Kill()"""
        return _cisstCommonPython.cmnLogger_Kill()

    @staticmethod
    def SetDefaultLogFileName(defaultLogFileName):
        r"""SetDefaultLogFileName(std::string const & defaultLogFileName) -> bool"""
        return _cisstCommonPython.cmnLogger_SetDefaultLogFileName(defaultLogFileName)

    @staticmethod
    def GetDefaultLogFileName():
        r"""GetDefaultLogFileName() -> std::string"""
        return _cisstCommonPython.cmnLogger_GetDefaultLogFileName()

    @staticmethod
    def IsCreated():
        r"""IsCreated() -> bool"""
        return _cisstCommonPython.cmnLogger_IsCreated()
    __swig_destroy__ = _cisstCommonPython.delete_cmnLogger

# Register cmnLogger in _cisstCommonPython:
_cisstCommonPython.cmnLogger_swigregister(cmnLogger)

def cmnLogger_Instance():
    r"""cmnLogger_Instance() -> cmnLogger"""
    return _cisstCommonPython.cmnLogger_Instance()

def cmnLogger_SetMask(mask):
    r"""cmnLogger_SetMask(cmnLogMask mask)"""
    return _cisstCommonPython.cmnLogger_SetMask(mask)

def cmnLogger_GetMask():
    r"""cmnLogger_GetMask() -> cmnLogMask"""
    return _cisstCommonPython.cmnLogger_GetMask()

def cmnLogger_SetMaskFunction(mask):
    r"""cmnLogger_SetMaskFunction(cmnLogMask mask)"""
    return _cisstCommonPython.cmnLogger_SetMaskFunction(mask)

def cmnLogger_GetMaskFunction():
    r"""cmnLogger_GetMaskFunction() -> cmnLogMask"""
    return _cisstCommonPython.cmnLogger_GetMaskFunction()

def cmnLogger_SetMaskClass(className, mask):
    r"""cmnLogger_SetMaskClass(std::string const & className, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnLogger_SetMaskClass(className, mask)

def cmnLogger_SetMaskClassAll(mask):
    r"""cmnLogger_SetMaskClassAll(cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnLogger_SetMaskClassAll(mask)

def cmnLogger_SetMaskClassMatching(stringToMatch, mask):
    r"""cmnLogger_SetMaskClassMatching(std::string const & stringToMatch, cmnLogMask mask) -> bool"""
    return _cisstCommonPython.cmnLogger_SetMaskClassMatching(stringToMatch, mask)

def cmnLogger_GetMultiplexer():
    r"""cmnLogger_GetMultiplexer() -> cmnLODMultiplexerStreambufChar"""
    return _cisstCommonPython.cmnLogger_GetMultiplexer()

def cmnLogger_HaltDefaultLog():
    r"""cmnLogger_HaltDefaultLog()"""
    return _cisstCommonPython.cmnLogger_HaltDefaultLog()

def cmnLogger_ResumeDefaultLog(newLoD=0x33):
    r"""cmnLogger_ResumeDefaultLog(cmnLogMask newLoD=0x33)"""
    return _cisstCommonPython.cmnLogger_ResumeDefaultLog(newLoD)

def cmnLogger_SetMaskDefaultLog(newLoD=0x33):
    r"""cmnLogger_SetMaskDefaultLog(cmnLogMask newLoD=0x33)"""
    return _cisstCommonPython.cmnLogger_SetMaskDefaultLog(newLoD)

def cmnLogger_AddChannel(outputStream, mask=0xFF):
    r"""cmnLogger_AddChannel(ostream outputStream, cmnLogMask mask=0xFF)"""
    return _cisstCommonPython.cmnLogger_AddChannel(outputStream, mask)

def cmnLogger_AddChannelToStdOut(mask=0x33):
    r"""cmnLogger_AddChannelToStdOut(cmnLogMask mask=0x33)"""
    return _cisstCommonPython.cmnLogger_AddChannelToStdOut(mask)

def cmnLogger_AddChannelToStdErr(mask=0x33):
    r"""cmnLogger_AddChannelToStdErr(cmnLogMask mask=0x33)"""
    return _cisstCommonPython.cmnLogger_AddChannelToStdErr(mask)

def cmnLogger_RemoveChannel(outputStream):
    r"""cmnLogger_RemoveChannel(ostream outputStream)"""
    return _cisstCommonPython.cmnLogger_RemoveChannel(outputStream)

def cmnLogger_ExtractFileName(file):
    r"""cmnLogger_ExtractFileName(char const * file) -> char const *"""
    return _cisstCommonPython.cmnLogger_ExtractFileName(file)

def cmnLogger_Kill():
    r"""cmnLogger_Kill()"""
    return _cisstCommonPython.cmnLogger_Kill()

def cmnLogger_SetDefaultLogFileName(defaultLogFileName):
    r"""cmnLogger_SetDefaultLogFileName(std::string const & defaultLogFileName) -> bool"""
    return _cisstCommonPython.cmnLogger_SetDefaultLogFileName(defaultLogFileName)

def cmnLogger_GetDefaultLogFileName():
    r"""cmnLogger_GetDefaultLogFileName() -> std::string"""
    return _cisstCommonPython.cmnLogger_GetDefaultLogFileName()

def cmnLogger_IsCreated():
    r"""cmnLogger_IsCreated() -> bool"""
    return _cisstCommonPython.cmnLogger_IsCreated()

class cmnPath(cmnGenericObject):
    r"""Proxy of C++ cmnPath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstCommonPython.cmnPath_HAS_DYNAMIC_CREATION
    
    InitialLoD = _cisstCommonPython.cmnPath_InitialLoD
    

    @staticmethod
    def ClassServices():
        r"""ClassServices() -> cmnClassServicesBase"""
        return _cisstCommonPython.cmnPath_ClassServices()
    HEAD = _cisstCommonPython.cmnPath_HEAD
    
    TAIL = _cisstCommonPython.cmnPath_TAIL
    
    READ = _cisstCommonPython.cmnPath_READ
    
    WRITE = _cisstCommonPython.cmnPath_WRITE
    
    EXECUTE = _cisstCommonPython.cmnPath_EXECUTE
    
    EXIST = _cisstCommonPython.cmnPath_EXIST
    

    def __init__(self, *args):
        r"""
        __init__(cmnPath self) -> cmnPath
        __init__(cmnPath self, std::string const & path) -> cmnPath
        """
        _cisstCommonPython.cmnPath_swiginit(self, _cisstCommonPython.new_cmnPath(*args))
    __swig_destroy__ = _cisstCommonPython.delete_cmnPath

    def Set(self, path):
        r"""Set(cmnPath self, std::string const & path)"""
        return _cisstCommonPython.cmnPath_Set(self, path)

    def Add(self, *args):
        r"""Add(cmnPath self, std::string const & path, bool head=HEAD)"""
        return _cisstCommonPython.cmnPath_Add(self, *args)

    def AddFromEnvironment(self, *args):
        r"""AddFromEnvironment(cmnPath self, std::string const & variableName, bool head=HEAD) -> bool"""
        return _cisstCommonPython.cmnPath_AddFromEnvironment(self, *args)

    def AddRelativeToCisstRoot(self, *args):
        r"""AddRelativeToCisstRoot(cmnPath self, std::string const & relativePath, bool head=HEAD) -> bool"""
        return _cisstCommonPython.cmnPath_AddRelativeToCisstRoot(self, *args)

    def AddRelativeToCisstShare(self, *args):
        r"""AddRelativeToCisstShare(cmnPath self, std::string const & relativePath, bool head=HEAD) -> bool"""
        return _cisstCommonPython.cmnPath_AddRelativeToCisstShare(self, *args)

    def Find(self, *args):
        r"""Find(cmnPath self, std::string const & filename, short mode=READ) -> std::string"""
        return _cisstCommonPython.cmnPath_Find(self, *args)

    def FindWithSubdirectory(self, *args):
        r"""FindWithSubdirectory(cmnPath self, std::string const & filename, std::string const & subdirectory, short mode=READ) -> std::string"""
        return _cisstCommonPython.cmnPath_FindWithSubdirectory(self, *args)

    def Remove(self, directory):
        r"""Remove(cmnPath self, std::string const & directory) -> bool"""
        return _cisstCommonPython.cmnPath_Remove(self, directory)

    def Has(self, directory):
        r"""Has(cmnPath self, std::string const & directory) -> bool"""
        return _cisstCommonPython.cmnPath_Has(self, directory)

    @staticmethod
    def DirectorySeparator():
        r"""DirectorySeparator() -> std::string const &"""
        return _cisstCommonPython.cmnPath_DirectorySeparator()

    @staticmethod
    def GetWorkingDirectory():
        r"""GetWorkingDirectory() -> std::string"""
        return _cisstCommonPython.cmnPath_GetWorkingDirectory()

    @staticmethod
    def GetCisstRoot(result):
        r"""GetCisstRoot(std::string & result) -> bool"""
        return _cisstCommonPython.cmnPath_GetCisstRoot(result)

    @staticmethod
    def GetCisstShare(result):
        r"""GetCisstShare(std::string & result) -> bool"""
        return _cisstCommonPython.cmnPath_GetCisstShare(result)

    @staticmethod
    def Exists(*args):
        r"""Exists(std::string const & fullPath, short more=READ) -> bool"""
        return _cisstCommonPython.cmnPath_Exists(*args)

    @staticmethod
    def DeleteFile(fullPath):
        r"""DeleteFile(std::string const & fullPath) -> bool"""
        return _cisstCommonPython.cmnPath_DeleteFile(fullPath)

    @staticmethod
    def SharedLibrary(name):
        r"""SharedLibrary(std::string const & name) -> std::string"""
        return _cisstCommonPython.cmnPath_SharedLibrary(name)

    @staticmethod
    def Executable(name):
        r"""Executable(std::string const & name) -> std::string"""
        return _cisstCommonPython.cmnPath_Executable(name)

# Register cmnPath in _cisstCommonPython:
_cisstCommonPython.cmnPath_swigregister(cmnPath)

def cmnPath_ClassServices():
    r"""cmnPath_ClassServices() -> cmnClassServicesBase"""
    return _cisstCommonPython.cmnPath_ClassServices()

def cmnPath_DirectorySeparator():
    r"""cmnPath_DirectorySeparator() -> std::string const &"""
    return _cisstCommonPython.cmnPath_DirectorySeparator()

def cmnPath_GetWorkingDirectory():
    r"""cmnPath_GetWorkingDirectory() -> std::string"""
    return _cisstCommonPython.cmnPath_GetWorkingDirectory()

def cmnPath_GetCisstRoot(result):
    r"""cmnPath_GetCisstRoot(std::string & result) -> bool"""
    return _cisstCommonPython.cmnPath_GetCisstRoot(result)

def cmnPath_GetCisstShare(result):
    r"""cmnPath_GetCisstShare(std::string & result) -> bool"""
    return _cisstCommonPython.cmnPath_GetCisstShare(result)

def cmnPath_Exists(*args):
    r"""cmnPath_Exists(std::string const & fullPath, short more=READ) -> bool"""
    return _cisstCommonPython.cmnPath_Exists(*args)

def cmnPath_DeleteFile(fullPath):
    r"""cmnPath_DeleteFile(std::string const & fullPath) -> bool"""
    return _cisstCommonPython.cmnPath_DeleteFile(fullPath)

def cmnPath_SharedLibrary(name):
    r"""cmnPath_SharedLibrary(std::string const & name) -> std::string"""
    return _cisstCommonPython.cmnPath_SharedLibrary(name)

def cmnPath_Executable(name):
    r"""cmnPath_Executable(std::string const & name) -> std::string"""
    return _cisstCommonPython.cmnPath_Executable(name)

class cmnTypeTraitsDouble(object):
    r"""Proxy of C++ cmnTypeTraits< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Tolerance():
        r"""Tolerance() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_Tolerance()

    @staticmethod
    def SetTolerance(tolerance):
        r"""SetTolerance(cmnTypeTraits< double >::Type tolerance)"""
        return _cisstCommonPython.cmnTypeTraitsDouble_SetTolerance(tolerance)

    @staticmethod
    def TypeName():
        r"""TypeName() -> std::string"""
        return _cisstCommonPython.cmnTypeTraitsDouble_TypeName()

    @staticmethod
    def PlusInfinityOrMax():
        r"""PlusInfinityOrMax() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinityOrMax()

    @staticmethod
    def MinusInfinityOrMin():
        r"""MinusInfinityOrMin() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinityOrMin()

    @staticmethod
    def MaxPositiveValue():
        r"""MaxPositiveValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MaxPositiveValue()

    @staticmethod
    def MinPositiveValue():
        r"""MinPositiveValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinPositiveValue()

    @staticmethod
    def MaxNegativeValue():
        r"""MaxNegativeValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MaxNegativeValue()

    @staticmethod
    def MinNegativeValue():
        r"""MinNegativeValue() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinNegativeValue()

    @staticmethod
    def PlusInfinity():
        r"""PlusInfinity() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinity()

    @staticmethod
    def MinusInfinity():
        r"""MinusInfinity() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinity()

    @staticmethod
    def HasSign():
        r"""HasSign() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_HasSign()

    @staticmethod
    def HasInfinity():
        r"""HasInfinity() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_HasInfinity()

    @staticmethod
    def IsFinite(value):
        r"""IsFinite(cmnTypeTraits< double >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_IsFinite(value)

    @staticmethod
    def NaN():
        r"""NaN() -> cmnTypeTraits< double >::Type"""
        return _cisstCommonPython.cmnTypeTraitsDouble_NaN()

    @staticmethod
    def IsNaN(value):
        r"""IsNaN(cmnTypeTraits< double >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_IsNaN(value)

    @staticmethod
    def HasNaN():
        r"""HasNaN() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsDouble_HasNaN()

    def __init__(self):
        r"""__init__(cmnTypeTraitsDouble self) -> cmnTypeTraitsDouble"""
        _cisstCommonPython.cmnTypeTraitsDouble_swiginit(self, _cisstCommonPython.new_cmnTypeTraitsDouble())
    __swig_destroy__ = _cisstCommonPython.delete_cmnTypeTraitsDouble

# Register cmnTypeTraitsDouble in _cisstCommonPython:
_cisstCommonPython.cmnTypeTraitsDouble_swigregister(cmnTypeTraitsDouble)

def cmnTypeTraitsDouble_Tolerance():
    r"""cmnTypeTraitsDouble_Tolerance() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_Tolerance()

def cmnTypeTraitsDouble_SetTolerance(tolerance):
    r"""cmnTypeTraitsDouble_SetTolerance(cmnTypeTraits< double >::Type tolerance)"""
    return _cisstCommonPython.cmnTypeTraitsDouble_SetTolerance(tolerance)

def cmnTypeTraitsDouble_TypeName():
    r"""cmnTypeTraitsDouble_TypeName() -> std::string"""
    return _cisstCommonPython.cmnTypeTraitsDouble_TypeName()

def cmnTypeTraitsDouble_PlusInfinityOrMax():
    r"""cmnTypeTraitsDouble_PlusInfinityOrMax() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinityOrMax()

def cmnTypeTraitsDouble_MinusInfinityOrMin():
    r"""cmnTypeTraitsDouble_MinusInfinityOrMin() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinityOrMin()

def cmnTypeTraitsDouble_MaxPositiveValue():
    r"""cmnTypeTraitsDouble_MaxPositiveValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MaxPositiveValue()

def cmnTypeTraitsDouble_MinPositiveValue():
    r"""cmnTypeTraitsDouble_MinPositiveValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinPositiveValue()

def cmnTypeTraitsDouble_MaxNegativeValue():
    r"""cmnTypeTraitsDouble_MaxNegativeValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MaxNegativeValue()

def cmnTypeTraitsDouble_MinNegativeValue():
    r"""cmnTypeTraitsDouble_MinNegativeValue() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinNegativeValue()

def cmnTypeTraitsDouble_PlusInfinity():
    r"""cmnTypeTraitsDouble_PlusInfinity() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_PlusInfinity()

def cmnTypeTraitsDouble_MinusInfinity():
    r"""cmnTypeTraitsDouble_MinusInfinity() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_MinusInfinity()

def cmnTypeTraitsDouble_HasSign():
    r"""cmnTypeTraitsDouble_HasSign() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_HasSign()

def cmnTypeTraitsDouble_HasInfinity():
    r"""cmnTypeTraitsDouble_HasInfinity() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_HasInfinity()

def cmnTypeTraitsDouble_IsFinite(value):
    r"""cmnTypeTraitsDouble_IsFinite(cmnTypeTraits< double >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_IsFinite(value)

def cmnTypeTraitsDouble_NaN():
    r"""cmnTypeTraitsDouble_NaN() -> cmnTypeTraits< double >::Type"""
    return _cisstCommonPython.cmnTypeTraitsDouble_NaN()

def cmnTypeTraitsDouble_IsNaN(value):
    r"""cmnTypeTraitsDouble_IsNaN(cmnTypeTraits< double >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_IsNaN(value)

def cmnTypeTraitsDouble_HasNaN():
    r"""cmnTypeTraitsDouble_HasNaN() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsDouble_HasNaN()
cmnTypeTraitsDouble.DefaultTolerance = _cisstCommonPython.cvar.cmnTypeTraitsDouble_DefaultTolerance

class cmnTypeTraitsInt(object):
    r"""Proxy of C++ cmnTypeTraits< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Tolerance():
        r"""Tolerance() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_Tolerance()

    @staticmethod
    def SetTolerance(tolerance):
        r"""SetTolerance(cmnTypeTraits< int >::Type tolerance)"""
        return _cisstCommonPython.cmnTypeTraitsInt_SetTolerance(tolerance)

    @staticmethod
    def TypeName():
        r"""TypeName() -> std::string"""
        return _cisstCommonPython.cmnTypeTraitsInt_TypeName()

    @staticmethod
    def PlusInfinityOrMax():
        r"""PlusInfinityOrMax() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinityOrMax()

    @staticmethod
    def MinusInfinityOrMin():
        r"""MinusInfinityOrMin() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinityOrMin()

    @staticmethod
    def MaxPositiveValue():
        r"""MaxPositiveValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MaxPositiveValue()

    @staticmethod
    def MinPositiveValue():
        r"""MinPositiveValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinPositiveValue()

    @staticmethod
    def MaxNegativeValue():
        r"""MaxNegativeValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MaxNegativeValue()

    @staticmethod
    def MinNegativeValue():
        r"""MinNegativeValue() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinNegativeValue()

    @staticmethod
    def PlusInfinity():
        r"""PlusInfinity() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinity()

    @staticmethod
    def MinusInfinity():
        r"""MinusInfinity() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinity()

    @staticmethod
    def HasSign():
        r"""HasSign() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_HasSign()

    @staticmethod
    def HasInfinity():
        r"""HasInfinity() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_HasInfinity()

    @staticmethod
    def IsFinite(value):
        r"""IsFinite(cmnTypeTraits< int >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_IsFinite(value)

    @staticmethod
    def NaN():
        r"""NaN() -> cmnTypeTraits< int >::Type"""
        return _cisstCommonPython.cmnTypeTraitsInt_NaN()

    @staticmethod
    def IsNaN(value):
        r"""IsNaN(cmnTypeTraits< int >::Type const & value) -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_IsNaN(value)

    @staticmethod
    def HasNaN():
        r"""HasNaN() -> bool"""
        return _cisstCommonPython.cmnTypeTraitsInt_HasNaN()

    def __init__(self):
        r"""__init__(cmnTypeTraitsInt self) -> cmnTypeTraitsInt"""
        _cisstCommonPython.cmnTypeTraitsInt_swiginit(self, _cisstCommonPython.new_cmnTypeTraitsInt())
    __swig_destroy__ = _cisstCommonPython.delete_cmnTypeTraitsInt

# Register cmnTypeTraitsInt in _cisstCommonPython:
_cisstCommonPython.cmnTypeTraitsInt_swigregister(cmnTypeTraitsInt)

def cmnTypeTraitsInt_Tolerance():
    r"""cmnTypeTraitsInt_Tolerance() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_Tolerance()

def cmnTypeTraitsInt_SetTolerance(tolerance):
    r"""cmnTypeTraitsInt_SetTolerance(cmnTypeTraits< int >::Type tolerance)"""
    return _cisstCommonPython.cmnTypeTraitsInt_SetTolerance(tolerance)

def cmnTypeTraitsInt_TypeName():
    r"""cmnTypeTraitsInt_TypeName() -> std::string"""
    return _cisstCommonPython.cmnTypeTraitsInt_TypeName()

def cmnTypeTraitsInt_PlusInfinityOrMax():
    r"""cmnTypeTraitsInt_PlusInfinityOrMax() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinityOrMax()

def cmnTypeTraitsInt_MinusInfinityOrMin():
    r"""cmnTypeTraitsInt_MinusInfinityOrMin() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinityOrMin()

def cmnTypeTraitsInt_MaxPositiveValue():
    r"""cmnTypeTraitsInt_MaxPositiveValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MaxPositiveValue()

def cmnTypeTraitsInt_MinPositiveValue():
    r"""cmnTypeTraitsInt_MinPositiveValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinPositiveValue()

def cmnTypeTraitsInt_MaxNegativeValue():
    r"""cmnTypeTraitsInt_MaxNegativeValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MaxNegativeValue()

def cmnTypeTraitsInt_MinNegativeValue():
    r"""cmnTypeTraitsInt_MinNegativeValue() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinNegativeValue()

def cmnTypeTraitsInt_PlusInfinity():
    r"""cmnTypeTraitsInt_PlusInfinity() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_PlusInfinity()

def cmnTypeTraitsInt_MinusInfinity():
    r"""cmnTypeTraitsInt_MinusInfinity() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_MinusInfinity()

def cmnTypeTraitsInt_HasSign():
    r"""cmnTypeTraitsInt_HasSign() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_HasSign()

def cmnTypeTraitsInt_HasInfinity():
    r"""cmnTypeTraitsInt_HasInfinity() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_HasInfinity()

def cmnTypeTraitsInt_IsFinite(value):
    r"""cmnTypeTraitsInt_IsFinite(cmnTypeTraits< int >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_IsFinite(value)

def cmnTypeTraitsInt_NaN():
    r"""cmnTypeTraitsInt_NaN() -> cmnTypeTraits< int >::Type"""
    return _cisstCommonPython.cmnTypeTraitsInt_NaN()

def cmnTypeTraitsInt_IsNaN(value):
    r"""cmnTypeTraitsInt_IsNaN(cmnTypeTraits< int >::Type const & value) -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_IsNaN(value)

def cmnTypeTraitsInt_HasNaN():
    r"""cmnTypeTraitsInt_HasNaN() -> bool"""
    return _cisstCommonPython.cmnTypeTraitsInt_HasNaN()
cmnTypeTraitsInt.DefaultTolerance = _cisstCommonPython.cvar.cmnTypeTraitsInt_DefaultTolerance



