# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cisstNumericalPython
else:
    import _cisstNumericalPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstNumericalPython.delete_SwigPyIterator

    def value(self):
        return _cisstNumericalPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstNumericalPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstNumericalPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstNumericalPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstNumericalPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstNumericalPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstNumericalPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstNumericalPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstNumericalPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstNumericalPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstNumericalPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstNumericalPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstNumericalPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstNumericalPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstNumericalPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstNumericalPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cisstNumericalPython:
_cisstNumericalPython.SwigPyIterator_swigregister(SwigPyIterator)

import cisstCommonPython
import cisstVectorPython
class nmrSVDDynamicData(object):
    r"""Proxy of C++ nmrSVDDynamicData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def WorkspaceSize(m, n):
        r"""WorkspaceSize(nmrSVDDynamicData::size_type m, nmrSVDDynamicData::size_type n) -> nmrSVDDynamicData::size_type"""
        return _cisstNumericalPython.nmrSVDDynamicData_WorkspaceSize(m, n)

    def Allocate(self, m, n, storageOrder):
        r"""Allocate(nmrSVDDynamicData self, nmrSVDDynamicData::size_type m, nmrSVDDynamicData::size_type n, bool storageOrder)"""
        return _cisstNumericalPython.nmrSVDDynamicData_Allocate(self, m, n, storageOrder)

    def S(self):
        r"""S(nmrSVDDynamicData self) -> vctDynamicVectorRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrSVDDynamicData_S(self)

    def U(self):
        r"""U(nmrSVDDynamicData self) -> vctDynamicMatrixRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrSVDDynamicData_U(self)

    def Vt(self):
        r"""Vt(nmrSVDDynamicData self) -> vctDynamicMatrixRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrSVDDynamicData_Vt(self)

    def __init__(self, *args):
        r"""
        __init__(nmrSVDDynamicData self) -> nmrSVDDynamicData
        __init__(nmrSVDDynamicData self, nmrSVDDynamicData::size_type m, nmrSVDDynamicData::size_type n, bool storageOrder) -> nmrSVDDynamicData
        __init__(nmrSVDDynamicData self, vctDynamicMatrixBase< vctDynamicMatrixOwner< double >,CISSTNETLIB_DOUBLE > const & A) -> nmrSVDDynamicData
        __init__(nmrSVDDynamicData self, vctDynamicMatrixBase< vctDynamicMatrixRefOwner< double >,CISSTNETLIB_DOUBLE > const & A) -> nmrSVDDynamicData
        """
        _cisstNumericalPython.nmrSVDDynamicData_swiginit(self, _cisstNumericalPython.new_nmrSVDDynamicData(*args))
    __swig_destroy__ = _cisstNumericalPython.delete_nmrSVDDynamicData

# Register nmrSVDDynamicData in _cisstNumericalPython:
_cisstNumericalPython.nmrSVDDynamicData_swigregister(nmrSVDDynamicData)

def nmrSVDDynamicData_WorkspaceSize(m, n):
    r"""nmrSVDDynamicData_WorkspaceSize(nmrSVDDynamicData::size_type m, nmrSVDDynamicData::size_type n) -> nmrSVDDynamicData::size_type"""
    return _cisstNumericalPython.nmrSVDDynamicData_WorkspaceSize(m, n)


def nmrSVD(*args):
    r"""
    nmrSVD(vctDynamicMatrixBase< vctDynamicMatrixOwner< double >,CISSTNETLIB_DOUBLE > & A, nmrSVDDynamicData data) -> CISSTNETLIB_INTEGER
    nmrSVD(vctDynamicMatrixBase< vctDynamicMatrixRefOwner< double >,CISSTNETLIB_DOUBLE > & A, nmrSVDDynamicData data) -> CISSTNETLIB_INTEGER
    """
    return _cisstNumericalPython.nmrSVD(*args)
class nmrPInverseDynamicData(object):
    r"""Proxy of C++ nmrPInverseDynamicData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def WorkspaceSize(m, n):
        r"""WorkspaceSize(nmrPInverseDynamicData::size_type m, nmrPInverseDynamicData::size_type n) -> nmrPInverseDynamicData::size_type"""
        return _cisstNumericalPython.nmrPInverseDynamicData_WorkspaceSize(m, n)

    def __init__(self):
        r"""__init__(nmrPInverseDynamicData self) -> nmrPInverseDynamicData"""
        _cisstNumericalPython.nmrPInverseDynamicData_swiginit(self, _cisstNumericalPython.new_nmrPInverseDynamicData())

    def S(self):
        r"""S(nmrPInverseDynamicData self) -> vctDynamicVectorRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrPInverseDynamicData_S(self)

    def U(self):
        r"""U(nmrPInverseDynamicData self) -> vctDynamicMatrixRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrPInverseDynamicData_U(self)

    def Vt(self):
        r"""Vt(nmrPInverseDynamicData self) -> vctDynamicMatrixRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrPInverseDynamicData_Vt(self)

    def PInverse(self):
        r"""PInverse(nmrPInverseDynamicData self) -> vctDynamicMatrixRef< CISSTNETLIB_DOUBLE > const &"""
        return _cisstNumericalPython.nmrPInverseDynamicData_PInverse(self)
    __swig_destroy__ = _cisstNumericalPython.delete_nmrPInverseDynamicData

# Register nmrPInverseDynamicData in _cisstNumericalPython:
_cisstNumericalPython.nmrPInverseDynamicData_swigregister(nmrPInverseDynamicData)

def nmrPInverseDynamicData_WorkspaceSize(m, n):
    r"""nmrPInverseDynamicData_WorkspaceSize(nmrPInverseDynamicData::size_type m, nmrPInverseDynamicData::size_type n) -> nmrPInverseDynamicData::size_type"""
    return _cisstNumericalPython.nmrPInverseDynamicData_WorkspaceSize(m, n)


def nmrPInverse(A, PInverse):
    r"""nmrPInverse(vctDynamicMatrixBase< vctDynamicMatrixOwner< double >,CISSTNETLIB_DOUBLE > & A, vctDynamicMatrixBase< vctDynamicMatrixOwner< double >,CISSTNETLIB_DOUBLE > & PInverse) -> CISSTNETLIB_INTEGER"""
    return _cisstNumericalPython.nmrPInverse(A, PInverse)

def nmrRegistrationRigid(dataSet1, dataSet2):
    r"""nmrRegistrationRigid(vctDynamicMatrix< double > const & dataSet1, vctDynamicMatrix< double > const & dataSet2) -> std::pair< vctFrm3,double >"""
    return _cisstNumericalPython.nmrRegistrationRigid(dataSet1, dataSet2)


