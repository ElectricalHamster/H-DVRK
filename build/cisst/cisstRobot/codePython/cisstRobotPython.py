# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cisstRobotPython
else:
    import _cisstRobotPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstRobotPython.delete_SwigPyIterator

    def value(self):
        return _cisstRobotPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cisstRobotPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cisstRobotPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cisstRobotPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cisstRobotPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cisstRobotPython.SwigPyIterator_copy(self)

    def next(self):
        return _cisstRobotPython.SwigPyIterator_next(self)

    def __next__(self):
        return _cisstRobotPython.SwigPyIterator___next__(self)

    def previous(self):
        return _cisstRobotPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cisstRobotPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cisstRobotPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cisstRobotPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cisstRobotPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cisstRobotPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cisstRobotPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cisstRobotPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cisstRobotPython:
_cisstRobotPython.SwigPyIterator_swigregister(SwigPyIterator)

import cisstCommonPython
import cisstVectorPython
class robManipulator(object):
    r"""Proxy of C++ robManipulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ESUCCESS = _cisstRobotPython.robManipulator_ESUCCESS
    
    EFAILURE = _cisstRobotPython.robManipulator_EFAILURE
    
    mLastError = property(_cisstRobotPython.robManipulator_mLastError_get, _cisstRobotPython.robManipulator_mLastError_set, doc=r"""mLastError : std::string""")
    Rtw0 = property(_cisstRobotPython.robManipulator_Rtw0_get, _cisstRobotPython.robManipulator_Rtw0_set, doc=r"""Rtw0 : vctFrame4x4<(double)>""")
    Jn = property(_cisstRobotPython.robManipulator_Jn_get, _cisstRobotPython.robManipulator_Jn_set, doc=r"""Jn : p.p.double""")
    Js = property(_cisstRobotPython.robManipulator_Js_get, _cisstRobotPython.robManipulator_Js_set, doc=r"""Js : p.p.double""")
    links = property(_cisstRobotPython.robManipulator_links_get, _cisstRobotPython.robManipulator_links_set, doc=r"""links : std::vector<(robLink,std::allocator<(robLink)>)>""")

    def LoadRobot(self, *args):
        r"""
        LoadRobot(robManipulator self, std::string const & linkfile) -> robManipulator::Errno
        LoadRobot(robManipulator self, Json::Value const & config) -> robManipulator::Errno
        LoadRobot(robManipulator self, std::vector< robKinematics *,std::allocator< robKinematics * > > KinParms) -> robManipulator::Errno
        """
        return _cisstRobotPython.robManipulator_LoadRobot(self, *args)

    def JacobianBody(self, *args):
        r"""
        JacobianBody(robManipulator self, vctDynamicVector< double > const & q)
        JacobianBody(robManipulator self, vctDynamicVector< double > const & q, vctDynamicMatrix< double > & J) -> bool
        """
        return _cisstRobotPython.robManipulator_JacobianBody(self, *args)

    def JacobianSpatial(self, *args):
        r"""
        JacobianSpatial(robManipulator self, vctDynamicVector< double > const & q)
        JacobianSpatial(robManipulator self, vctDynamicVector< double > const & q, vctDynamicMatrix< double > & J) -> bool
        """
        return _cisstRobotPython.robManipulator_JacobianSpatial(self, *args)

    def RNE(self, q, qd, qdd, f, g=9.81):
        r"""RNE(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd, vctDynamicVector< double > const & qdd, vctFixedSizeVector< double,6 > const & f, double g=9.81) -> vctDynamicVector< double >"""
        return _cisstRobotPython.robManipulator_RNE(self, q, qd, qdd, f, g)

    def RNE_MDH(self, q, qd, qdd, f, g=9.81):
        r"""RNE_MDH(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd, vctDynamicVector< double > const & qdd, vctFixedSizeVector< double,6 > const & f, double g=9.81) -> vctDynamicVector< double >"""
        return _cisstRobotPython.robManipulator_RNE_MDH(self, q, qd, qdd, f, g)

    def CCG(self, q, qd, g=9.81):
        r"""CCG(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd, double g=9.81) -> vctDynamicVector< double >"""
        return _cisstRobotPython.robManipulator_CCG(self, q, qd, g)

    def CCG_MDH(self, q, qd, g=9.81):
        r"""CCG_MDH(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd, double g=9.81) -> vctDynamicVector< double >"""
        return _cisstRobotPython.robManipulator_CCG_MDH(self, q, qd, g)

    def BiasAcceleration(self, q, qd):
        r"""BiasAcceleration(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd) -> vctFixedSizeVector< double,6 >"""
        return _cisstRobotPython.robManipulator_BiasAcceleration(self, q, qd)

    def JSinertia(self, *args):
        r"""
        JSinertia(robManipulator self, double ** A, vctDynamicVector< double > const & q)
        JSinertia(robManipulator self, vctDynamicVector< double > const & q) -> vctDynamicMatrix< double >
        """
        return _cisstRobotPython.robManipulator_JSinertia(self, *args)

    def OSinertia(self, Ac, q):
        r"""OSinertia(robManipulator self, double [6][6] Ac, vctDynamicVector< double > const & q)"""
        return _cisstRobotPython.robManipulator_OSinertia(self, Ac, q)

    def SE3Difference(self, Rt1, Rt2):
        r"""SE3Difference(robManipulator self, vctFrame4x4< double > const & Rt1, vctFrame4x4< double > const & Rt2) -> vctFixedSizeMatrix< double,4,4 >"""
        return _cisstRobotPython.robManipulator_SE3Difference(self, Rt1, Rt2)

    def AddIdentificationColumn(self, J, delRt):
        r"""AddIdentificationColumn(robManipulator self, vctDynamicMatrix< double > & J, vctFixedSizeMatrix< double,4,4 > & delRt)"""
        return _cisstRobotPython.robManipulator_AddIdentificationColumn(self, J, delRt)
    L0 = _cisstRobotPython.robManipulator_L0
    
    L1 = _cisstRobotPython.robManipulator_L1
    
    L2 = _cisstRobotPython.robManipulator_L2
    
    L3 = _cisstRobotPython.robManipulator_L3
    
    L4 = _cisstRobotPython.robManipulator_L4
    
    L5 = _cisstRobotPython.robManipulator_L5
    
    L6 = _cisstRobotPython.robManipulator_L6
    
    L7 = _cisstRobotPython.robManipulator_L7
    
    L8 = _cisstRobotPython.robManipulator_L8
    
    L9 = _cisstRobotPython.robManipulator_L9
    
    LN = _cisstRobotPython.robManipulator_LN
    

    def __init__(self, *args):
        r"""
        __init__(robManipulator self, vctFrame4x4< double > const & Rtw0=vctFrame4x4< double >()) -> robManipulator
        __init__(robManipulator self, std::string const & robotfilename, vctFrame4x4< double > const & Rtw0=vctFrame4x4< double >()) -> robManipulator
        __init__(robManipulator self, std::vector< robKinematics *,std::allocator< robKinematics * > > const linkParms, vctFrame4x4< double > const & Rtw0=vctFrame4x4< double >()) -> robManipulator
        """
        _cisstRobotPython.robManipulator_swiginit(self, _cisstRobotPython.new_robManipulator(*args))
    __swig_destroy__ = _cisstRobotPython.delete_robManipulator

    def SetJointLimits(self, lowerLimits, upperLimits):
        r"""SetJointLimits(robManipulator self, vctDynamicVector< double > const & lowerLimits, vctDynamicVector< double > const & upperLimits)"""
        return _cisstRobotPython.robManipulator_SetJointLimits(self, lowerLimits, upperLimits)

    def GetJointLimits(self, lowerLimits, upperLimits):
        r"""GetJointLimits(robManipulator self, vctDynamicVectorRef< double > lowerLimits, vctDynamicVectorRef< double > upperLimits)"""
        return _cisstRobotPython.robManipulator_GetJointLimits(self, lowerLimits, upperLimits)

    def GetFTMaximums(self, ftMaximums):
        r"""GetFTMaximums(robManipulator self, vctDynamicVectorRef< double > ftMaximums)"""
        return _cisstRobotPython.robManipulator_GetFTMaximums(self, ftMaximums)

    def GetJointNames(self, names):
        r"""GetJointNames(robManipulator self, std::vector< std::string,std::allocator< std::string > > & names)"""
        return _cisstRobotPython.robManipulator_GetJointNames(self, names)

    def GetJointTypes(self, types):
        r"""GetJointTypes(robManipulator self, std::vector< robJoint::Type,std::allocator< robJoint::Type > > & types)"""
        return _cisstRobotPython.robManipulator_GetJointTypes(self, types)

    def ForwardKinematics(self, q, N=-1):
        r"""ForwardKinematics(robManipulator self, vctDynamicVector< double > const & q, int N=-1) -> vctFrame4x4< double >"""
        return _cisstRobotPython.robManipulator_ForwardKinematics(self, q, N)

    def InverseKinematics(self, *args):
        r"""
        InverseKinematics(robManipulator self, vctDynamicVector< double > & q, vctFrame4x4< double > const & Rts, double tolerance=1e-12, size_t Niteration=1000, double LAMBDA=0.001) -> robManipulator::Errno
        InverseKinematics(robManipulator self, vctDynamicVector< double > & q, vctFrm3 Rts, double tolerance=1e-12, size_t Niteration=1000) -> robManipulator::Errno
        """
        return _cisstRobotPython.robManipulator_InverseKinematics(self, *args)

    def NormalizeAngles(self, q):
        r"""NormalizeAngles(robManipulator self, vctDynamicVector< double > & q)"""
        return _cisstRobotPython.robManipulator_NormalizeAngles(self, q)

    def InverseDynamics(self, *args):
        r"""
        InverseDynamics(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd, vctDynamicVector< double > const & qdd) -> vctDynamicVector< double >
        InverseDynamics(robManipulator self, vctDynamicVector< double > const & q, vctDynamicVector< double > const & qd, vctFixedSizeVector< double,6 > const & vdwd) -> vctDynamicVector< double >
        """
        return _cisstRobotPython.robManipulator_InverseDynamics(self, *args)

    def JacobianKinematicsIdentification(self, q, epsilon=1e-6):
        r"""JacobianKinematicsIdentification(robManipulator self, vctDynamicVector< double > const & q, double epsilon=1e-6) -> vctDynamicMatrix< double >"""
        return _cisstRobotPython.robManipulator_JacobianKinematicsIdentification(self, q, epsilon)

    def PrintKinematics(self, os):
        r"""PrintKinematics(robManipulator self, ostream os)"""
        return _cisstRobotPython.robManipulator_PrintKinematics(self, os)

    def Attach(self, tool):
        r"""Attach(robManipulator self, robManipulator tool)"""
        return _cisstRobotPython.robManipulator_Attach(self, tool)

    def DeleteTools(self):
        r"""DeleteTools(robManipulator self)"""
        return _cisstRobotPython.robManipulator_DeleteTools(self)

    def Truncate(self, linksToKeep):
        r"""Truncate(robManipulator self, size_t const linksToKeep) -> robManipulator::Errno"""
        return _cisstRobotPython.robManipulator_Truncate(self, linksToKeep)

    def LastError(self):
        r"""LastError(robManipulator self) -> std::string const &"""
        return _cisstRobotPython.robManipulator_LastError(self)

    def ClampJointValueAndUpdateError(self, jointIndex, value, tolerance=1e-6):
        r"""ClampJointValueAndUpdateError(robManipulator self, size_t const jointIndex, double & value, double const & tolerance=1e-6) -> bool"""
        return _cisstRobotPython.robManipulator_ClampJointValueAndUpdateError(self, jointIndex, value, tolerance)

# Register robManipulator in _cisstRobotPython:
_cisstRobotPython.robManipulator_swigregister(robManipulator)

class robLink(object):
    r"""Proxy of C++ robLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ESUCCESS = _cisstRobotPython.robLink_ESUCCESS
    
    EFAILURE = _cisstRobotPython.robLink_EFAILURE
    

    def __init__(self, *args):
        r"""
        __init__(robLink self) -> robLink
        __init__(robLink self, robLink link) -> robLink
        __init__(robLink self, robKinematics kinematics, robMass const & mass) -> robLink
        """
        _cisstRobotPython.robLink_swiginit(self, _cisstRobotPython.new_robLink(*args))
    __swig_destroy__ = _cisstRobotPython.delete_robLink

    def Read(self, *args):
        r"""
        Read(robLink self, istream _is) -> robLink::Errno
        Read(robLink self, Json::Value const & linkConfig) -> robLink::Errno
        """
        return _cisstRobotPython.robLink_Read(self, *args)

    def Write(self, os):
        r"""Write(robLink self, ostream os) -> robLink::Errno"""
        return _cisstRobotPython.robLink_Write(self, os)

    def ForwardKinematics(self, q):
        r"""ForwardKinematics(robLink self, double q) -> vctFrame4x4< double >"""
        return _cisstRobotPython.robLink_ForwardKinematics(self, q)

    def PStar(self):
        r"""PStar(robLink self) -> vctFixedSizeVector< double,3 >"""
        return _cisstRobotPython.robLink_PStar(self)

    def Orientation(self, q):
        r"""Orientation(robLink self, double q) -> vctMatrixRotation3< double >"""
        return _cisstRobotPython.robLink_Orientation(self, q)

    def GetKinematics(self):
        r"""GetKinematics(robLink self) -> robKinematics"""
        return _cisstRobotPython.robLink_GetKinematics(self)

    def MassData(self, *args):
        r"""
        MassData(robLink self) -> robMass const
        MassData(robLink self) -> robMass &
        """
        return _cisstRobotPython.robLink_MassData(self, *args)

    def GetConvention(self):
        r"""GetConvention(robLink self) -> robKinematics::Convention"""
        return _cisstRobotPython.robLink_GetConvention(self)

    def GetType(self):
        r"""GetType(robLink self) -> robJoint::Type"""
        return _cisstRobotPython.robLink_GetType(self)

    def Mass(self):
        r"""Mass(robLink self) -> double"""
        return _cisstRobotPython.robLink_Mass(self)

    def CenterOfMass(self):
        r"""CenterOfMass(robLink self) -> vctFixedSizeVector< double,3 >"""
        return _cisstRobotPython.robLink_CenterOfMass(self)

    def MomentOfInertiaAtCOM(self):
        r"""MomentOfInertiaAtCOM(robLink self) -> vctFixedSizeMatrix< double,3,3 >"""
        return _cisstRobotPython.robLink_MomentOfInertiaAtCOM(self)

    def MomentOfInertia(self):
        r"""MomentOfInertia(robLink self) -> vctFixedSizeMatrix< double,3,3 >"""
        return _cisstRobotPython.robLink_MomentOfInertia(self)

    def PositionMin(self):
        r"""PositionMin(robLink self) -> double"""
        return _cisstRobotPython.robLink_PositionMin(self)

    def PositionMax(self):
        r"""PositionMax(robLink self) -> double"""
        return _cisstRobotPython.robLink_PositionMax(self)

    def ForceTorqueMax(self):
        r"""ForceTorqueMax(robLink self) -> double"""
        return _cisstRobotPython.robLink_ForceTorqueMax(self)

# Register robLink in _cisstRobotPython:
_cisstRobotPython.robLink_swigregister(robLink)

class robLinkVector(object):
    r"""Proxy of C++ std::vector< robLink > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(robLinkVector self) -> SwigPyIterator"""
        return _cisstRobotPython.robLinkVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(robLinkVector self) -> bool"""
        return _cisstRobotPython.robLinkVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(robLinkVector self) -> bool"""
        return _cisstRobotPython.robLinkVector___bool__(self)

    def __len__(self):
        r"""__len__(robLinkVector self) -> std::vector< robLink >::size_type"""
        return _cisstRobotPython.robLinkVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(robLinkVector self, std::vector< robLink >::difference_type i, std::vector< robLink >::difference_type j) -> robLinkVector"""
        return _cisstRobotPython.robLinkVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(robLinkVector self, std::vector< robLink >::difference_type i, std::vector< robLink >::difference_type j)
        __setslice__(robLinkVector self, std::vector< robLink >::difference_type i, std::vector< robLink >::difference_type j, robLinkVector v)
        """
        return _cisstRobotPython.robLinkVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(robLinkVector self, std::vector< robLink >::difference_type i, std::vector< robLink >::difference_type j)"""
        return _cisstRobotPython.robLinkVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(robLinkVector self, std::vector< robLink >::difference_type i)
        __delitem__(robLinkVector self, PySliceObject * slice)
        """
        return _cisstRobotPython.robLinkVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(robLinkVector self, PySliceObject * slice) -> robLinkVector
        __getitem__(robLinkVector self, std::vector< robLink >::difference_type i) -> robLink
        """
        return _cisstRobotPython.robLinkVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(robLinkVector self, PySliceObject * slice, robLinkVector v)
        __setitem__(robLinkVector self, PySliceObject * slice)
        __setitem__(robLinkVector self, std::vector< robLink >::difference_type i, robLink x)
        """
        return _cisstRobotPython.robLinkVector___setitem__(self, *args)

    def pop(self):
        r"""pop(robLinkVector self) -> robLink"""
        return _cisstRobotPython.robLinkVector_pop(self)

    def append(self, x):
        r"""append(robLinkVector self, robLink x)"""
        return _cisstRobotPython.robLinkVector_append(self, x)

    def empty(self):
        r"""empty(robLinkVector self) -> bool"""
        return _cisstRobotPython.robLinkVector_empty(self)

    def size(self):
        r"""size(robLinkVector self) -> std::vector< robLink >::size_type"""
        return _cisstRobotPython.robLinkVector_size(self)

    def swap(self, v):
        r"""swap(robLinkVector self, robLinkVector v)"""
        return _cisstRobotPython.robLinkVector_swap(self, v)

    def begin(self):
        r"""begin(robLinkVector self) -> std::vector< robLink >::iterator"""
        return _cisstRobotPython.robLinkVector_begin(self)

    def end(self):
        r"""end(robLinkVector self) -> std::vector< robLink >::iterator"""
        return _cisstRobotPython.robLinkVector_end(self)

    def rbegin(self):
        r"""rbegin(robLinkVector self) -> std::vector< robLink >::reverse_iterator"""
        return _cisstRobotPython.robLinkVector_rbegin(self)

    def rend(self):
        r"""rend(robLinkVector self) -> std::vector< robLink >::reverse_iterator"""
        return _cisstRobotPython.robLinkVector_rend(self)

    def clear(self):
        r"""clear(robLinkVector self)"""
        return _cisstRobotPython.robLinkVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(robLinkVector self) -> std::vector< robLink >::allocator_type"""
        return _cisstRobotPython.robLinkVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(robLinkVector self)"""
        return _cisstRobotPython.robLinkVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(robLinkVector self, std::vector< robLink >::iterator pos) -> std::vector< robLink >::iterator
        erase(robLinkVector self, std::vector< robLink >::iterator first, std::vector< robLink >::iterator last) -> std::vector< robLink >::iterator
        """
        return _cisstRobotPython.robLinkVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(robLinkVector self) -> robLinkVector
        __init__(robLinkVector self, robLinkVector other) -> robLinkVector
        __init__(robLinkVector self, std::vector< robLink >::size_type size) -> robLinkVector
        __init__(robLinkVector self, std::vector< robLink >::size_type size, robLink value) -> robLinkVector
        """
        _cisstRobotPython.robLinkVector_swiginit(self, _cisstRobotPython.new_robLinkVector(*args))

    def push_back(self, x):
        r"""push_back(robLinkVector self, robLink x)"""
        return _cisstRobotPython.robLinkVector_push_back(self, x)

    def front(self):
        r"""front(robLinkVector self) -> robLink"""
        return _cisstRobotPython.robLinkVector_front(self)

    def back(self):
        r"""back(robLinkVector self) -> robLink"""
        return _cisstRobotPython.robLinkVector_back(self)

    def assign(self, n, x):
        r"""assign(robLinkVector self, std::vector< robLink >::size_type n, robLink x)"""
        return _cisstRobotPython.robLinkVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(robLinkVector self, std::vector< robLink >::size_type new_size)
        resize(robLinkVector self, std::vector< robLink >::size_type new_size, robLink x)
        """
        return _cisstRobotPython.robLinkVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(robLinkVector self, std::vector< robLink >::iterator pos, robLink x) -> std::vector< robLink >::iterator
        insert(robLinkVector self, std::vector< robLink >::iterator pos, std::vector< robLink >::size_type n, robLink x)
        """
        return _cisstRobotPython.robLinkVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(robLinkVector self, std::vector< robLink >::size_type n)"""
        return _cisstRobotPython.robLinkVector_reserve(self, n)

    def capacity(self):
        r"""capacity(robLinkVector self) -> std::vector< robLink >::size_type"""
        return _cisstRobotPython.robLinkVector_capacity(self)
    __swig_destroy__ = _cisstRobotPython.delete_robLinkVector

# Register robLinkVector in _cisstRobotPython:
_cisstRobotPython.robLinkVector_swigregister(robLinkVector)

class robJoint(object):
    r"""Proxy of C++ robJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = _cisstRobotPython.robJoint_UNDEFINED
    
    HINGE = _cisstRobotPython.robJoint_HINGE
    
    SLIDER = _cisstRobotPython.robJoint_SLIDER
    
    UNIVERSAL = _cisstRobotPython.robJoint_UNIVERSAL
    
    BALLSOCKET = _cisstRobotPython.robJoint_BALLSOCKET
    
    ACTIVE = _cisstRobotPython.robJoint_ACTIVE
    
    PASSIVE = _cisstRobotPython.robJoint_PASSIVE
    
    ESUCCESS = _cisstRobotPython.robJoint_ESUCCESS
    
    EFAILURE = _cisstRobotPython.robJoint_EFAILURE
    

    def __init__(self, *args):
        r"""
        __init__(robJoint self) -> robJoint
        __init__(robJoint self, robJoint::Type type, robJoint::Mode mode, double offset, double min, double max, double ftmax) -> robJoint
        """
        _cisstRobotPython.robJoint_swiginit(self, _cisstRobotPython.new_robJoint(*args))
    __swig_destroy__ = _cisstRobotPython.delete_robJoint

    def Name(self, *args):
        r"""
        Name(robJoint self) -> std::string const
        Name(robJoint self) -> std::string &
        """
        return _cisstRobotPython.robJoint_Name(self, *args)

    def GetType(self):
        r"""GetType(robJoint self) -> robJoint::Type"""
        return _cisstRobotPython.robJoint_GetType(self)

    def GetMode(self):
        r"""GetMode(robJoint self) -> robJoint::Mode"""
        return _cisstRobotPython.robJoint_GetMode(self)

    def GetPosition(self):
        r"""GetPosition(robJoint self) -> double"""
        return _cisstRobotPython.robJoint_GetPosition(self)

    def GetVelocity(self):
        r"""GetVelocity(robJoint self) -> double"""
        return _cisstRobotPython.robJoint_GetVelocity(self)

    def GetForceTorque(self):
        r"""GetForceTorque(robJoint self) -> double"""
        return _cisstRobotPython.robJoint_GetForceTorque(self)

    def SetPosition(self, q):
        r"""SetPosition(robJoint self, double q)"""
        return _cisstRobotPython.robJoint_SetPosition(self, q)

    def SetVelocity(self, qd):
        r"""SetVelocity(robJoint self, double qd)"""
        return _cisstRobotPython.robJoint_SetVelocity(self, qd)

    def SetForceTorque(self, ft):
        r"""SetForceTorque(robJoint self, double ft)"""
        return _cisstRobotPython.robJoint_SetForceTorque(self, ft)

    def PositionOffset(self):
        r"""PositionOffset(robJoint self) -> double"""
        return _cisstRobotPython.robJoint_PositionOffset(self)

    def SetPositionOffset(self, offset):
        r"""SetPositionOffset(robJoint self, double const offset)"""
        return _cisstRobotPython.robJoint_SetPositionOffset(self, offset)

    def PositionMin(self, *args):
        r"""
        PositionMin(robJoint self) -> double const
        PositionMin(robJoint self) -> double &
        """
        return _cisstRobotPython.robJoint_PositionMin(self, *args)

    def PositionMax(self, *args):
        r"""
        PositionMax(robJoint self) -> double const
        PositionMax(robJoint self) -> double &
        """
        return _cisstRobotPython.robJoint_PositionMax(self, *args)

    def ForceTorqueMax(self, *args):
        r"""
        ForceTorqueMax(robJoint self) -> double const
        ForceTorqueMax(robJoint self) -> double &
        """
        return _cisstRobotPython.robJoint_ForceTorqueMax(self, *args)

    def Read(self, *args):
        r"""
        Read(robJoint self, istream _is) -> robJoint::Errno
        Read(robJoint self, Json::Value const & config) -> robJoint::Errno
        """
        return _cisstRobotPython.robJoint_Read(self, *args)

    def Write(self, os):
        r"""Write(robJoint self, ostream os) -> robJoint::Errno"""
        return _cisstRobotPython.robJoint_Write(self, os)

# Register robJoint in _cisstRobotPython:
_cisstRobotPython.robJoint_swigregister(robJoint)

class robKinematics(robJoint):
    r"""Proxy of C++ robKinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UNDEFINED = _cisstRobotPython.robKinematics_UNDEFINED
    
    STANDARD_DH = _cisstRobotPython.robKinematics_STANDARD_DH
    
    MODIFIED_DH = _cisstRobotPython.robKinematics_MODIFIED_DH
    
    HAYATI = _cisstRobotPython.robKinematics_HAYATI
    
    MODIFIED_HAYATI = _cisstRobotPython.robKinematics_MODIFIED_HAYATI
    
    __swig_destroy__ = _cisstRobotPython.delete_robKinematics

    def GetConvention(self):
        r"""GetConvention(robKinematics self) -> robKinematics::Convention"""
        return _cisstRobotPython.robKinematics_GetConvention(self)

    def Read(self, *args):
        r"""
        Read(robKinematics self, istream _is) -> robKinematics::Errno
        Read(robKinematics self, Json::Value const & config) -> robKinematics::Errno
        """
        return _cisstRobotPython.robKinematics_Read(self, *args)

    def ForwardKinematics(self, q):
        r"""ForwardKinematics(robKinematics self, double q) -> vctFrame4x4< double >"""
        return _cisstRobotPython.robKinematics_ForwardKinematics(self, q)

    def Orientation(self, q):
        r"""Orientation(robKinematics self, double q) -> vctMatrixRotation3< double >"""
        return _cisstRobotPython.robKinematics_Orientation(self, q)

    def PStar(self):
        r"""PStar(robKinematics self) -> vctFixedSizeVector< double,3 >"""
        return _cisstRobotPython.robKinematics_PStar(self)

    def Clone(self):
        r"""Clone(robKinematics self) -> robKinematics"""
        return _cisstRobotPython.robKinematics_Clone(self)

    @staticmethod
    def Instantiate(type):
        r"""Instantiate(std::string const & type) -> robKinematics"""
        return _cisstRobotPython.robKinematics_Instantiate(type)

# Register robKinematics in _cisstRobotPython:
_cisstRobotPython.robKinematics_swigregister(robKinematics)

def robKinematics_Instantiate(type):
    r"""robKinematics_Instantiate(std::string const & type) -> robKinematics"""
    return _cisstRobotPython.robKinematics_Instantiate(type)

class robDH(robKinematics):
    r"""Proxy of C++ robDH class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(robDH self) -> robDH
        __init__(robDH self, double alpha, double a, double theta, double d, robJoint joint) -> robDH
        """
        _cisstRobotPython.robDH_swiginit(self, _cisstRobotPython.new_robDH(*args))
    __swig_destroy__ = _cisstRobotPython.delete_robDH

    def GetRotationX(self):
        r"""GetRotationX(robDH self) -> double"""
        return _cisstRobotPython.robDH_GetRotationX(self)

    def GetRotationZ(self):
        r"""GetRotationZ(robDH self) -> double"""
        return _cisstRobotPython.robDH_GetRotationZ(self)

    def GetTranslationX(self):
        r"""GetTranslationX(robDH self) -> double"""
        return _cisstRobotPython.robDH_GetTranslationX(self)

    def GetTranslationZ(self):
        r"""GetTranslationZ(robDH self) -> double"""
        return _cisstRobotPython.robDH_GetTranslationZ(self)

    def SetRotationX(self, x):
        r"""SetRotationX(robDH self, double x)"""
        return _cisstRobotPython.robDH_SetRotationX(self, x)

    def SetRotationZ(self, x):
        r"""SetRotationZ(robDH self, double x)"""
        return _cisstRobotPython.robDH_SetRotationZ(self, x)

    def SetTranslationX(self, x):
        r"""SetTranslationX(robDH self, double x)"""
        return _cisstRobotPython.robDH_SetTranslationX(self, x)

    def SetTranslationZ(self, x):
        r"""SetTranslationZ(robDH self, double x)"""
        return _cisstRobotPython.robDH_SetTranslationZ(self, x)

# Register robDH in _cisstRobotPython:
_cisstRobotPython.robDH_swigregister(robDH)

class robModifiedDH(robKinematics):
    r"""Proxy of C++ robModifiedDH class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(robModifiedDH self) -> robModifiedDH
        __init__(robModifiedDH self, double alpha, double a, double theta, double d, robJoint joint) -> robModifiedDH
        """
        _cisstRobotPython.robModifiedDH_swiginit(self, _cisstRobotPython.new_robModifiedDH(*args))
    __swig_destroy__ = _cisstRobotPython.delete_robModifiedDH

    def GetRotationX(self):
        r"""GetRotationX(robModifiedDH self) -> double"""
        return _cisstRobotPython.robModifiedDH_GetRotationX(self)

    def GetRotationZ(self):
        r"""GetRotationZ(robModifiedDH self) -> double"""
        return _cisstRobotPython.robModifiedDH_GetRotationZ(self)

    def GetTranslationX(self):
        r"""GetTranslationX(robModifiedDH self) -> double"""
        return _cisstRobotPython.robModifiedDH_GetTranslationX(self)

    def GetTranslationZ(self):
        r"""GetTranslationZ(robModifiedDH self) -> double"""
        return _cisstRobotPython.robModifiedDH_GetTranslationZ(self)

    def SetRotationX(self, x):
        r"""SetRotationX(robModifiedDH self, double x)"""
        return _cisstRobotPython.robModifiedDH_SetRotationX(self, x)

    def SetRotationZ(self, x):
        r"""SetRotationZ(robModifiedDH self, double x)"""
        return _cisstRobotPython.robModifiedDH_SetRotationZ(self, x)

    def SetTranslationX(self, x):
        r"""SetTranslationX(robModifiedDH self, double x)"""
        return _cisstRobotPython.robModifiedDH_SetTranslationX(self, x)

    def SetTranslationZ(self, x):
        r"""SetTranslationZ(robModifiedDH self, double x)"""
        return _cisstRobotPython.robModifiedDH_SetTranslationZ(self, x)

# Register robModifiedDH in _cisstRobotPython:
_cisstRobotPython.robModifiedDH_swigregister(robModifiedDH)

class robHayati(robKinematics):
    r"""Proxy of C++ robHayati class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(robHayati self) -> robHayati
        __init__(robHayati self, double alpha, double beta, double theta, double d, robJoint joint) -> robHayati
        """
        _cisstRobotPython.robHayati_swiginit(self, _cisstRobotPython.new_robHayati(*args))
    __swig_destroy__ = _cisstRobotPython.delete_robHayati

    def GetRotationX(self):
        r"""GetRotationX(robHayati self) -> double"""
        return _cisstRobotPython.robHayati_GetRotationX(self)

    def GetRotationY(self):
        r"""GetRotationY(robHayati self) -> double"""
        return _cisstRobotPython.robHayati_GetRotationY(self)

    def GetRotationZ(self):
        r"""GetRotationZ(robHayati self) -> double"""
        return _cisstRobotPython.robHayati_GetRotationZ(self)

    def GetTranslationX(self):
        r"""GetTranslationX(robHayati self) -> double"""
        return _cisstRobotPython.robHayati_GetTranslationX(self)

    def GetTranslationZ(self):
        r"""GetTranslationZ(robHayati self) -> double"""
        return _cisstRobotPython.robHayati_GetTranslationZ(self)

    def SetRotationX(self, x):
        r"""SetRotationX(robHayati self, double x)"""
        return _cisstRobotPython.robHayati_SetRotationX(self, x)

    def SetRotationY(self, x):
        r"""SetRotationY(robHayati self, double x)"""
        return _cisstRobotPython.robHayati_SetRotationY(self, x)

    def SetRotationZ(self, x):
        r"""SetRotationZ(robHayati self, double x)"""
        return _cisstRobotPython.robHayati_SetRotationZ(self, x)

    def SetTranslationX(self, x):
        r"""SetTranslationX(robHayati self, double x)"""
        return _cisstRobotPython.robHayati_SetTranslationX(self, x)

    def SetTranslationZ(self, x):
        r"""SetTranslationZ(robHayati self, double x)"""
        return _cisstRobotPython.robHayati_SetTranslationZ(self, x)

# Register robHayati in _cisstRobotPython:
_cisstRobotPython.robHayati_swigregister(robHayati)



