/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    PyBytes_AsStringAndSize(str, &cstr, &len);
    newstr = (char *) malloc(len+1);
    memcpy(newstr, cstr, len+1);
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          PyObject_SetAttr(inst, SWIG_This(), swig_this);
          Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, "__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ActionType swig_types[0]
#define SWIGTYPE_p_AngleType swig_types[1]
#define SWIGTYPE_p_BaseClassType swig_types[2]
#define SWIGTYPE_p_BaseType swig_types[3]
#define SWIGTYPE_p_BoolType swig_types[4]
#define SWIGTYPE_p_CallableType swig_types[5]
#define SWIGTYPE_p_ChannelContainerType swig_types[6]
#define SWIGTYPE_p_ChannelType swig_types[7]
#define SWIGTYPE_p_CollectorFileFloatingNotation swig_types[8]
#define SWIGTYPE_p_CollectorFileFormat swig_types[9]
#define SWIGTYPE_p_CommandInternalMapType swig_types[10]
#define SWIGTYPE_p_CommandQualifiedReadMapType swig_types[11]
#define SWIGTYPE_p_CommandReadMapType swig_types[12]
#define SWIGTYPE_p_CommandType swig_types[13]
#define SWIGTYPE_p_CommandVoidMapType swig_types[14]
#define SWIGTYPE_p_CommandVoidReturnMapType swig_types[15]
#define SWIGTYPE_p_CommandWriteMapType swig_types[16]
#define SWIGTYPE_p_CommandWriteReturnMapType swig_types[17]
#define SWIGTYPE_p_ConstForceType swig_types[18]
#define SWIGTYPE_p_ConstIteratorType swig_types[19]
#define SWIGTYPE_p_ConstTorqueType swig_types[20]
#define SWIGTYPE_p_ContainerType swig_types[21]
#define SWIGTYPE_p_DeRefType swig_types[22]
#define SWIGTYPE_p_ElementType swig_types[23]
#define SWIGTYPE_p_EntryType swig_types[24]
#define SWIGTYPE_p_EventType swig_types[25]
#define SWIGTYPE_p_EventVoidMapType swig_types[26]
#define SWIGTYPE_p_EventWriteMapType swig_types[27]
#define SWIGTYPE_p_ForceType swig_types[28]
#define SWIGTYPE_p_IteratorType swig_types[29]
#define SWIGTYPE_p_MaskType swig_types[30]
#define SWIGTYPE_p_MatrixType swig_types[31]
#define SWIGTYPE_p_MultiplexerConstIteratorType swig_types[32]
#define SWIGTYPE_p_MultiplexerContainerType swig_types[33]
#define SWIGTYPE_p_MultiplexerIteratorType swig_types[34]
#define SWIGTYPE_p_NodeListType swig_types[35]
#define SWIGTYPE_p_NormType swig_types[36]
#define SWIGTYPE_p_RefType swig_types[37]
#define SWIGTYPE_p_RotationType swig_types[38]
#define SWIGTYPE_p_ServicesContainerType swig_types[39]
#define SWIGTYPE_p_StreamBufType swig_types[40]
#define SWIGTYPE_p_ThisType swig_types[41]
#define SWIGTYPE_p_TimeTicksType swig_types[42]
#define SWIGTYPE_p_TorqueType swig_types[43]
#define SWIGTYPE_p_TranslationType swig_types[44]
#define SWIGTYPE_p_Type swig_types[45]
#define SWIGTYPE_p_TypeTraits swig_types[46]
#define SWIGTYPE_p_VaArgPromotion swig_types[47]
#define SWIGTYPE_p_VectorType swig_types[48]
#define SWIGTYPE_p_allocator_type swig_types[49]
#define SWIGTYPE_p_bool swig_types[50]
#define SWIGTYPE_p_char swig_types[51]
#define SWIGTYPE_p_char_type swig_types[52]
#define SWIGTYPE_p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t swig_types[53]
#define SWIGTYPE_p_cmnClassServicesBase swig_types[54]
#define SWIGTYPE_p_cmnDataFormat swig_types[55]
#define SWIGTYPE_p_cmnGenericObject swig_types[56]
#define SWIGTYPE_p_cmnGenericObjectProxyT_bool_t swig_types[57]
#define SWIGTYPE_p_cmnGenericObjectProxyT_char_t swig_types[58]
#define SWIGTYPE_p_cmnGenericObjectProxyT_double_t swig_types[59]
#define SWIGTYPE_p_cmnGenericObjectProxyT_int_t swig_types[60]
#define SWIGTYPE_p_cmnGenericObjectProxyT_long_long_t swig_types[61]
#define SWIGTYPE_p_cmnGenericObjectProxyT_long_t swig_types[62]
#define SWIGTYPE_p_cmnGenericObjectProxyT_short_t swig_types[63]
#define SWIGTYPE_p_cmnGenericObjectProxyT_unsigned_char_t swig_types[64]
#define SWIGTYPE_p_cmnGenericObjectProxyT_unsigned_int_t swig_types[65]
#define SWIGTYPE_p_cmnGenericObjectProxyT_unsigned_long_long_t swig_types[66]
#define SWIGTYPE_p_cmnGenericObjectProxyT_unsigned_long_t swig_types[67]
#define SWIGTYPE_p_cmnGenericObjectProxyT_unsigned_short_t swig_types[68]
#define SWIGTYPE_p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t swig_types[69]
#define SWIGTYPE_p_cmnPath swig_types[70]
#define SWIGTYPE_p_const_iterator swig_types[71]
#define SWIGTYPE_p_const_reverse_iterator swig_types[72]
#define SWIGTYPE_p_difference_type swig_types[73]
#define SWIGTYPE_p_dimension_type swig_types[74]
#define SWIGTYPE_p_double swig_types[75]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[76]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[77]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[78]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[79]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[80]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[81]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[82]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[83]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[84]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[85]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[86]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[87]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[88]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[89]
#define SWIGTYPE_p_first_type swig_types[90]
#define SWIGTYPE_p_float swig_types[91]
#define SWIGTYPE_p_fmtflags swig_types[92]
#define SWIGTYPE_p_index_type swig_types[93]
#define SWIGTYPE_p_int swig_types[94]
#define SWIGTYPE_p_int_type swig_types[95]
#define SWIGTYPE_p_iostate swig_types[96]
#define SWIGTYPE_p_iterator swig_types[97]
#define SWIGTYPE_p_key_type swig_types[98]
#define SWIGTYPE_p_long swig_types[99]
#define SWIGTYPE_p_long_double swig_types[100]
#define SWIGTYPE_p_long_long swig_types[101]
#define SWIGTYPE_p_mapped_type swig_types[102]
#define SWIGTYPE_p_mtsBlockingType swig_types[103]
#define SWIGTYPE_p_mtsCollectorBase swig_types[104]
#define SWIGTYPE_p_mtsCollectorState swig_types[105]
#define SWIGTYPE_p_mtsCommandQualifiedReadDescription swig_types[106]
#define SWIGTYPE_p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t swig_types[107]
#define SWIGTYPE_p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t swig_types[108]
#define SWIGTYPE_p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t swig_types[109]
#define SWIGTYPE_p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t swig_types[110]
#define SWIGTYPE_p_mtsCommandQueueingPolicy swig_types[111]
#define SWIGTYPE_p_mtsCommandReadDescription swig_types[112]
#define SWIGTYPE_p_mtsCommandVoidDescription swig_types[113]
#define SWIGTYPE_p_mtsCommandVoidReturnDescription swig_types[114]
#define SWIGTYPE_p_mtsCommandWriteDescription swig_types[115]
#define SWIGTYPE_p_mtsCommandWriteReturnDescription swig_types[116]
#define SWIGTYPE_p_mtsComponent swig_types[117]
#define SWIGTYPE_p_mtsComponentConstructorNameAndArgT_double_t swig_types[118]
#define SWIGTYPE_p_mtsComponentConstructorNameAndArgT_int_t swig_types[119]
#define SWIGTYPE_p_mtsComponentConstructorNameAndArgT_long_t swig_types[120]
#define SWIGTYPE_p_mtsComponentConstructorNameAndArgT_std__string_t swig_types[121]
#define SWIGTYPE_p_mtsComponentConstructorNameAndArgT_unsigned_int_t swig_types[122]
#define SWIGTYPE_p_mtsComponentConstructorNameAndArgT_unsigned_long_t swig_types[123]
#define SWIGTYPE_p_mtsComponentState swig_types[124]
#define SWIGTYPE_p_mtsComponentStateChange swig_types[125]
#define SWIGTYPE_p_mtsComponentStatusControl swig_types[126]
#define SWIGTYPE_p_mtsComponentWithManagement swig_types[127]
#define SWIGTYPE_p_mtsDescriptionComponent swig_types[128]
#define SWIGTYPE_p_mtsDescriptionComponentClass swig_types[129]
#define SWIGTYPE_p_mtsDescriptionConnection swig_types[130]
#define SWIGTYPE_p_mtsDescriptionInterface swig_types[131]
#define SWIGTYPE_p_mtsDescriptionInterfaceFullName swig_types[132]
#define SWIGTYPE_p_mtsDescriptionLoadLibrary swig_types[133]
#define SWIGTYPE_p_mtsDoubleAnRot2 swig_types[134]
#define SWIGTYPE_p_mtsDoubleAxAnRot3 swig_types[135]
#define SWIGTYPE_p_mtsDoubleFrm4x4 swig_types[136]
#define SWIGTYPE_p_mtsDoubleMatFrm3 swig_types[137]
#define SWIGTYPE_p_mtsDoubleMatRot2 swig_types[138]
#define SWIGTYPE_p_mtsDoubleMatRot3 swig_types[139]
#define SWIGTYPE_p_mtsDoubleQuat swig_types[140]
#define SWIGTYPE_p_mtsDoubleQuatFrm3 swig_types[141]
#define SWIGTYPE_p_mtsDoubleQuatRot3 swig_types[142]
#define SWIGTYPE_p_mtsDoubleRodRot3 swig_types[143]
#define SWIGTYPE_p_mtsEndUserInterfaceArg swig_types[144]
#define SWIGTYPE_p_mtsEventQueueingPolicy swig_types[145]
#define SWIGTYPE_p_mtsEventVoidDescription swig_types[146]
#define SWIGTYPE_p_mtsEventWriteDescription swig_types[147]
#define SWIGTYPE_p_mtsExecutionResult swig_types[148]
#define SWIGTYPE_p_mtsFloatAnRot2 swig_types[149]
#define SWIGTYPE_p_mtsFloatAxAnRot3 swig_types[150]
#define SWIGTYPE_p_mtsFloatFrm4x4 swig_types[151]
#define SWIGTYPE_p_mtsFloatMatFrm3 swig_types[152]
#define SWIGTYPE_p_mtsFloatMatRot2 swig_types[153]
#define SWIGTYPE_p_mtsFloatMatRot3 swig_types[154]
#define SWIGTYPE_p_mtsFloatQuat swig_types[155]
#define SWIGTYPE_p_mtsFloatQuatFrm3 swig_types[156]
#define SWIGTYPE_p_mtsFloatQuatRot3 swig_types[157]
#define SWIGTYPE_p_mtsFloatRodRot3 swig_types[158]
#define SWIGTYPE_p_mtsFunctionRead swig_types[159]
#define SWIGTYPE_p_mtsGenericObject swig_types[160]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_bool_t swig_types[161]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_double_t swig_types[162]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_float_t swig_types[163]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_int_t swig_types[164]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_long_t swig_types[165]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_mtsComponentState_t swig_types[166]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t swig_types[167]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t swig_types[168]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_short_t swig_types[169]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_std__string_t swig_types[170]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t swig_types[171]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[172]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t swig_types[173]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t swig_types[174]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[175]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_unsigned_int_t swig_types[176]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_unsigned_long_t swig_types[177]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_unsigned_short_t swig_types[178]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct1_t swig_types[179]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct2_t swig_types[180]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct2x2_t swig_types[181]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct3_t swig_types[182]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct3x3_t swig_types[183]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct4_t swig_types[184]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct4x4_t swig_types[185]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct5_t swig_types[186]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct6_t swig_types[187]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct7_t swig_types[188]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct8_t swig_types[189]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vct9_t swig_types[190]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool1_t swig_types[191]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool2_t swig_types[192]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool3_t swig_types[193]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool4_t swig_types[194]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool5_t swig_types[195]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool6_t swig_types[196]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool7_t swig_types[197]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool8_t swig_types[198]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBool9_t swig_types[199]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctBoolVec_t swig_types[200]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar1_t swig_types[201]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar2_t swig_types[202]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar3_t swig_types[203]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar4_t swig_types[204]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar5_t swig_types[205]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar6_t swig_types[206]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar7_t swig_types[207]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar8_t swig_types[208]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctChar9_t swig_types[209]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctCharVec_t swig_types[210]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctDoubleMat_t swig_types[211]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctDoubleVec_t swig_types[212]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat1_t swig_types[213]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat2_t swig_types[214]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat3_t swig_types[215]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat4_t swig_types[216]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat5_t swig_types[217]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat6_t swig_types[218]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat7_t swig_types[219]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat8_t swig_types[220]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloat9_t swig_types[221]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloatMat_t swig_types[222]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFloatVec_t swig_types[223]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t swig_types[224]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt1_t swig_types[225]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt2_t swig_types[226]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt3_t swig_types[227]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt4_t swig_types[228]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt5_t swig_types[229]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt6_t swig_types[230]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt7_t swig_types[231]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt8_t swig_types[232]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctInt9_t swig_types[233]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctIntMat_t swig_types[234]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctIntVec_t swig_types[235]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong1_t swig_types[236]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong2_t swig_types[237]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong3_t swig_types[238]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong4_t swig_types[239]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong5_t swig_types[240]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong6_t swig_types[241]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong7_t swig_types[242]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong8_t swig_types[243]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLong9_t swig_types[244]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctLongVec_t swig_types[245]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t swig_types[246]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort1_t swig_types[247]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort2_t swig_types[248]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort3_t swig_types[249]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort4_t swig_types[250]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort5_t swig_types[251]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort6_t swig_types[252]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort7_t swig_types[253]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort8_t swig_types[254]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShort9_t swig_types[255]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctShortVec_t swig_types[256]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar1_t swig_types[257]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar2_t swig_types[258]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar3_t swig_types[259]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar4_t swig_types[260]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar5_t swig_types[261]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar6_t swig_types[262]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar7_t swig_types[263]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar8_t swig_types[264]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUChar9_t swig_types[265]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUCharVec_t swig_types[266]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt1_t swig_types[267]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt2_t swig_types[268]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt3_t swig_types[269]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt4_t swig_types[270]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt5_t swig_types[271]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt6_t swig_types[272]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt7_t swig_types[273]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt8_t swig_types[274]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUInt9_t swig_types[275]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUIntVec_t swig_types[276]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong1_t swig_types[277]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong2_t swig_types[278]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong3_t swig_types[279]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong4_t swig_types[280]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong5_t swig_types[281]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong6_t swig_types[282]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong7_t swig_types[283]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong8_t swig_types[284]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULong9_t swig_types[285]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctULongVec_t swig_types[286]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort1_t swig_types[287]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort2_t swig_types[288]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort3_t swig_types[289]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort4_t swig_types[290]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort5_t swig_types[291]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort6_t swig_types[292]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort7_t swig_types[293]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort8_t swig_types[294]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShort9_t swig_types[295]
#define SWIGTYPE_p_mtsGenericObjectProxyBaseT_vctUShortVec_t swig_types[296]
#define SWIGTYPE_p_mtsGenericObjectProxyT_bool_t swig_types[297]
#define SWIGTYPE_p_mtsGenericObjectProxyT_char_t swig_types[298]
#define SWIGTYPE_p_mtsGenericObjectProxyT_double_t swig_types[299]
#define SWIGTYPE_p_mtsGenericObjectProxyT_float_t swig_types[300]
#define SWIGTYPE_p_mtsGenericObjectProxyT_int_t swig_types[301]
#define SWIGTYPE_p_mtsGenericObjectProxyT_long_long_t swig_types[302]
#define SWIGTYPE_p_mtsGenericObjectProxyT_long_t swig_types[303]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t swig_types[304]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsCommandReadDescription_t swig_types[305]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t swig_types[306]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t swig_types[307]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t swig_types[308]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t swig_types[309]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsComponentStateChange_t swig_types[310]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsComponentState_t swig_types[311]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsComponentStatusControl_t swig_types[312]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t swig_types[313]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsDescriptionComponent_t swig_types[314]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsDescriptionConnection_t swig_types[315]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t swig_types[316]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsDescriptionInterface_t swig_types[317]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t swig_types[318]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t swig_types[319]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsEventVoidDescription_t swig_types[320]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsEventWriteDescription_t swig_types[321]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsExecutionResult_t swig_types[322]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t swig_types[323]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t swig_types[324]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsMessage_t swig_types[325]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t swig_types[326]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t swig_types[327]
#define SWIGTYPE_p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t swig_types[328]
#define SWIGTYPE_p_mtsGenericObjectProxyT_prmPositionCartesianGet_t swig_types[329]
#define SWIGTYPE_p_mtsGenericObjectProxyT_prmPositionJointGet_t swig_types[330]
#define SWIGTYPE_p_mtsGenericObjectProxyT_prmPositionJointSet_t swig_types[331]
#define SWIGTYPE_p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t swig_types[332]
#define SWIGTYPE_p_mtsGenericObjectProxyT_short_t swig_types[333]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__listT_std__string_t_t swig_types[334]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__string_t swig_types[335]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t swig_types[336]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[337]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t swig_types[338]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t swig_types[339]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t swig_types[340]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[341]
#define SWIGTYPE_p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t swig_types[342]
#define SWIGTYPE_p_mtsGenericObjectProxyT_unsigned_char_t swig_types[343]
#define SWIGTYPE_p_mtsGenericObjectProxyT_unsigned_int_t swig_types[344]
#define SWIGTYPE_p_mtsGenericObjectProxyT_unsigned_long_t swig_types[345]
#define SWIGTYPE_p_mtsGenericObjectProxyT_unsigned_short_t swig_types[346]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct1_t swig_types[347]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct2_t swig_types[348]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct2x2_t swig_types[349]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct3_t swig_types[350]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct3x3_t swig_types[351]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct4_t swig_types[352]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct4x4_t swig_types[353]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct5_t swig_types[354]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct6_t swig_types[355]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct7_t swig_types[356]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct8_t swig_types[357]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vct9_t swig_types[358]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool1_t swig_types[359]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool2_t swig_types[360]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool3_t swig_types[361]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool4_t swig_types[362]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool5_t swig_types[363]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool6_t swig_types[364]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool7_t swig_types[365]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool8_t swig_types[366]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBool9_t swig_types[367]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctBoolVec_t swig_types[368]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar1_t swig_types[369]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar2_t swig_types[370]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar3_t swig_types[371]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar4_t swig_types[372]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar5_t swig_types[373]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar6_t swig_types[374]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar7_t swig_types[375]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar8_t swig_types[376]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctChar9_t swig_types[377]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctCharVec_t swig_types[378]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctDoubleMat_t swig_types[379]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctDoubleVec_t swig_types[380]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat1_t swig_types[381]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat2_t swig_types[382]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat3_t swig_types[383]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat4_t swig_types[384]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat5_t swig_types[385]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat6_t swig_types[386]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat7_t swig_types[387]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat8_t swig_types[388]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloat9_t swig_types[389]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloatMat_t swig_types[390]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFloatVec_t swig_types[391]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t swig_types[392]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t swig_types[393]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt1_t swig_types[394]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt2_t swig_types[395]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt3_t swig_types[396]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt4_t swig_types[397]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt5_t swig_types[398]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt6_t swig_types[399]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt7_t swig_types[400]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt8_t swig_types[401]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctInt9_t swig_types[402]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctIntMat_t swig_types[403]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctIntVec_t swig_types[404]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong1_t swig_types[405]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong2_t swig_types[406]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong3_t swig_types[407]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong4_t swig_types[408]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong5_t swig_types[409]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong6_t swig_types[410]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong7_t swig_types[411]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong8_t swig_types[412]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLong9_t swig_types[413]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctLongVec_t swig_types[414]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t swig_types[415]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort1_t swig_types[416]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort2_t swig_types[417]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort3_t swig_types[418]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort4_t swig_types[419]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort5_t swig_types[420]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort6_t swig_types[421]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort7_t swig_types[422]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort8_t swig_types[423]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShort9_t swig_types[424]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctShortVec_t swig_types[425]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar1_t swig_types[426]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar2_t swig_types[427]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar3_t swig_types[428]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar4_t swig_types[429]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar5_t swig_types[430]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar6_t swig_types[431]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar7_t swig_types[432]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar8_t swig_types[433]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUChar9_t swig_types[434]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUCharVec_t swig_types[435]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt1_t swig_types[436]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt2_t swig_types[437]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt3_t swig_types[438]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt4_t swig_types[439]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt5_t swig_types[440]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt6_t swig_types[441]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt7_t swig_types[442]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt8_t swig_types[443]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUInt9_t swig_types[444]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUIntVec_t swig_types[445]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong1_t swig_types[446]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong2_t swig_types[447]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong3_t swig_types[448]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong4_t swig_types[449]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong5_t swig_types[450]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong6_t swig_types[451]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong7_t swig_types[452]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong8_t swig_types[453]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULong9_t swig_types[454]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctULongVec_t swig_types[455]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort1_t swig_types[456]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort2_t swig_types[457]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort3_t swig_types[458]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort4_t swig_types[459]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort5_t swig_types[460]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort6_t swig_types[461]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort7_t swig_types[462]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort8_t swig_types[463]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShort9_t swig_types[464]
#define SWIGTYPE_p_mtsGenericObjectProxyT_vctUShortVec_t swig_types[465]
#define SWIGTYPE_p_mtsInterface swig_types[466]
#define SWIGTYPE_p_mtsInterfaceProvided swig_types[467]
#define SWIGTYPE_p_mtsInterfaceProvidedDescription swig_types[468]
#define SWIGTYPE_p_mtsInterfaceQueueingPolicy swig_types[469]
#define SWIGTYPE_p_mtsInterfaceRequired swig_types[470]
#define SWIGTYPE_p_mtsInterfaceRequiredDescription swig_types[471]
#define SWIGTYPE_p_mtsIntervalStatistics swig_types[472]
#define SWIGTYPE_p_mtsManagerComponentServices swig_types[473]
#define SWIGTYPE_p_mtsManagerLocal swig_types[474]
#define SWIGTYPE_p_mtsManagerLocalInterface swig_types[475]
#define SWIGTYPE_p_mtsMatrixT_bool_t swig_types[476]
#define SWIGTYPE_p_mtsMatrixT_char_t swig_types[477]
#define SWIGTYPE_p_mtsMatrixT_double_t swig_types[478]
#define SWIGTYPE_p_mtsMatrixT_float_t swig_types[479]
#define SWIGTYPE_p_mtsMatrixT_int_t swig_types[480]
#define SWIGTYPE_p_mtsMatrixT_long_t swig_types[481]
#define SWIGTYPE_p_mtsMatrixT_short_t swig_types[482]
#define SWIGTYPE_p_mtsMatrixT_unsigned_char_t swig_types[483]
#define SWIGTYPE_p_mtsMatrixT_unsigned_int_t swig_types[484]
#define SWIGTYPE_p_mtsMatrixT_unsigned_long_t swig_types[485]
#define SWIGTYPE_p_mtsMatrixT_unsigned_short_t swig_types[486]
#define SWIGTYPE_p_mtsMessage swig_types[487]
#define SWIGTYPE_p_mtsRequiredType swig_types[488]
#define SWIGTYPE_p_mtsStateIndex swig_types[489]
#define SWIGTYPE_p_mtsTask swig_types[490]
#define SWIGTYPE_p_mtsTaskConstructorArg swig_types[491]
#define SWIGTYPE_p_mtsTaskContinuous swig_types[492]
#define SWIGTYPE_p_mtsTaskContinuousConstructorArg swig_types[493]
#define SWIGTYPE_p_mtsTaskFromSignal swig_types[494]
#define SWIGTYPE_p_mtsTaskMain swig_types[495]
#define SWIGTYPE_p_mtsTaskPeriodic swig_types[496]
#define SWIGTYPE_p_mtsTaskPeriodicConstructorArg swig_types[497]
#define SWIGTYPE_p_mtsVectorT_bool_t swig_types[498]
#define SWIGTYPE_p_mtsVectorT_char_t swig_types[499]
#define SWIGTYPE_p_mtsVectorT_double_t swig_types[500]
#define SWIGTYPE_p_mtsVectorT_float_t swig_types[501]
#define SWIGTYPE_p_mtsVectorT_int_t swig_types[502]
#define SWIGTYPE_p_mtsVectorT_long_t swig_types[503]
#define SWIGTYPE_p_mtsVectorT_short_t swig_types[504]
#define SWIGTYPE_p_mtsVectorT_std__string_t swig_types[505]
#define SWIGTYPE_p_mtsVectorT_unsigned_char_t swig_types[506]
#define SWIGTYPE_p_mtsVectorT_unsigned_int_t swig_types[507]
#define SWIGTYPE_p_mtsVectorT_unsigned_long_t swig_types[508]
#define SWIGTYPE_p_mtsVectorT_unsigned_short_t swig_types[509]
#define SWIGTYPE_p_ndimension_type swig_types[510]
#define SWIGTYPE_p_nindex_type swig_types[511]
#define SWIGTYPE_p_nsize_type swig_types[512]
#define SWIGTYPE_p_nstride_type swig_types[513]
#define SWIGTYPE_p_off_type swig_types[514]
#define SWIGTYPE_p_openmode swig_types[515]
#define SWIGTYPE_p_osaSerialPort swig_types[516]
#define SWIGTYPE_p_osaTimeServer swig_types[517]
#define SWIGTYPE_p_p_void swig_types[518]
#define SWIGTYPE_p_pos_type swig_types[519]
#define SWIGTYPE_p_prmBlocking swig_types[520]
#define SWIGTYPE_p_prmEventButton swig_types[521]
#define SWIGTYPE_p_prmEventButton__EventType swig_types[522]
#define SWIGTYPE_p_prmForceCartesianGet swig_types[523]
#define SWIGTYPE_p_prmForceCartesianSet swig_types[524]
#define SWIGTYPE_p_prmMotionBase swig_types[525]
#define SWIGTYPE_p_prmPositionCartesianGet swig_types[526]
#define SWIGTYPE_p_prmPositionCartesianSet swig_types[527]
#define SWIGTYPE_p_prmPositionJointGet swig_types[528]
#define SWIGTYPE_p_prmPositionJointSet swig_types[529]
#define SWIGTYPE_p_prmRobotState swig_types[530]
#define SWIGTYPE_p_prmTransformationBase swig_types[531]
#define SWIGTYPE_p_prmTransformationDynamic swig_types[532]
#define SWIGTYPE_p_prmTransformationFixed swig_types[533]
#define SWIGTYPE_p_prmTransformationManager swig_types[534]
#define SWIGTYPE_p_prmVelocityCartesianGet swig_types[535]
#define SWIGTYPE_p_prmVelocityCartesianSet swig_types[536]
#define SWIGTYPE_p_prmVelocityJointGet swig_types[537]
#define SWIGTYPE_p_prmVelocityJointSet swig_types[538]
#define SWIGTYPE_p_ptrdiff_t swig_types[539]
#define SWIGTYPE_p_seekdir swig_types[540]
#define SWIGTYPE_p_short swig_types[541]
#define SWIGTYPE_p_size_t swig_types[542]
#define SWIGTYPE_p_size_type swig_types[543]
#define SWIGTYPE_p_state_type swig_types[544]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[545]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[546]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[547]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[548]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[549]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[550]
#define SWIGTYPE_p_std__invalid_argument swig_types[551]
#define SWIGTYPE_p_std__ios_base swig_types[552]
#define SWIGTYPE_p_std__listT_std__string_t swig_types[553]
#define SWIGTYPE_p_std__locale swig_types[554]
#define SWIGTYPE_p_std__string swig_types[555]
#define SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t swig_types[556]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[557]
#define SWIGTYPE_p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t swig_types[558]
#define SWIGTYPE_p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t swig_types[559]
#define SWIGTYPE_p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t swig_types[560]
#define SWIGTYPE_p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t swig_types[561]
#define SWIGTYPE_p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t swig_types[562]
#define SWIGTYPE_p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t swig_types[563]
#define SWIGTYPE_p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t swig_types[564]
#define SWIGTYPE_p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t swig_types[565]
#define SWIGTYPE_p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t swig_types[566]
#define SWIGTYPE_p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t swig_types[567]
#define SWIGTYPE_p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t swig_types[568]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[569]
#define SWIGTYPE_p_std__vectorT_vct3_std__allocatorT_vct3_t_t swig_types[570]
#define SWIGTYPE_p_streamoff swig_types[571]
#define SWIGTYPE_p_streampos swig_types[572]
#define SWIGTYPE_p_stride_type swig_types[573]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[574]
#define SWIGTYPE_p_traits_type swig_types[575]
#define SWIGTYPE_p_unsigned_int swig_types[576]
#define SWIGTYPE_p_unsigned_long swig_types[577]
#define SWIGTYPE_p_unsigned_long_long swig_types[578]
#define SWIGTYPE_p_unsigned_short swig_types[579]
#define SWIGTYPE_p_value_type swig_types[580]
#define SWIGTYPE_p_vctAngleRotation2 swig_types[581]
#define SWIGTYPE_p_vctAxisAngleRotation3T_double_t swig_types[582]
#define SWIGTYPE_p_vctAxisAngleRotation3T_float_t swig_types[583]
#define SWIGTYPE_p_vctBarycentricVectorT_double_1_t swig_types[584]
#define SWIGTYPE_p_vctBarycentricVectorT_double_2_t swig_types[585]
#define SWIGTYPE_p_vctBarycentricVectorT_double_3_t swig_types[586]
#define SWIGTYPE_p_vctBarycentricVectorT_double_4_t swig_types[587]
#define SWIGTYPE_p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t swig_types[588]
#define SWIGTYPE_p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t swig_types[589]
#define SWIGTYPE_p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t swig_types[590]
#define SWIGTYPE_p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t swig_types[591]
#define SWIGTYPE_p_vctFixedSizeConstVectorRefT_double_3_1_t swig_types[592]
#define SWIGTYPE_p_vctFixedSizeVectorRefT_double_3_1_t swig_types[593]
#define SWIGTYPE_p_vctFrame4x4T_double_VCT_ROW_MAJOR_t swig_types[594]
#define SWIGTYPE_p_vctFrame4x4T_float_VCT_ROW_MAJOR_t swig_types[595]
#define SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation2T_double_t_t swig_types[596]
#define SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation2T_float_t_t swig_types[597]
#define SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t swig_types[598]
#define SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t swig_types[599]
#define SWIGTYPE_p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t swig_types[600]
#define SWIGTYPE_p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t swig_types[601]
#define SWIGTYPE_p_vctMatrixRotation2T_double_t swig_types[602]
#define SWIGTYPE_p_vctMatrixRotation2T_float_t swig_types[603]
#define SWIGTYPE_p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t swig_types[604]
#define SWIGTYPE_p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t swig_types[605]
#define SWIGTYPE_p_vctQuaternionRotation3T_double_t swig_types[606]
#define SWIGTYPE_p_vctQuaternionRotation3T_float_t swig_types[607]
#define SWIGTYPE_p_vctQuaternionT_double_t swig_types[608]
#define SWIGTYPE_p_vctQuaternionT_float_t swig_types[609]
#define SWIGTYPE_p_vctRodriguezRotation3T_double_t swig_types[610]
#define SWIGTYPE_p_vctRodriguezRotation3T_float_t swig_types[611]
static swig_type_info *swig_types[613];
static swig_module_info swig_module = {swig_types, 612, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _cisstParameterTypesPython.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__cisstParameterTypesPython

#else
#  define SWIG_init    init_cisstParameterTypesPython

#endif
#define SWIG_name    "_cisstParameterTypesPython"

#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#ifndef SWIG_STD_NOMODERN_STL
#include <streambuf>
#else
#include <streambuf.h>
#endif





#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}

#include <cisstParameterTypes/prmPython.h>

SWIGINTERN prmBlocking const &prmMotionBase_GetBlockingFlag__SWIG_1(prmMotionBase const *self){                           return self->BlockingFlag();                                         }
SWIGINTERN bool const &prmMotionBase_GetBlendingFactor__SWIG_1(prmMotionBase const *self){                           return self->BlendingFactor();                                         }

  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN double const &prmMotionBase_GetTimeLimit__SWIG_1(prmMotionBase const *self){                           return self->TimeLimit();                                         }
SWIGINTERN bool const &prmMotionBase_GetIsPreemptable__SWIG_1(prmMotionBase const *self){                           return self->IsPreemptable();                                         }
SWIGINTERN bool const &prmMotionBase_GetIsCoordinated__SWIG_1(prmMotionBase const *self){                           return self->IsCoordinated();                                         }
SWIGINTERN bool const &prmMotionBase_GetIsGoalOnly__SWIG_1(prmMotionBase const *self){                           return self->IsGoalOnly();                                         }
SWIGINTERN prmEventButton::EventType const &prmEventButton_GetType__SWIG_1(prmEventButton const *self){                           return self->Type();                                         }

SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::string const &prmPositionCartesianSet_GetMovingFrame__SWIG_1(prmPositionCartesianSet const *self){                           return self->MovingFrame();                                         }
SWIGINTERN std::string const &prmPositionCartesianSet_GetReferenceFrame__SWIG_1(prmPositionCartesianSet const *self){                           return self->ReferenceFrame();                                         }
SWIGINTERN vctDouble6 const &prmForceCartesianGet_GetForce__SWIG_1(prmForceCartesianGet const *self){                           return self->Force();                                         }
SWIGINTERN vctBool6 const &prmForceCartesianGet_GetMask__SWIG_1(prmForceCartesianGet const *self){                           return self->Mask();                                         }
SWIGINTERN std::string const &prmForceCartesianGet_GetMovingFrame__SWIG_1(prmForceCartesianGet const *self){                           return self->MovingFrame();                                         }
SWIGINTERN prmForceCartesianSet::ForceType const &prmForceCartesianSet_GetForce__SWIG_1(prmForceCartesianSet const *self){                           return self->Force();                                         }
SWIGINTERN prmForceCartesianSet::MaskType const &prmForceCartesianSet_GetMask__SWIG_1(prmForceCartesianSet const *self){                           return self->Mask();                                         }
SWIGINTERN vctDoubleVec const &prmVelocityJointGet_GetVelocity__SWIG_1(prmVelocityJointGet const *self){                           return self->Velocity();                                         }
SWIGINTERN vctBoolVec const &prmVelocityJointSet_GetMask__SWIG_1(prmVelocityJointSet const *self){                           return self->Mask();                                         }
SWIGINTERN vctDoubleVec const &prmVelocityJointSet_GetGuard__SWIG_1(prmVelocityJointSet const *self){                           return self->Guard();                                         }
SWIGINTERN vctDoubleVec const &prmVelocityJointSet_GetGoal__SWIG_1(prmVelocityJointSet const *self){                           return self->Goal();                                         }
SWIGINTERN vctDoubleVec const &prmVelocityJointSet_GetAcceleration__SWIG_1(prmVelocityJointSet const *self){                           return self->Acceleration();                                         }
SWIGINTERN vctDoubleVec const &prmVelocityJointSet_GetDeceleration__SWIG_1(prmVelocityJointSet const *self){                           return self->Deceleration();                                         }
SWIGINTERN bool const &prmVelocityJointSet_GetIsPositionGuarded__SWIG_1(prmVelocityJointSet const *self){                           return self->IsPositionGuarded();                                         }

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN vctDoubleVec const &prmRobotState_GetJointPosition__SWIG_1(prmRobotState const *self){                           return self->JointPosition();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetJointVelocity__SWIG_1(prmRobotState const *self){                           return self->JointVelocity();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetJointPositionGoal__SWIG_1(prmRobotState const *self){                           return self->JointPositionGoal();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetJointVelocityGoal__SWIG_1(prmRobotState const *self){                           return self->JointVelocityGoal();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetJointPositionError__SWIG_1(prmRobotState const *self){                           return self->JointPositionError();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetJointVelocityError__SWIG_1(prmRobotState const *self){                           return self->JointVelocityError();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetCartesianPosition__SWIG_1(prmRobotState const *self){                           return self->CartesianPosition();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetCartesianVelocity__SWIG_1(prmRobotState const *self){                           return self->CartesianVelocity();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetCartesianPositionGoal__SWIG_1(prmRobotState const *self){                           return self->CartesianPositionGoal();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetCartesianVelocityGoal__SWIG_1(prmRobotState const *self){                           return self->CartesianVelocityGoal();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetCartesianPositionError__SWIG_1(prmRobotState const *self){                           return self->CartesianPositionError();                                         }
SWIGINTERN vctDoubleVec const &prmRobotState_GetCartesianVelocityError__SWIG_1(prmRobotState const *self){                           return self->CartesianVelocityError();                                         }
SWIGINTERN vctFrm3 const &prmRobotState_GetEndEffectorFrame__SWIG_1(prmRobotState const *self){                           return self->EndEffectorFrame();                                         }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_register_callback", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_flags", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::flags() const\n"
    "    std::ios_base::flags(std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_setf", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::setf(std::ios_base::fmtflags)\n"
    "    std::ios_base::setf(std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_unsetf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_precision", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::precision() const\n"
    "    std::ios_base::precision(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_width", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::width() const\n"
    "    std::ios_base::width(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  bool result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_sync_with_stdio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_imbue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::locale result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_xalloc", 0, 0, 0)) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  long *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_iword", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (long *) &(arg1)->iword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  void **result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_pword", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (void **) &(arg1)->pword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::ios_base::iostate result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_clear", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::clear(std::ios_base::iostate)\n"
    "    std::basic_ios< char >::clear()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_setstate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::iostate result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_exceptions", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::exceptions() const\n"
    "    std::basic_ios< char >::exceptions(std::ios_base::iostate)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ios< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_tie", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::tie() const\n"
    "    std::basic_ios< char >::tie(std::basic_ostream< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_rdbuf", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::rdbuf() const\n"
    "    std::basic_ios< char >::rdbuf(std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_copyfmt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  result = (std::basic_ios< char > *) &(arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_fill", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::fill() const\n"
    "    std::basic_ios< char >::fill(std::basic_ios< char >::char_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_imbue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_narrow", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char >::char_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_widen", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ios_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_streambuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_streambuf" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubimbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_pubimbue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubimbue" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubimbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubimbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->pubimbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::locale result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_getloc" "', argument " "1"" of type '" "std::basic_streambuf< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = ((std::basic_streambuf< char > const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubsetbuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type *arg2 = (std::basic_streambuf< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_pubsetbuf", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubsetbuf" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubsetbuf" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubsetbuf" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->pubsetbuf(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  std::ios_base::openmode arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekoff" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'");
    } else {
      std::basic_streambuf< char >::off_type * temp = reinterpret_cast< std::basic_streambuf< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubseekoff" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "streambuf_pubseekoff" "', argument " "4"" of type '" "std::ios_base::openmode""'");
  } 
  arg4 = static_cast< std::ios_base::openmode >(val4);
  result = (arg1)->pubseekoff(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekoff" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'");
    } else {
      std::basic_streambuf< char >::off_type * temp = reinterpret_cast< std::basic_streambuf< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubseekoff" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (arg1)->pubseekoff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekoff(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "streambuf_pubseekoff", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_streambuf_pubseekoff__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_streambuf_pubseekoff__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'streambuf_pubseekoff'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_streambuf< char >::pubseekoff(std::basic_streambuf< char >::off_type,std::ios_base::seekdir,std::ios_base::openmode)\n"
    "    std::basic_streambuf< char >::pubseekoff(std::basic_streambuf< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekpos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::pos_type arg2 ;
  std::ios_base::openmode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekpos" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'");
    } else {
      std::basic_streambuf< char >::pos_type * temp = reinterpret_cast< std::basic_streambuf< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubseekpos" "', argument " "3"" of type '" "std::ios_base::openmode""'");
  } 
  arg3 = static_cast< std::ios_base::openmode >(val3);
  result = (arg1)->pubseekpos(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekpos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekpos" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'");
    } else {
      std::basic_streambuf< char >::pos_type * temp = reinterpret_cast< std::basic_streambuf< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->pubseekpos(arg2);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekpos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "streambuf_pubseekpos", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_streambuf_pubseekpos__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_streambuf_pubseekpos__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'streambuf_pubseekpos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_streambuf< char >::pubseekpos(std::basic_streambuf< char >::pos_type,std::ios_base::openmode)\n"
    "    std::basic_streambuf< char >::pubseekpos(std::basic_streambuf< char >::pos_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_streambuf_pubsync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubsync" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (int)(arg1)->pubsync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_in_avail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::streamsize result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_in_avail" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (arg1)->in_avail();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_snextc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_snextc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->snextc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sbumpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sbumpc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sbumpc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sgetc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sgetc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sgetc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sgetn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type *arg2 = (std::basic_streambuf< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sgetn", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sgetn" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_sgetn" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_sgetn" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->sgetn(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sputbackc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sputbackc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sputbackc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "streambuf_sputbackc" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_streambuf< char >::char_type >(val2);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sputbackc(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sungetc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sungetc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sungetc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sputc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sputc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sputc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "streambuf_sputc" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_streambuf< char >::char_type >(val2);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sputc(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sputn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type *arg2 = (std::basic_streambuf< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sputn", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sputn" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_sputn" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_sputn" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->sputn((std::basic_streambuf< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *streambuf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<((void const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ostream___lshift__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ostream_put", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->put(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ostream_write", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->flush();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char >::pos_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ostream_seekp", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::pos_type)\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ostream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream___rshift__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::streamsize result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_get", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::get()\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type &)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_getline", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_ignore", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::ignore(std::streamsize,std::basic_istream< char >::int_type)\n"
    "    std::basic_istream< char >::ignore(std::streamsize)\n"
    "    std::basic_istream< char >::ignore()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "istream_read", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->read(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args, "istream_readsome", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "istream_putback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->putback(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->unget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char >::pos_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_seekg", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::pos_type)\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *istream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *iostream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmMotionBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmMotionBase" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetBaseParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  prmBlocking *arg2 = 0 ;
  bool *arg3 = 0 ;
  double *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  bool temp5 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool temp6 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool temp7 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetBaseParameter", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmBlocking,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "2"" of type '" "prmBlocking const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_SetBaseParameter" "', argument " "2"" of type '" "prmBlocking const &""'"); 
  }
  arg2 = reinterpret_cast< prmBlocking * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "3"" of type '" "bool""'");
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "5"" of type '" "bool""'");
  } 
  temp5 = static_cast< bool >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "6"" of type '" "bool""'");
  } 
  temp6 = static_cast< bool >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "prmMotionBase_SetBaseParameter" "', argument " "7"" of type '" "bool""'");
  } 
  temp7 = static_cast< bool >(val7);
  arg7 = &temp7;
  (arg1)->SetBaseParameter((prmBlocking const &)*arg2,(bool const &)*arg3,(double const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetBlockingFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  prmBlocking *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetBlockingFlag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetBlockingFlag" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmBlocking,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_SetBlockingFlag" "', argument " "2"" of type '" "prmBlocking const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_SetBlockingFlag" "', argument " "2"" of type '" "prmBlocking const &""'"); 
  }
  arg2 = reinterpret_cast< prmBlocking * >(argp2);
  (arg1)->SetBlockingFlag((prmBlocking const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetBlockingFlag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  prmBlocking *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetBlockingFlag" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmBlocking,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_GetBlockingFlag" "', argument " "2"" of type '" "prmBlocking &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_GetBlockingFlag" "', argument " "2"" of type '" "prmBlocking &""'"); 
  }
  arg2 = reinterpret_cast< prmBlocking * >(argp2);
  ((prmMotionBase const *)arg1)->GetBlockingFlag(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_BlockingFlag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmBlocking *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_BlockingFlag" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (prmBlocking *) &((prmMotionBase const *)arg1)->BlockingFlag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmBlocking, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_BlockingFlag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmBlocking *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_BlockingFlag" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (prmBlocking *) &(arg1)->BlockingFlag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmBlocking, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_BlockingFlag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_BlockingFlag", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_BlockingFlag__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_BlockingFlag__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_BlockingFlag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::BlockingFlag() const\n"
    "    prmMotionBase::BlockingFlag()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetBlockingFlag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmBlocking *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetBlockingFlag" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (prmBlocking *) &prmMotionBase_GetBlockingFlag__SWIG_1((prmMotionBase const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmBlocking, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetBlockingFlag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_GetBlockingFlag", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_GetBlockingFlag__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmBlocking, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmMotionBase_GetBlockingFlag__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_GetBlockingFlag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::GetBlockingFlag(prmBlocking &) const\n"
    "    prmMotionBase::GetBlockingFlag() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetBlendingFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetBlendingFactor", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetBlendingFactor" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmMotionBase_SetBlendingFactor" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetBlendingFactor((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetBlendingFactor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetBlendingFactor" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_GetBlendingFactor" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_GetBlendingFactor" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmMotionBase const *)arg1)->GetBlendingFactor(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_BlendingFactor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_BlendingFactor" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &((prmMotionBase const *)arg1)->BlendingFactor();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_BlendingFactor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_BlendingFactor" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &(arg1)->BlendingFactor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_BlendingFactor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_BlendingFactor", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_BlendingFactor__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_BlendingFactor__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_BlendingFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::BlendingFactor() const\n"
    "    prmMotionBase::BlendingFactor()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetBlendingFactor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetBlendingFactor" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &prmMotionBase_GetBlendingFactor__SWIG_1((prmMotionBase const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetBlendingFactor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_GetBlendingFactor", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_GetBlendingFactor__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmMotionBase_GetBlendingFactor__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_GetBlendingFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::GetBlendingFactor(bool &) const\n"
    "    prmMotionBase::GetBlendingFactor() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetTimeLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetTimeLimit", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetTimeLimit" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmMotionBase_SetTimeLimit" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->SetTimeLimit((double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetTimeLimit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetTimeLimit" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_GetTimeLimit" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_GetTimeLimit" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((prmMotionBase const *)arg1)->GetTimeLimit(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_TimeLimit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_TimeLimit" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (double *) &((prmMotionBase const *)arg1)->TimeLimit();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_TimeLimit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_TimeLimit" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (double *) &(arg1)->TimeLimit();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_TimeLimit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_TimeLimit", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_TimeLimit__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_TimeLimit__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_TimeLimit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::TimeLimit() const\n"
    "    prmMotionBase::TimeLimit()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetTimeLimit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetTimeLimit" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (double *) &prmMotionBase_GetTimeLimit__SWIG_1((prmMotionBase const *)arg1);
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetTimeLimit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_GetTimeLimit", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_GetTimeLimit__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmMotionBase_GetTimeLimit__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_GetTimeLimit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::GetTimeLimit(double &) const\n"
    "    prmMotionBase::GetTimeLimit() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetIsPreemptable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetIsPreemptable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetIsPreemptable" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmMotionBase_SetIsPreemptable" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsPreemptable((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsPreemptable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetIsPreemptable" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_GetIsPreemptable" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_GetIsPreemptable" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmMotionBase const *)arg1)->GetIsPreemptable(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsPreemptable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_IsPreemptable" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &((prmMotionBase const *)arg1)->IsPreemptable();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsPreemptable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_IsPreemptable" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &(arg1)->IsPreemptable();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsPreemptable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_IsPreemptable", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_IsPreemptable__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_IsPreemptable__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_IsPreemptable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::IsPreemptable() const\n"
    "    prmMotionBase::IsPreemptable()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsPreemptable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetIsPreemptable" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &prmMotionBase_GetIsPreemptable__SWIG_1((prmMotionBase const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsPreemptable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_GetIsPreemptable", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_GetIsPreemptable__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmMotionBase_GetIsPreemptable__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_GetIsPreemptable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::GetIsPreemptable(bool &) const\n"
    "    prmMotionBase::GetIsPreemptable() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetIsCoordinated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetIsCoordinated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetIsCoordinated" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmMotionBase_SetIsCoordinated" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsCoordinated((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsCoordinated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetIsCoordinated" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_GetIsCoordinated" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_GetIsCoordinated" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmMotionBase const *)arg1)->GetIsCoordinated(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsCoordinated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_IsCoordinated" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &((prmMotionBase const *)arg1)->IsCoordinated();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsCoordinated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_IsCoordinated" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &(arg1)->IsCoordinated();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsCoordinated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_IsCoordinated", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_IsCoordinated__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_IsCoordinated__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_IsCoordinated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::IsCoordinated() const\n"
    "    prmMotionBase::IsCoordinated()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsCoordinated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetIsCoordinated" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &prmMotionBase_GetIsCoordinated__SWIG_1((prmMotionBase const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsCoordinated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_GetIsCoordinated", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_GetIsCoordinated__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmMotionBase_GetIsCoordinated__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_GetIsCoordinated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::GetIsCoordinated(bool &) const\n"
    "    prmMotionBase::GetIsCoordinated() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_SetIsGoalOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmMotionBase_SetIsGoalOnly", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_SetIsGoalOnly" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmMotionBase_SetIsGoalOnly" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsGoalOnly((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsGoalOnly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetIsGoalOnly" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmMotionBase_GetIsGoalOnly" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmMotionBase_GetIsGoalOnly" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmMotionBase const *)arg1)->GetIsGoalOnly(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsGoalOnly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_IsGoalOnly" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &((prmMotionBase const *)arg1)->IsGoalOnly();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsGoalOnly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_IsGoalOnly" "', argument " "1"" of type '" "prmMotionBase *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &(arg1)->IsGoalOnly();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_IsGoalOnly(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_IsGoalOnly", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_IsGoalOnly__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_IsGoalOnly__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_IsGoalOnly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::IsGoalOnly() const\n"
    "    prmMotionBase::IsGoalOnly()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsGoalOnly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmMotionBase *arg1 = (prmMotionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmMotionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmMotionBase_GetIsGoalOnly" "', argument " "1"" of type '" "prmMotionBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmMotionBase * >(argp1);
  result = (bool *) &prmMotionBase_GetIsGoalOnly__SWIG_1((prmMotionBase const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmMotionBase_GetIsGoalOnly(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmMotionBase_GetIsGoalOnly", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmMotionBase_GetIsGoalOnly__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmMotionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmMotionBase_GetIsGoalOnly__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmMotionBase_GetIsGoalOnly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmMotionBase::GetIsGoalOnly(bool &) const\n"
    "    prmMotionBase::GetIsGoalOnly() const\n");
  return 0;
}


SWIGINTERN PyObject *prmMotionBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmMotionBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_prmEventButton_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmEventButton_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmEventButton::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmEventButton__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmEventButton *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmEventButton *)new prmEventButton();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmEventButton, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmEventButton__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmEventButton::EventType *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  prmEventButton::EventType temp1 ;
  prmEventButton *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int (swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_prmEventButton" "', argument " "1"" of type '" "prmEventButton::EventType const &""'");
  } else {
    temp1 = static_cast< prmEventButton::EventType >(val1);
    arg1 = &temp1;
  }
  result = (prmEventButton *)new prmEventButton((prmEventButton::EventType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmEventButton, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmEventButton__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmEventButton *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmEventButton,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmEventButton" "', argument " "1"" of type '" "prmEventButton const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmEventButton" "', argument " "1"" of type '" "prmEventButton const &""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  result = (prmEventButton *)new prmEventButton((prmEventButton const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmEventButton, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmEventButton(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmEventButton", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmEventButton__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_prmEventButton, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmEventButton__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_prmEventButton__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmEventButton'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmEventButton::prmEventButton()\n"
    "    prmEventButton::prmEventButton(prmEventButton::EventType const &)\n"
    "    prmEventButton::prmEventButton(prmEventButton const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmEventButton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = (prmEventButton *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmEventButton, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmEventButton" "', argument " "1"" of type '" "prmEventButton *""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmEventButton_SetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = (prmEventButton *) 0 ;
  prmEventButton::EventType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  prmEventButton::EventType temp2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmEventButton_SetType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmEventButton, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmEventButton_SetType" "', argument " "1"" of type '" "prmEventButton *""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  ecode2 = SWIG_AsVal_int (swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmEventButton_SetType" "', argument " "2"" of type '" "prmEventButton::EventType const &""'");
  } else {
    temp2 = static_cast< prmEventButton::EventType >(val2);
    arg2 = &temp2;
  }
  (arg1)->SetType((prmEventButton::EventType const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmEventButton_GetType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = (prmEventButton *) 0 ;
  prmEventButton::EventType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmEventButton, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmEventButton_GetType" "', argument " "1"" of type '" "prmEventButton const *""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmEventButton__EventType,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmEventButton_GetType" "', argument " "2"" of type '" "prmEventButton::EventType &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmEventButton_GetType" "', argument " "2"" of type '" "prmEventButton::EventType &""'"); 
  }
  arg2 = reinterpret_cast< prmEventButton::EventType * >(argp2);
  ((prmEventButton const *)arg1)->GetType(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmEventButton_Type__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = (prmEventButton *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmEventButton::EventType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmEventButton, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmEventButton_Type" "', argument " "1"" of type '" "prmEventButton const *""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  result = (prmEventButton::EventType *) &((prmEventButton const *)arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmEventButton_Type__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = (prmEventButton *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmEventButton::EventType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmEventButton, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmEventButton_Type" "', argument " "1"" of type '" "prmEventButton *""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  result = (prmEventButton::EventType *) &(arg1)->Type();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmEventButton__EventType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmEventButton_Type(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmEventButton_Type", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmEventButton, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmEventButton_Type__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmEventButton, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmEventButton_Type__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmEventButton_Type'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmEventButton::Type() const\n"
    "    prmEventButton::Type()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmEventButton_GetType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmEventButton *arg1 = (prmEventButton *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmEventButton::EventType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmEventButton, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmEventButton_GetType" "', argument " "1"" of type '" "prmEventButton const *""'"); 
  }
  arg1 = reinterpret_cast< prmEventButton * >(argp1);
  result = (prmEventButton::EventType *) &prmEventButton_GetType__SWIG_1((prmEventButton const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmEventButton_GetType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmEventButton_GetType", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmEventButton, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmEventButton_GetType__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmEventButton, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmEventButton__EventType, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmEventButton_GetType__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmEventButton_GetType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmEventButton::GetType(prmEventButton::EventType &) const\n"
    "    prmEventButton::GetType() const\n");
  return 0;
}


SWIGINTERN PyObject *prmEventButton_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmEventButton, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmEventButton_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_prmPositionCartesianGet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmPositionCartesianGet *)new prmPositionCartesianGet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionCartesianGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionCartesianGet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmPositionCartesianGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmPositionCartesianGet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmPositionCartesianGet" "', argument " "1"" of type '" "prmPositionCartesianGet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmPositionCartesianGet" "', argument " "1"" of type '" "prmPositionCartesianGet const &""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (prmPositionCartesianGet *)new prmPositionCartesianGet((prmPositionCartesianGet const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionCartesianGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionCartesianGet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmPositionCartesianGet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmPositionCartesianGet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_prmPositionCartesianGet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmPositionCartesianGet__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmPositionCartesianGet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::prmPositionCartesianGet()\n"
    "    prmPositionCartesianGet::prmPositionCartesianGet(prmPositionCartesianGet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmPositionCartesianGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmPositionCartesianGet" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_GetMovingFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_GetMovingFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_GetMovingFrame" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmPositionCartesianGet const *)arg1)->GetMovingFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SetMovingFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_SetMovingFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SetMovingFrame" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetMovingFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_MovingFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_MovingFrame" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (std::string *) &((prmPositionCartesianGet const *)arg1)->MovingFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_MovingFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_MovingFrame" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (std::string *) &(arg1)->MovingFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_MovingFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_MovingFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_MovingFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_MovingFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_MovingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::MovingFrame() const\n"
    "    prmPositionCartesianGet::MovingFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_GetReferenceFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_GetReferenceFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_GetReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_GetReferenceFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_GetReferenceFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmPositionCartesianGet const *)arg1)->GetReferenceFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SetReferenceFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_SetReferenceFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SetReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetReferenceFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ReferenceFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_ReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (std::string *) &((prmPositionCartesianGet const *)arg1)->ReferenceFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ReferenceFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_ReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (std::string *) &(arg1)->ReferenceFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ReferenceFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_ReferenceFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_ReferenceFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_ReferenceFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_ReferenceFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::ReferenceFrame() const\n"
    "    prmPositionCartesianGet::ReferenceFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  vctFrm3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_GetPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_GetPosition" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_GetPosition" "', argument " "2"" of type '" "vctFrm3 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_GetPosition" "', argument " "2"" of type '" "vctFrm3 &""'"); 
  }
  arg2 = reinterpret_cast< vctFrm3 * >(argp2);
  ((prmPositionCartesianGet const *)arg1)->GetPosition(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  vctFrm3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_SetPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SetPosition" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_SetPosition" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SetPosition" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctFrm3 * >(argp2);
  (arg1)->SetPosition((vctFrm3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_Position__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_Position" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (vctFrm3 *) &((prmPositionCartesianGet const *)arg1)->Position();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_Position__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_Position" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = (vctFrm3 *) &(arg1)->Position();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_Position(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_Position", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_Position__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_Position__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_Position'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::Position() const\n"
    "    prmPositionCartesianGet::Position()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmPositionCartesianGet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  prmPositionCartesianGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_Copy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_Copy" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionCartesianGet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_Copy" "', argument " "2"" of type '" "prmPositionCartesianGet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_Copy" "', argument " "2"" of type '" "prmPositionCartesianGet const &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionCartesianGet * >(argp2);
  (arg1)->Copy((prmPositionCartesianGet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_SerializeBinary", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SerializeBinary" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmPositionCartesianGet const *)arg1)->SerializeBinary(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_DeSerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::istream *arg2 = 0 ;
  cmnDataFormat *arg3 = 0 ;
  cmnDataFormat *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_DeSerializeBinary", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  arg3 = reinterpret_cast< cmnDataFormat * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  arg4 = reinterpret_cast< cmnDataFormat * >(argp4);
  try {
    (arg1)->DeSerializeBinary(*arg2,(cmnDataFormat const &)*arg3,(cmnDataFormat const &)*arg4);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::ostream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    ((prmPositionCartesianGet const *)arg1)->SerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmPositionCartesianGet const *)arg1)->SerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_SerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionCartesianGet_SerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmPositionCartesianGet_SerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_SerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::SerializeText(std::ostream &,char const) const\n"
    "    prmPositionCartesianGet::SerializeText(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  char arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((prmPositionCartesianGet const *)arg1)->SerializeDescription(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((prmPositionCartesianGet const *)arg1)->SerializeDescription(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeDescription__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_SerializeDescription" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = ((prmPositionCartesianGet const *)arg1)->SerializeDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_SerializeDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_SerializeDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianGet_SerializeDescription__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmPositionCartesianGet_SerializeDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmPositionCartesianGet_SerializeDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_SerializeDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::SerializeDescription(char const,std::string const &) const\n"
    "    prmPositionCartesianGet::SerializeDescription(char const) const\n"
    "    prmPositionCartesianGet::SerializeDescription() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_DeSerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::istream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    (arg1)->DeSerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_DeSerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "1"" of type '" "prmPositionCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  try {
    (arg1)->DeSerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_DeSerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_DeSerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionCartesianGet_DeSerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmPositionCartesianGet_DeSerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_DeSerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::DeSerializeText(std::istream &,char const)\n"
    "    prmPositionCartesianGet::DeSerializeText(std::istream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet___str__" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  result = ((prmPositionCartesianGet const *)arg1)->HumanReadable();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ScalarDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_ScalarDescription" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionCartesianGet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionCartesianGet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianGet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    result = ((prmPositionCartesianGet const *)arg1)->ScalarDescription(arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ScalarDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianGet *arg1 = (prmPositionCartesianGet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianGet_ScalarDescription" "', argument " "1"" of type '" "prmPositionCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionCartesianGet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = ((prmPositionCartesianGet const *)arg1)->ScalarDescription(arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianGet_ScalarDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianGet_ScalarDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmPositionCartesianGet_ScalarDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmPositionCartesianGet_ScalarDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianGet_ScalarDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianGet::ScalarDescription(size_t const,std::string const &) const\n"
    "    prmPositionCartesianGet::ScalarDescription(size_t const) const\n");
  return 0;
}


SWIGINTERN PyObject *prmPositionCartesianGet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmPositionCartesianGet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmPositionCartesianGet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cmnSerializeRaw__SWIG_25(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  prmPositionCartesianGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionCartesianGet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmPositionCartesianGet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmPositionCartesianGet const &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionCartesianGet * >(argp2);
  cmnSerializeRaw(*arg1,(prmPositionCartesianGet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cmnDeSerializeRaw__SWIG_25(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  prmPositionCartesianGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionCartesianGet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmPositionCartesianGet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmPositionCartesianGet &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionCartesianGet * >(argp2);
  cmnDeSerializeRaw(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmPositionCartesianSet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetMovingFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetMovingFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetMovingFrame" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetMovingFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetMovingFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetMovingFrame" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmPositionCartesianSet const *)arg1)->GetMovingFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_MovingFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_MovingFrame" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (std::string *) &((prmPositionCartesianSet const *)arg1)->MovingFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_MovingFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_MovingFrame" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (std::string *) &(arg1)->MovingFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_MovingFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_MovingFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_MovingFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_MovingFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianSet_MovingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::MovingFrame() const\n"
    "    prmPositionCartesianSet::MovingFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetMovingFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetMovingFrame" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (std::string *) &prmPositionCartesianSet_GetMovingFrame__SWIG_1((prmPositionCartesianSet const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetMovingFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_GetMovingFrame", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_GetMovingFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionCartesianSet_GetMovingFrame__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianSet_GetMovingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::GetMovingFrame(std::string &) const\n"
    "    prmPositionCartesianSet::GetMovingFrame() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetReferenceFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetReferenceFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetReferenceFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetReferenceFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_GetReferenceFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_GetReferenceFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmPositionCartesianSet const *)arg1)->GetReferenceFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_ReferenceFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_ReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (std::string *) &((prmPositionCartesianSet const *)arg1)->ReferenceFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_ReferenceFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_ReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (std::string *) &(arg1)->ReferenceFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_ReferenceFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_ReferenceFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_ReferenceFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_ReferenceFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianSet_ReferenceFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::ReferenceFrame() const\n"
    "    prmPositionCartesianSet::ReferenceFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetReferenceFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetReferenceFrame" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (std::string *) &prmPositionCartesianSet_GetReferenceFrame__SWIG_1((prmPositionCartesianSet const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetReferenceFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_GetReferenceFrame", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_GetReferenceFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionCartesianSet_GetReferenceFrame__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianSet_GetReferenceFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::GetReferenceFrame(std::string &) const\n"
    "    prmPositionCartesianSet::GetReferenceFrame() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_prmPositionCartesianSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmPositionCartesianSet *)new prmPositionCartesianSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionCartesianSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionCartesianSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vctDoubleFrm3 *arg1 = 0 ;
  vctDouble3 *arg2 = 0 ;
  vctDouble3 *arg3 = 0 ;
  vctDouble3 *arg4 = 0 ;
  vctDouble3 *arg5 = 0 ;
  vctBool2 *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmPositionCartesianSet *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmPositionCartesianSet" "', argument " "1"" of type '" "vctDoubleFrm3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmPositionCartesianSet" "', argument " "1"" of type '" "vctDoubleFrm3 const &""'"); 
  }
  arg1 = reinterpret_cast< vctDoubleFrm3 * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[2]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[2])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[2])
        && vctThrowUnlessDimension1(cast_array(swig_obj[2]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[2]), *(arg3)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[2]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[2]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[2]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[2])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg3 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[3]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[3])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[3])
        && vctThrowUnlessDimension1(cast_array(swig_obj[3]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[3]), *(arg4)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[3]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[3]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[3]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[3])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg4 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[4]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[4])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[4])
        && vctThrowUnlessDimension1(cast_array(swig_obj[4]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[4]), *(arg5)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[4]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[4]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[4]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[4])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg5 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[5]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBool2 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[5])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[5])
        && vctThrowUnlessDimension1(cast_array(swig_obj[5]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[5]), *(arg6)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[5]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[5]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[5]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[5])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg6 = new VectorType(tempContainer);
  }
  result = (prmPositionCartesianSet *)new prmPositionCartesianSet((vctDoubleFrm3 const &)*arg1,(vctDouble3 const &)*arg2,(vctDouble3 const &)*arg3,(vctDouble3 const &)*arg4,(vctDouble3 const &)*arg5,(vctBool2 const &)*arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionCartesianSet, SWIG_POINTER_NEW |  0 );
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg3;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg4;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg5;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg6;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionCartesianSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmPositionCartesianSet", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmPositionCartesianSet__SWIG_0(self, argc, argv);
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        {
          // test that the parameter is an array
          if (!PyArray_Check(argv[2])) {
            _v = 0;
            PyErr_Clear();
          } else {
            // we should test the dimension as well if we overload for vector and matrix
            if (PyArray_NDIM(cast_array(argv[2])) != 1) {
              _v = 0;
              PyErr_Clear();
            } else {
              _v = 1;
            }
          }
        }
        if (_v) {
          {
            // test that the parameter is an array
            if (!PyArray_Check(argv[3])) {
              _v = 0;
              PyErr_Clear();
            } else {
              // we should test the dimension as well if we overload for vector and matrix
              if (PyArray_NDIM(cast_array(argv[3])) != 1) {
                _v = 0;
                PyErr_Clear();
              } else {
                _v = 1;
              }
            }
          }
          if (_v) {
            {
              // test that the parameter is an array
              if (!PyArray_Check(argv[4])) {
                _v = 0;
                PyErr_Clear();
              } else {
                // we should test the dimension as well if we overload for vector and matrix
                if (PyArray_NDIM(cast_array(argv[4])) != 1) {
                  _v = 0;
                  PyErr_Clear();
                } else {
                  _v = 1;
                }
              }
            }
            if (_v) {
              {
                // test that the parameter is an array
                if (!PyArray_Check(argv[5])) {
                  _v = 0;
                  PyErr_Clear();
                } else {
                  // we should test the dimension as well if we overload for vector and matrix
                  if (PyArray_NDIM(cast_array(argv[5])) != 1) {
                    _v = 0;
                    PyErr_Clear();
                  } else {
                    _v = 1;
                  }
                }
              }
              if (_v) {
                return _wrap_new_prmPositionCartesianSet__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmPositionCartesianSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::prmPositionCartesianSet()\n"
    "    prmPositionCartesianSet::prmPositionCartesianSet(vctDoubleFrm3 const &,vctDouble3 const &,vctDouble3 const &,vctDouble3 const &,vctDouble3 const &,vctBool2 const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmPositionCartesianSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmPositionCartesianSet" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDoubleFrm3 *arg2 = 0 ;
  vctBool2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "2"" of type '" "vctDoubleFrm3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "2"" of type '" "vctDoubleFrm3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctDoubleFrm3 * >(argp2);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[2]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBool2 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[2])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[2])
        && vctThrowUnlessDimension1(cast_array(swig_obj[2]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[2]), *(arg3)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[2]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[2]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[2]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[2])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg3 = new VectorType(tempContainer);
  }
  (arg1)->SetGoal((vctDoubleFrm3 const &)*arg2,(vctBool2 const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg3;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_Goal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_Goal" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (vctFrm3 *) &(arg1)->Goal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_Goal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_Goal" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = (vctFrm3 *) &((prmPositionCartesianSet const *)arg1)->Goal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_Goal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_Goal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_Goal__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionCartesianSet_Goal__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianSet_Goal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::Goal()\n"
    "    prmPositionCartesianSet::Goal() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDoubleFrm3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "2"" of type '" "vctDoubleFrm3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "2"" of type '" "vctDoubleFrm3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctDoubleFrm3 * >(argp2);
  (arg1)->SetGoal((vctDoubleFrm3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetGoal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetGoal((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetGoal__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDoubleRot3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "2"" of type '" "vctDoubleRot3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionCartesianSet_SetGoal" "', argument " "2"" of type '" "vctDoubleRot3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctDoubleRot3 * >(argp2);
  (arg1)->SetGoal((vctDoubleRot3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetGoal", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionCartesianSet_SetGoal__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmPositionCartesianSet_SetGoal__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionCartesianSet_SetGoal__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          // test that the parameter is an array
          if (!PyArray_Check(argv[2])) {
            _v = 0;
            PyErr_Clear();
          } else {
            // we should test the dimension as well if we overload for vector and matrix
            if (PyArray_NDIM(cast_array(argv[2])) != 1) {
              _v = 0;
              PyErr_Clear();
            } else {
              _v = 1;
            }
          }
        }
        if (_v) {
          return _wrap_prmPositionCartesianSet_SetGoal__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionCartesianSet_SetGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionCartesianSet::SetGoal(vctDoubleFrm3 const &,vctBool2 const &)\n"
    "    prmPositionCartesianSet::SetGoal(vctDoubleFrm3 const &)\n"
    "    prmPositionCartesianSet::SetGoal(vctDouble3 const &)\n"
    "    prmPositionCartesianSet::SetGoal(vctDoubleRot3 const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDoubleFrm3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetGoal" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = ((prmPositionCartesianSet const *)arg1)->GetGoal();
  resultobj = SWIG_NewPointerObj((new vctDoubleFrm3(static_cast< const vctDoubleFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetVelocity" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocity((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetVelocity" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = ((prmPositionCartesianSet const *)arg1)->GetVelocity();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetAngularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetAngularVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetAngularVelocity" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAngularVelocity((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetAngularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetAngularVelocity" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = ((prmPositionCartesianSet const *)arg1)->GetAngularVelocity();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetAcceleration" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAcceleration((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetAcceleration" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = ((prmPositionCartesianSet const *)arg1)->GetAcceleration();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetAngularAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetAngularAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetAngularAcceleration" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAngularAcceleration((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetAngularAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetAngularAcceleration" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = ((prmPositionCartesianSet const *)arg1)->GetAngularAcceleration();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_SetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  vctBool2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionCartesianSet_SetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_SetMask" "', argument " "1"" of type '" "prmPositionCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBool2 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetMask((vctBool2 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionCartesianSet_GetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionCartesianSet *arg1 = (prmPositionCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctBool2 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionCartesianSet_GetMask" "', argument " "1"" of type '" "prmPositionCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionCartesianSet * >(argp1);
  result = ((prmPositionCartesianSet const *)arg1)->GetMask();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctBool2 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmPositionCartesianSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmPositionCartesianSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmPositionCartesianSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_prmVelocityCartesianGet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmVelocityCartesianGet *)new prmVelocityCartesianGet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityCartesianGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityCartesianGet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmVelocityCartesianGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmVelocityCartesianGet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmVelocityCartesianGet" "', argument " "1"" of type '" "prmVelocityCartesianGet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmVelocityCartesianGet" "', argument " "1"" of type '" "prmVelocityCartesianGet const &""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (prmVelocityCartesianGet *)new prmVelocityCartesianGet((prmVelocityCartesianGet const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityCartesianGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityCartesianGet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmVelocityCartesianGet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmVelocityCartesianGet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_prmVelocityCartesianGet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmVelocityCartesianGet__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmVelocityCartesianGet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::prmVelocityCartesianGet()\n"
    "    prmVelocityCartesianGet::prmVelocityCartesianGet(prmVelocityCartesianGet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmVelocityCartesianGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmVelocityCartesianGet" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_GetVelocityLinear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  vct3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_GetVelocityLinear", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_GetVelocityLinear" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vct3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityCartesianGet const *)arg1)->GetVelocityLinear(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vct3 VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SetVelocityLinear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  vct3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SetVelocityLinear", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SetVelocityLinear" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vct3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocityLinear((vct3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_VelocityLinear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vct3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_VelocityLinear" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (vct3 *) &((prmVelocityCartesianGet const *)arg1)->VelocityLinear();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vct3 VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_VelocityLinear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vct3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_VelocityLinear" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (vct3 *) &(arg1)->VelocityLinear();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vct3 VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_VelocityLinear(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_VelocityLinear", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_VelocityLinear__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_VelocityLinear__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_VelocityLinear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::VelocityLinear() const\n"
    "    prmVelocityCartesianGet::VelocityLinear()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_GetVelocityAngular(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  vct3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_GetVelocityAngular", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_GetVelocityAngular" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vct3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityCartesianGet const *)arg1)->GetVelocityAngular(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vct3 VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SetVelocityAngular(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  vct3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SetVelocityAngular", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SetVelocityAngular" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vct3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocityAngular((vct3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_VelocityAngular__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vct3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_VelocityAngular" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (vct3 *) &((prmVelocityCartesianGet const *)arg1)->VelocityAngular();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vct3 VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_VelocityAngular__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vct3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_VelocityAngular" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (vct3 *) &(arg1)->VelocityAngular();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vct3 VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_VelocityAngular(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_VelocityAngular", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_VelocityAngular__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_VelocityAngular__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_VelocityAngular'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::VelocityAngular() const\n"
    "    prmVelocityCartesianGet::VelocityAngular()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_GetMovingFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_GetMovingFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_GetMovingFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmVelocityCartesianGet const *)arg1)->GetMovingFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SetMovingFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SetMovingFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SetMovingFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetMovingFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_MovingFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_MovingFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (std::string *) &((prmVelocityCartesianGet const *)arg1)->MovingFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_MovingFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_MovingFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (std::string *) &(arg1)->MovingFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_MovingFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_MovingFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_MovingFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_MovingFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_MovingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::MovingFrame() const\n"
    "    prmVelocityCartesianGet::MovingFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_GetReferenceFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_GetReferenceFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_GetReferenceFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_GetReferenceFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_GetReferenceFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmVelocityCartesianGet const *)arg1)->GetReferenceFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SetReferenceFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SetReferenceFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SetReferenceFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetReferenceFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ReferenceFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_ReferenceFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (std::string *) &((prmVelocityCartesianGet const *)arg1)->ReferenceFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ReferenceFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_ReferenceFrame" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = (std::string *) &(arg1)->ReferenceFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ReferenceFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_ReferenceFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_ReferenceFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_ReferenceFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_ReferenceFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::ReferenceFrame() const\n"
    "    prmVelocityCartesianGet::ReferenceFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmVelocityCartesianGet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  vct6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SetVelocity" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vct6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocity((vct6 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_GetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  vct6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_GetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_GetVelocity" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vct6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityCartesianGet const *)arg1)->GetVelocity(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vct6 VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  prmVelocityCartesianGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_Copy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_Copy" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmVelocityCartesianGet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_Copy" "', argument " "2"" of type '" "prmVelocityCartesianGet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_Copy" "', argument " "2"" of type '" "prmVelocityCartesianGet const &""'"); 
  }
  arg2 = reinterpret_cast< prmVelocityCartesianGet * >(argp2);
  (arg1)->Copy((prmVelocityCartesianGet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SerializeBinary", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SerializeBinary" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmVelocityCartesianGet const *)arg1)->SerializeBinary(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_DeSerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::istream *arg2 = 0 ;
  cmnDataFormat *arg3 = 0 ;
  cmnDataFormat *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_DeSerializeBinary", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  arg3 = reinterpret_cast< cmnDataFormat * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  arg4 = reinterpret_cast< cmnDataFormat * >(argp4);
  try {
    (arg1)->DeSerializeBinary(*arg2,(cmnDataFormat const &)*arg3,(cmnDataFormat const &)*arg4);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::ostream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    ((prmVelocityCartesianGet const *)arg1)->SerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmVelocityCartesianGet const *)arg1)->SerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmVelocityCartesianGet_SerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmVelocityCartesianGet_SerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_SerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::SerializeText(std::ostream &,char const) const\n"
    "    prmVelocityCartesianGet::SerializeText(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  char arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((prmVelocityCartesianGet const *)arg1)->SerializeDescription(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((prmVelocityCartesianGet const *)arg1)->SerializeDescription(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeDescription__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_SerializeDescription" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = ((prmVelocityCartesianGet const *)arg1)->SerializeDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_SerializeDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_SerializeDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityCartesianGet_SerializeDescription__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmVelocityCartesianGet_SerializeDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmVelocityCartesianGet_SerializeDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_SerializeDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::SerializeDescription(char const,std::string const &) const\n"
    "    prmVelocityCartesianGet::SerializeDescription(char const) const\n"
    "    prmVelocityCartesianGet::SerializeDescription() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_DeSerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::istream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    (arg1)->DeSerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_DeSerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "1"" of type '" "prmVelocityCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  try {
    (arg1)->DeSerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_DeSerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_DeSerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmVelocityCartesianGet_DeSerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmVelocityCartesianGet_DeSerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_DeSerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::DeSerializeText(std::istream &,char const)\n"
    "    prmVelocityCartesianGet::DeSerializeText(std::istream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet___str__" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  result = ((prmVelocityCartesianGet const *)arg1)->HumanReadable();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ScalarDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_ScalarDescription" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityCartesianGet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmVelocityCartesianGet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityCartesianGet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    result = ((prmVelocityCartesianGet const *)arg1)->ScalarDescription(arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ScalarDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityCartesianGet *arg1 = (prmVelocityCartesianGet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianGet_ScalarDescription" "', argument " "1"" of type '" "prmVelocityCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityCartesianGet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = ((prmVelocityCartesianGet const *)arg1)->ScalarDescription(arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianGet_ScalarDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityCartesianGet_ScalarDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmVelocityCartesianGet_ScalarDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmVelocityCartesianGet_ScalarDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityCartesianGet_ScalarDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianGet::ScalarDescription(size_t const,std::string const &) const\n"
    "    prmVelocityCartesianGet::ScalarDescription(size_t const) const\n");
  return 0;
}


SWIGINTERN PyObject *prmVelocityCartesianGet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmVelocityCartesianGet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmVelocityCartesianGet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cmnSerializeRaw__SWIG_26(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  prmVelocityCartesianGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmVelocityCartesianGet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmVelocityCartesianGet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmVelocityCartesianGet const &""'"); 
  }
  arg2 = reinterpret_cast< prmVelocityCartesianGet * >(argp2);
  cmnSerializeRaw(*arg1,(prmVelocityCartesianGet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cmnDeSerializeRaw__SWIG_26(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  prmVelocityCartesianGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmVelocityCartesianGet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmVelocityCartesianGet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmVelocityCartesianGet &""'"); 
  }
  arg2 = reinterpret_cast< prmVelocityCartesianGet * >(argp2);
  cmnDeSerializeRaw(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmVelocityCartesianSet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityCartesianSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmVelocityCartesianSet *)new prmVelocityCartesianSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityCartesianSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityCartesianSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vctDouble3 *arg1 = 0 ;
  vctDouble3 *arg2 = 0 ;
  vctDouble3 *arg3 = 0 ;
  vctDouble3 *arg4 = 0 ;
  vctBool6 *arg5 = 0 ;
  prmVelocityCartesianSet *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[0]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[0])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[0])
        && vctThrowUnlessDimension1(cast_array(swig_obj[0]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[0]), *(arg1)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[0]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[0]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[0]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[0])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg1 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[2]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[2])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[2])
        && vctThrowUnlessDimension1(cast_array(swig_obj[2]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[2]), *(arg3)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[2]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[2]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[2]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[2])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg3 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[3]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[3])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[3])
        && vctThrowUnlessDimension1(cast_array(swig_obj[3]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[3]), *(arg4)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[3]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[3]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[3]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[3])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg4 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[4]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBool6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[4])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[4])
        && vctThrowUnlessDimension1(cast_array(swig_obj[4]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[4]), *(arg5)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[4]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[4]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[4]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[4])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg5 = new VectorType(tempContainer);
  }
  result = (prmVelocityCartesianSet *)new prmVelocityCartesianSet((vctDouble3 const &)*arg1,(vctDouble3 const &)*arg2,(vctDouble3 const &)*arg3,(vctDouble3 const &)*arg4,(vctBool6 const &)*arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityCartesianSet, SWIG_POINTER_NEW |  0 );
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg1;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg3;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg4;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg5;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityCartesianSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmVelocityCartesianSet", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmVelocityCartesianSet__SWIG_0(self, argc, argv);
  }
  if (argc == 5) {
    int _v;
    {
      // test that the parameter is an array
      if (!PyArray_Check(argv[0])) {
        _v = 0;
        PyErr_Clear();
      } else {
        // we should test the dimension as well if we overload for vector and matrix
        if (PyArray_NDIM(cast_array(argv[0])) != 1) {
          _v = 0;
          PyErr_Clear();
        } else {
          _v = 1;
        }
      }
    }
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        {
          // test that the parameter is an array
          if (!PyArray_Check(argv[2])) {
            _v = 0;
            PyErr_Clear();
          } else {
            // we should test the dimension as well if we overload for vector and matrix
            if (PyArray_NDIM(cast_array(argv[2])) != 1) {
              _v = 0;
              PyErr_Clear();
            } else {
              _v = 1;
            }
          }
        }
        if (_v) {
          {
            // test that the parameter is an array
            if (!PyArray_Check(argv[3])) {
              _v = 0;
              PyErr_Clear();
            } else {
              // we should test the dimension as well if we overload for vector and matrix
              if (PyArray_NDIM(cast_array(argv[3])) != 1) {
                _v = 0;
                PyErr_Clear();
              } else {
                _v = 1;
              }
            }
          }
          if (_v) {
            {
              // test that the parameter is an array
              if (!PyArray_Check(argv[4])) {
                _v = 0;
                PyErr_Clear();
              } else {
                // we should test the dimension as well if we overload for vector and matrix
                if (PyArray_NDIM(cast_array(argv[4])) != 1) {
                  _v = 0;
                  PyErr_Clear();
                } else {
                  _v = 1;
                }
              }
            }
            if (_v) {
              return _wrap_new_prmVelocityCartesianSet__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmVelocityCartesianSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityCartesianSet::prmVelocityCartesianSet()\n"
    "    prmVelocityCartesianSet::prmVelocityCartesianSet(vctDouble3 const &,vctDouble3 const &,vctDouble3 const &,vctDouble3 const &,vctBool6 const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmVelocityCartesianSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmVelocityCartesianSet" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetGoal" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetGoal((vctDouble6 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetTranslationGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetTranslationGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetTranslationGoal" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetTranslationGoal((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetRotationGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetRotationGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetRotationGoal" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetRotationGoal((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_GetGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_GetGoal" "', argument " "1"" of type '" "prmVelocityCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  result = ((prmVelocityCartesianSet const *)arg1)->GetGoal();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetVelocity" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocity((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_GetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_GetVelocity" "', argument " "1"" of type '" "prmVelocityCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  result = ((prmVelocityCartesianSet const *)arg1)->GetVelocity();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetAngularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetAngularVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetAngularVelocity" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAngularVelocity((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_GetAngularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_GetAngularVelocity" "', argument " "1"" of type '" "prmVelocityCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  result = ((prmVelocityCartesianSet const *)arg1)->GetAngularVelocity();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetAcceleration" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAcceleration((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_GetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_GetAcceleration" "', argument " "1"" of type '" "prmVelocityCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  result = ((prmVelocityCartesianSet const *)arg1)->GetAcceleration();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetAngularAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctDouble3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetAngularAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetAngularAcceleration" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAngularAcceleration((vctDouble3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_GetAngularAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctDouble3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_GetAngularAcceleration" "', argument " "1"" of type '" "prmVelocityCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  result = ((prmVelocityCartesianSet const *)arg1)->GetAngularAcceleration();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctDouble3 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_SetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  vctBool6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityCartesianSet_SetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_SetMask" "', argument " "1"" of type '" "prmVelocityCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBool6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetMask((vctBool6 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityCartesianSet_GetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityCartesianSet *arg1 = (prmVelocityCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctBool6 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityCartesianSet_GetMask" "', argument " "1"" of type '" "prmVelocityCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityCartesianSet * >(argp1);
  result = ((prmVelocityCartesianSet const *)arg1)->GetMask();
  {
    /*****************************************************************************
        *   %typemap(out) vctDynamicVector
        *   Returning a vctDynamicVector
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CREATE A NEW PYARRAY OBJECT
        *****************************************************************************/
    
    typedef vctBool6 VectorType;
    //Create a new PyArray and set its size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = (&result)->size();
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNew(1, sizes, type);
    
    /*****************************************************************************
         COPY THE DATA FROM THE vctDynamicConstVectorRef TO THE PYARRAY
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = (&result)->size();
    const npy_intp stride = 1;
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(resultobj)));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the vctDynamicConstVectorRef to the temporary container
    tempContainer.Assign(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmVelocityCartesianSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmVelocityCartesianSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmVelocityCartesianSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmForceCartesianGet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmForceCartesianGet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmForceCartesianGet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmForceCartesianGet *)new prmForceCartesianGet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmForceCartesianGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmForceCartesianGet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vctDouble6 *arg1 = 0 ;
  prmForceCartesianGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[0]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[0])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[0])
        && vctThrowUnlessDimension1(cast_array(swig_obj[0]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[0]), *(arg1)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[0]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[0]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[0]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[0])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg1 = new VectorType(tempContainer);
  }
  result = (prmForceCartesianGet *)new prmForceCartesianGet((vctDouble6 const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmForceCartesianGet, SWIG_POINTER_NEW |  0 );
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg1;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmForceCartesianGet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmForceCartesianGet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmForceCartesianGet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      // test that the parameter is an array
      if (!PyArray_Check(argv[0])) {
        _v = 0;
        PyErr_Clear();
      } else {
        // we should test the dimension as well if we overload for vector and matrix
        if (PyArray_NDIM(cast_array(argv[0])) != 1) {
          _v = 0;
          PyErr_Clear();
        } else {
          _v = 1;
        }
      }
    }
    if (_v) {
      return _wrap_new_prmForceCartesianGet__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmForceCartesianGet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::prmForceCartesianGet()\n"
    "    prmForceCartesianGet::prmForceCartesianGet(vctDouble6 const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmForceCartesianGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmForceCartesianGet" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_SetForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  vctDouble6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_SetForce", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_SetForce" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDouble6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetForce((vctDouble6 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  vctDouble6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_GetForce" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDouble6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmForceCartesianGet const *)arg1)->GetForce(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDouble6 VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_Force__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDouble6 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_Force" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (vctDouble6 *) &((prmForceCartesianGet const *)arg1)->Force();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDouble6 VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_Force__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDouble6 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_Force" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (vctDouble6 *) &(arg1)->Force();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDouble6 VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_Force(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_Force", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_Force__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_Force__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_Force'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::Force() const\n"
    "    prmForceCartesianGet::Force()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDouble6 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_GetForce" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (vctDouble6 *) &prmForceCartesianGet_GetForce__SWIG_1((prmForceCartesianGet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDouble6 VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetForce(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_GetForce", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_GetForce__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmForceCartesianGet_GetForce__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_GetForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::GetForce(vctDouble6 &) const\n"
    "    prmForceCartesianGet::GetForce() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_SetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  vctBool6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_SetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_SetMask" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBool6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetMask((vctBool6 const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  vctBool6 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_GetMask" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctBool6 VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmForceCartesianGet const *)arg1)->GetMask(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctBool6 VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_Mask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctBool6 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_Mask" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (vctBool6 *) &((prmForceCartesianGet const *)arg1)->Mask();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctBool6 VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_Mask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctBool6 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_Mask" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (vctBool6 *) &(arg1)->Mask();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctBool6 VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_Mask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_Mask", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_Mask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_Mask__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_Mask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::Mask() const\n"
    "    prmForceCartesianGet::Mask()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctBool6 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_GetMask" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (vctBool6 *) &prmForceCartesianGet_GetMask__SWIG_1((prmForceCartesianGet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctBool6 VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetMask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_GetMask", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_GetMask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmForceCartesianGet_GetMask__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_GetMask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::GetMask(vctBool6 &) const\n"
    "    prmForceCartesianGet::GetMask() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_SetMovingFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_SetMovingFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_SetMovingFrame" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmForceCartesianGet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmForceCartesianGet_SetMovingFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetMovingFrame((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetMovingFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_GetMovingFrame" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmForceCartesianGet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmForceCartesianGet_GetMovingFrame" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ((prmForceCartesianGet const *)arg1)->GetMovingFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_MovingFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_MovingFrame" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (std::string *) &((prmForceCartesianGet const *)arg1)->MovingFrame();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_MovingFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_MovingFrame" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (std::string *) &(arg1)->MovingFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_MovingFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_MovingFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_MovingFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_MovingFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_MovingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::MovingFrame() const\n"
    "    prmForceCartesianGet::MovingFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetMovingFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_GetMovingFrame" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (std::string *) &prmForceCartesianGet_GetMovingFrame__SWIG_1((prmForceCartesianGet const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_GetMovingFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_GetMovingFrame", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_GetMovingFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmForceCartesianGet_GetMovingFrame__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_GetMovingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::GetMovingFrame(std::string &) const\n"
    "    prmForceCartesianGet::GetMovingFrame() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_F__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianGet::ConstForceType result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_F" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = ((prmForceCartesianGet const *)arg1)->F();
  resultobj = SWIG_NewPointerObj((new prmForceCartesianGet::ConstForceType(static_cast< const prmForceCartesianGet::ConstForceType& >(result))), SWIGTYPE_p_vctFixedSizeConstVectorRefT_double_3_1_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_F__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianGet::ForceType result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_F" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (arg1)->F();
  resultobj = SWIG_NewPointerObj((new prmForceCartesianGet::ForceType(static_cast< const prmForceCartesianGet::ForceType& >(result))), SWIGTYPE_p_vctFixedSizeVectorRefT_double_3_1_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_F(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_F", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_F__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_F__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_F'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::F() const\n"
    "    prmForceCartesianGet::F()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_T__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianGet::ConstTorqueType result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_T" "', argument " "1"" of type '" "prmForceCartesianGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = ((prmForceCartesianGet const *)arg1)->T();
  resultobj = SWIG_NewPointerObj((new prmForceCartesianGet::ConstTorqueType(static_cast< const prmForceCartesianGet::ConstTorqueType& >(result))), SWIGTYPE_p_vctFixedSizeConstVectorRefT_double_3_1_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_T__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianGet *arg1 = (prmForceCartesianGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianGet::TorqueType result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianGet_T" "', argument " "1"" of type '" "prmForceCartesianGet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianGet * >(argp1);
  result = (arg1)->T();
  resultobj = SWIG_NewPointerObj((new prmForceCartesianGet::TorqueType(static_cast< const prmForceCartesianGet::TorqueType& >(result))), SWIGTYPE_p_vctFixedSizeVectorRefT_double_3_1_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianGet_T(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianGet_T", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_T__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianGet_T__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianGet_T'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianGet::T() const\n"
    "    prmForceCartesianGet::T()\n");
  return 0;
}


SWIGINTERN PyObject *prmForceCartesianGet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmForceCartesianGet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmForceCartesianGet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmForceCartesianSet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmForceCartesianSet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_SetForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  prmForceCartesianSet::ForceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_SetForce", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_SetForce" "', argument " "1"" of type '" "prmForceCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef prmForceCartesianSet::ForceType VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetForce((prmForceCartesianSet::ForceType const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_GetForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  prmForceCartesianSet::ForceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_GetForce" "', argument " "1"" of type '" "prmForceCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef prmForceCartesianSet::ForceType VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmForceCartesianSet const *)arg1)->GetForce(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef prmForceCartesianSet::ForceType VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_Force__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianSet::ForceType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_Force" "', argument " "1"" of type '" "prmForceCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  result = (prmForceCartesianSet::ForceType *) &((prmForceCartesianSet const *)arg1)->Force();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef prmForceCartesianSet::ForceType VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_Force__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianSet::ForceType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_Force" "', argument " "1"" of type '" "prmForceCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  result = (prmForceCartesianSet::ForceType *) &(arg1)->Force();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef prmForceCartesianSet::ForceType VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_Force(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_Force", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianSet_Force__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianSet_Force__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianSet_Force'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianSet::Force() const\n"
    "    prmForceCartesianSet::Force()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_GetForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianSet::ForceType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_GetForce" "', argument " "1"" of type '" "prmForceCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  result = (prmForceCartesianSet::ForceType *) &prmForceCartesianSet_GetForce__SWIG_1((prmForceCartesianSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef prmForceCartesianSet::ForceType VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_GetForce(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_GetForce", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianSet_GetForce__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmForceCartesianSet_GetForce__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianSet_GetForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianSet::GetForce(prmForceCartesianSet::ForceType &) const\n"
    "    prmForceCartesianSet::GetForce() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_SetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  prmForceCartesianSet::MaskType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_SetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_SetMask" "', argument " "1"" of type '" "prmForceCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef prmForceCartesianSet::MaskType VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetMask((prmForceCartesianSet::MaskType const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_GetMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  prmForceCartesianSet::MaskType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_GetMask" "', argument " "1"" of type '" "prmForceCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef prmForceCartesianSet::MaskType VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmForceCartesianSet const *)arg1)->GetMask(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef prmForceCartesianSet::MaskType VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_Mask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianSet::MaskType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_Mask" "', argument " "1"" of type '" "prmForceCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  result = (prmForceCartesianSet::MaskType *) &((prmForceCartesianSet const *)arg1)->Mask();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef prmForceCartesianSet::MaskType VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_Mask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianSet::MaskType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_Mask" "', argument " "1"" of type '" "prmForceCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  result = (prmForceCartesianSet::MaskType *) &(arg1)->Mask();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef prmForceCartesianSet::MaskType VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_Mask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_Mask", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianSet_Mask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianSet_Mask__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianSet_Mask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianSet::Mask() const\n"
    "    prmForceCartesianSet::Mask()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_GetMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmForceCartesianSet::MaskType *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_GetMask" "', argument " "1"" of type '" "prmForceCartesianSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  result = (prmForceCartesianSet::MaskType *) &prmForceCartesianSet_GetMask__SWIG_1((prmForceCartesianSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef prmForceCartesianSet::MaskType VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_GetMask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_GetMask", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmForceCartesianSet_GetMask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmForceCartesianSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmForceCartesianSet_GetMask__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmForceCartesianSet_GetMask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianSet::GetMask(prmForceCartesianSet::MaskType &) const\n"
    "    prmForceCartesianSet::GetMask() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_prmForceCartesianSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmForceCartesianSet *)new prmForceCartesianSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmForceCartesianSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmForceCartesianSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmForceCartesianSet::ForceType *arg1 = 0 ;
  prmForceCartesianSet::MaskType *arg2 = 0 ;
  prmForceCartesianSet *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[0]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef prmForceCartesianSet::ForceType VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[0])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[0])
        && vctThrowUnlessDimension1(cast_array(swig_obj[0]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[0]), *(arg1)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[0]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[0]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[0]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[0])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg1 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef prmForceCartesianSet::MaskType VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  result = (prmForceCartesianSet *)new prmForceCartesianSet((prmForceCartesianSet::ForceType const &)*arg1,(prmForceCartesianSet::MaskType const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmForceCartesianSet, SWIG_POINTER_NEW |  0 );
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg1;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmForceCartesianSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmForceCartesianSet", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmForceCartesianSet__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    {
      // test that the parameter is an array
      if (!PyArray_Check(argv[0])) {
        _v = 0;
        PyErr_Clear();
      } else {
        // we should test the dimension as well if we overload for vector and matrix
        if (PyArray_NDIM(cast_array(argv[0])) != 1) {
          _v = 0;
          PyErr_Clear();
        } else {
          _v = 1;
        }
      }
    }
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_new_prmForceCartesianSet__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmForceCartesianSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmForceCartesianSet::prmForceCartesianSet()\n"
    "    prmForceCartesianSet::prmForceCartesianSet(prmForceCartesianSet::ForceType const &,prmForceCartesianSet::MaskType const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmForceCartesianSet_SetAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmForceCartesianSet_SetAll", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmForceCartesianSet_SetAll" "', argument " "1"" of type '" "prmForceCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmForceCartesianSet_SetAll" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmForceCartesianSet_SetAll" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->SetAll(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmForceCartesianSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmForceCartesianSet *arg1 = (prmForceCartesianSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmForceCartesianSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmForceCartesianSet" "', argument " "1"" of type '" "prmForceCartesianSet *""'"); 
  }
  arg1 = reinterpret_cast< prmForceCartesianSet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmForceCartesianSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmForceCartesianSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmForceCartesianSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_prmPositionJointGet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmPositionJointGet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmPositionJointGet *)new prmPositionJointGet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointGet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmPositionJointGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmPositionJointGet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmPositionJointGet" "', argument " "1"" of type '" "prmPositionJointGet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmPositionJointGet" "', argument " "1"" of type '" "prmPositionJointGet const &""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = (prmPositionJointGet *)new prmPositionJointGet((prmPositionJointGet const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmPositionJointGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmPositionJointGet" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_GetPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_GetPosition" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointGet const *)arg1)->GetPosition(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_SetPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SetPosition" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetPosition((vctDynamicVector< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Position__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_Position" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = (vctDynamicVector< double > *) &((prmPositionJointGet const *)arg1)->Position();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Position__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_Position" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = (vctDynamicVector< double > *) &(arg1)->Position();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Position(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointGet_Position", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointGet_Position__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointGet_Position__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointGet_Position'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::Position() const\n"
    "    prmPositionJointGet::Position()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_GetTimestamps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_GetTimestamps", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_GetTimestamps" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointGet const *)arg1)->GetTimestamps(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SetTimestamps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_SetTimestamps", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SetTimestamps" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetTimestamps((vctDynamicVector< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Timestamps__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_Timestamps" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = (vctDynamicVector< double > *) &((prmPositionJointGet const *)arg1)->Timestamps();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Timestamps__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_Timestamps" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = (vctDynamicVector< double > *) &(arg1)->Timestamps();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Timestamps(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointGet_Timestamps", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointGet_Timestamps__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointGet_Timestamps__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointGet_Timestamps'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::Timestamps() const\n"
    "    prmPositionJointGet::Timestamps()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointGet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  prmPositionJointGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_prmPositionJointGet" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (prmPositionJointGet *)new prmPositionJointGet(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointGet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmPositionJointGet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmPositionJointGet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmPositionJointGet__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_prmPositionJointGet__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmPositionJointGet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::prmPositionJointGet()\n"
    "    prmPositionJointGet::prmPositionJointGet(prmPositionJointGet const &)\n"
    "    prmPositionJointGet::prmPositionJointGet(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_SetSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SetSize" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointGet_SetSize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->SetSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmPositionJointGet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  prmPositionJointGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_Copy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_Copy" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionJointGet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_Copy" "', argument " "2"" of type '" "prmPositionJointGet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_Copy" "', argument " "2"" of type '" "prmPositionJointGet const &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionJointGet * >(argp2);
  (arg1)->Copy((prmPositionJointGet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_SerializeBinary", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SerializeBinary" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmPositionJointGet const *)arg1)->SerializeBinary(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_DeSerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  std::istream *arg2 = 0 ;
  cmnDataFormat *arg3 = 0 ;
  cmnDataFormat *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointGet_DeSerializeBinary", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  arg3 = reinterpret_cast< cmnDataFormat * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  arg4 = reinterpret_cast< cmnDataFormat * >(argp4);
  try {
    (arg1)->DeSerializeBinary(*arg2,(cmnDataFormat const &)*arg3,(cmnDataFormat const &)*arg4);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  std::ostream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SerializeText" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmPositionJointGet_SerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    ((prmPositionJointGet const *)arg1)->SerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SerializeText" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmPositionJointGet const *)arg1)->SerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointGet_SerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionJointGet_SerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmPositionJointGet_SerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointGet_SerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::SerializeText(std::ostream &,char const) const\n"
    "    prmPositionJointGet::SerializeText(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  char arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((prmPositionJointGet const *)arg1)->SerializeDescription(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((prmPositionJointGet const *)arg1)->SerializeDescription(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeDescription__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_SerializeDescription" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = ((prmPositionJointGet const *)arg1)->SerializeDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_SerializeDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointGet_SerializeDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointGet_SerializeDescription__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmPositionJointGet_SerializeDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmPositionJointGet_SerializeDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointGet_SerializeDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::SerializeDescription(char const,std::string const &) const\n"
    "    prmPositionJointGet::SerializeDescription(char const) const\n"
    "    prmPositionJointGet::SerializeDescription() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_DeSerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  std::istream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    (arg1)->DeSerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_DeSerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "1"" of type '" "prmPositionJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  try {
    (arg1)->DeSerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_DeSerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointGet_DeSerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionJointGet_DeSerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmPositionJointGet_DeSerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointGet_DeSerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::DeSerializeText(std::istream &,char const)\n"
    "    prmPositionJointGet::DeSerializeText(std::istream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet___str__" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  result = ((prmPositionJointGet const *)arg1)->HumanReadable();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_ScalarDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_ScalarDescription" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointGet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionJointGet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointGet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    result = ((prmPositionJointGet const *)arg1)->ScalarDescription(arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_ScalarDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointGet *arg1 = (prmPositionJointGet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointGet_ScalarDescription" "', argument " "1"" of type '" "prmPositionJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointGet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointGet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = ((prmPositionJointGet const *)arg1)->ScalarDescription(arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointGet_ScalarDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointGet_ScalarDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmPositionJointGet_ScalarDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmPositionJointGet_ScalarDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointGet_ScalarDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointGet::ScalarDescription(size_t const,std::string const &) const\n"
    "    prmPositionJointGet::ScalarDescription(size_t const) const\n");
  return 0;
}


SWIGINTERN PyObject *prmPositionJointGet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmPositionJointGet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmPositionJointGet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cmnSerializeRaw__SWIG_27(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  prmPositionJointGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionJointGet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmPositionJointGet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmPositionJointGet const &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionJointGet * >(argp2);
  cmnSerializeRaw(*arg1,(prmPositionJointGet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cmnDeSerializeRaw__SWIG_27(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  prmPositionJointGet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionJointGet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmPositionJointGet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmPositionJointGet &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionJointGet * >(argp2);
  cmnDeSerializeRaw(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmPositionJointSet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmPositionJointSet *)new prmPositionJointSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmPositionJointSet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmPositionJointSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmPositionJointSet" "', argument " "1"" of type '" "prmPositionJointSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmPositionJointSet" "', argument " "1"" of type '" "prmPositionJointSet const &""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (prmPositionJointSet *)new prmPositionJointSet((prmPositionJointSet const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmPositionJointSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmPositionJointSet" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetGoal" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointSet const *)arg1)->GetGoal(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetGoal" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetGoal((vctDynamicVector< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Goal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Goal" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &((prmPositionJointSet const *)arg1)->Goal();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Goal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Goal" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &(arg1)->Goal();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Goal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_Goal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Goal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Goal__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_Goal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::Goal() const\n"
    "    prmPositionJointSet::Goal()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetVelocity" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointSet const *)arg1)->GetVelocity(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetVelocity" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocity((vctDynamicVector< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Velocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Velocity" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &((prmPositionJointSet const *)arg1)->Velocity();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Velocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Velocity" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &(arg1)->Velocity();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Velocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_Velocity", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Velocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Velocity__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_Velocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::Velocity() const\n"
    "    prmPositionJointSet::Velocity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetAcceleration" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointSet const *)arg1)->GetAcceleration(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetAcceleration" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAcceleration((vctDynamicVector< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Acceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Acceleration" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &((prmPositionJointSet const *)arg1)->Acceleration();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Acceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Acceleration" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &(arg1)->Acceleration();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Acceleration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_Acceleration", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Acceleration__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Acceleration__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_Acceleration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::Acceleration() const\n"
    "    prmPositionJointSet::Acceleration()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetTimeLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetTimeLimit", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetTimeLimit" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_GetTimeLimit" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_GetTimeLimit" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((prmPositionJointSet const *)arg1)->GetTimeLimit(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetTimeLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetTimeLimit", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetTimeLimit" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SetTimeLimit" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->SetTimeLimit((double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_TimeLimit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_TimeLimit" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (double *) &((prmPositionJointSet const *)arg1)->TimeLimit();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_TimeLimit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_TimeLimit" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (double *) &(arg1)->TimeLimit();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_TimeLimit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_TimeLimit", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_TimeLimit__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_TimeLimit__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_TimeLimit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::TimeLimit() const\n"
    "    prmPositionJointSet::TimeLimit()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetIsCoordinated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetIsCoordinated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetIsCoordinated" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_GetIsCoordinated" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_GetIsCoordinated" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmPositionJointSet const *)arg1)->GetIsCoordinated(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetIsCoordinated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetIsCoordinated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetIsCoordinated" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SetIsCoordinated" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsCoordinated((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsCoordinated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_IsCoordinated" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &((prmPositionJointSet const *)arg1)->IsCoordinated();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsCoordinated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_IsCoordinated" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &(arg1)->IsCoordinated();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsCoordinated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_IsCoordinated", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_IsCoordinated__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_IsCoordinated__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_IsCoordinated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::IsCoordinated() const\n"
    "    prmPositionJointSet::IsCoordinated()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetDeceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetDeceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetDeceleration" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointSet const *)arg1)->GetDeceleration(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetDeceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetDeceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetDeceleration" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< double > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetDeceleration((vctDynamicVector< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Deceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Deceleration" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &((prmPositionJointSet const *)arg1)->Deceleration();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Deceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Deceleration" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< double > *) &(arg1)->Deceleration();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< double > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Deceleration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_Deceleration", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Deceleration__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Deceleration__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_Deceleration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::Deceleration() const\n"
    "    prmPositionJointSet::Deceleration()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< bool > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetMask" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDynamicVector< bool > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmPositionJointSet const *)arg1)->GetMask(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDynamicVector< bool > VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  vctDynamicVector< bool > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetMask" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDynamicVector< bool > VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetMask((vctDynamicVector< bool > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Mask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< bool > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Mask" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< bool > *) &((prmPositionJointSet const *)arg1)->Mask();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDynamicVector< bool > VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Mask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDynamicVector< bool > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Mask" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (vctDynamicVector< bool > *) &(arg1)->Mask();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDynamicVector< bool > VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Mask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_Mask", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Mask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_Mask__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_Mask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::Mask() const\n"
    "    prmPositionJointSet::Mask()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetBlockingFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  prmBlocking *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetBlockingFlag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetBlockingFlag" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmBlocking,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_GetBlockingFlag" "', argument " "2"" of type '" "prmBlocking &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_GetBlockingFlag" "', argument " "2"" of type '" "prmBlocking &""'"); 
  }
  arg2 = reinterpret_cast< prmBlocking * >(argp2);
  ((prmPositionJointSet const *)arg1)->GetBlockingFlag(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetBlockingFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  prmBlocking *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetBlockingFlag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetBlockingFlag" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmBlocking,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_SetBlockingFlag" "', argument " "2"" of type '" "prmBlocking const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_SetBlockingFlag" "', argument " "2"" of type '" "prmBlocking const &""'"); 
  }
  arg2 = reinterpret_cast< prmBlocking * >(argp2);
  (arg1)->SetBlockingFlag((prmBlocking const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_BlockingFlag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmBlocking *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_BlockingFlag" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (prmBlocking *) &((prmPositionJointSet const *)arg1)->BlockingFlag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmBlocking, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_BlockingFlag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmBlocking *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_BlockingFlag" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (prmBlocking *) &(arg1)->BlockingFlag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmBlocking, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_BlockingFlag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_BlockingFlag", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_BlockingFlag__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_BlockingFlag__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_BlockingFlag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::BlockingFlag() const\n"
    "    prmPositionJointSet::BlockingFlag()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetBlendingFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetBlendingFactor", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetBlendingFactor" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_GetBlendingFactor" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_GetBlendingFactor" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmPositionJointSet const *)arg1)->GetBlendingFactor(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetBlendingFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetBlendingFactor", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetBlendingFactor" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SetBlendingFactor" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetBlendingFactor((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_BlendingFactor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_BlendingFactor" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &((prmPositionJointSet const *)arg1)->BlendingFactor();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_BlendingFactor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_BlendingFactor" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &(arg1)->BlendingFactor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_BlendingFactor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_BlendingFactor", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_BlendingFactor__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_BlendingFactor__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_BlendingFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::BlendingFactor() const\n"
    "    prmPositionJointSet::BlendingFactor()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetIsPreemptable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetIsPreemptable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetIsPreemptable" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_GetIsPreemptable" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_GetIsPreemptable" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmPositionJointSet const *)arg1)->GetIsPreemptable(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetIsPreemptable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetIsPreemptable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetIsPreemptable" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SetIsPreemptable" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsPreemptable((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsPreemptable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_IsPreemptable" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &((prmPositionJointSet const *)arg1)->IsPreemptable();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsPreemptable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_IsPreemptable" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &(arg1)->IsPreemptable();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsPreemptable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_IsPreemptable", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_IsPreemptable__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_IsPreemptable__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_IsPreemptable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::IsPreemptable() const\n"
    "    prmPositionJointSet::IsPreemptable()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_GetIsGoalOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_GetIsGoalOnly", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_GetIsGoalOnly" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_GetIsGoalOnly" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_GetIsGoalOnly" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmPositionJointSet const *)arg1)->GetIsGoalOnly(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetIsGoalOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetIsGoalOnly", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetIsGoalOnly" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SetIsGoalOnly" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsGoalOnly((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsGoalOnly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_IsGoalOnly" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &((prmPositionJointSet const *)arg1)->IsGoalOnly();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsGoalOnly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_IsGoalOnly" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = (bool *) &(arg1)->IsGoalOnly();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_IsGoalOnly(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_IsGoalOnly", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_IsGoalOnly__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_IsGoalOnly__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_IsGoalOnly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::IsGoalOnly() const\n"
    "    prmPositionJointSet::IsGoalOnly()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  prmPositionJointSet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_prmPositionJointSet" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (prmPositionJointSet *)new prmPositionJointSet(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmPositionJointSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmPositionJointSet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmPositionJointSet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmPositionJointSet__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_prmPositionJointSet__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmPositionJointSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::prmPositionJointSet()\n"
    "    prmPositionJointSet::prmPositionJointSet(prmPositionJointSet const &)\n"
    "    prmPositionJointSet::prmPositionJointSet(size_t const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SetSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SetSize" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SetSize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->SetSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmPositionJointSet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  prmPositionJointSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_Copy", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_Copy" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionJointSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_Copy" "', argument " "2"" of type '" "prmPositionJointSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_Copy" "', argument " "2"" of type '" "prmPositionJointSet const &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionJointSet * >(argp2);
  (arg1)->Copy((prmPositionJointSet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SerializeBinary", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SerializeBinary" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_SerializeBinary" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmPositionJointSet const *)arg1)->SerializeBinary(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_DeSerializeBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  std::istream *arg2 = 0 ;
  cmnDataFormat *arg3 = 0 ;
  cmnDataFormat *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmPositionJointSet_DeSerializeBinary", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "3"" of type '" "cmnDataFormat const &""'"); 
  }
  arg3 = reinterpret_cast< cmnDataFormat * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cmnDataFormat,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_DeSerializeBinary" "', argument " "4"" of type '" "cmnDataFormat const &""'"); 
  }
  arg4 = reinterpret_cast< cmnDataFormat * >(argp4);
  try {
    (arg1)->DeSerializeBinary(*arg2,(cmnDataFormat const &)*arg3,(cmnDataFormat const &)*arg4);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  std::ostream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SerializeText" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmPositionJointSet_SerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    ((prmPositionJointSet const *)arg1)->SerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SerializeText" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_SerializeText" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  try {
    ((prmPositionJointSet const *)arg1)->SerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionJointSet_SerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmPositionJointSet_SerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_SerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::SerializeText(std::ostream &,char const) const\n"
    "    prmPositionJointSet::SerializeText(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  char arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((prmPositionJointSet const *)arg1)->SerializeDescription(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((prmPositionJointSet const *)arg1)->SerializeDescription(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeDescription__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_SerializeDescription" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = ((prmPositionJointSet const *)arg1)->SerializeDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_SerializeDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_SerializeDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmPositionJointSet_SerializeDescription__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmPositionJointSet_SerializeDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmPositionJointSet_SerializeDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_SerializeDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::SerializeDescription(char const,std::string const &) const\n"
    "    prmPositionJointSet::SerializeDescription(char const) const\n"
    "    prmPositionJointSet::SerializeDescription() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_DeSerializeText__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  std::istream *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    (arg1)->DeSerializeText(*arg2,arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_DeSerializeText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "1"" of type '" "prmPositionJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_DeSerializeText" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  try {
    (arg1)->DeSerializeText(*arg2);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_DeSerializeText(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_DeSerializeText", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmPositionJointSet_DeSerializeText__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_prmPositionJointSet_DeSerializeText__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_DeSerializeText'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::DeSerializeText(std::istream &,char const)\n"
    "    prmPositionJointSet::DeSerializeText(std::istream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet___str__" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  result = ((prmPositionJointSet const *)arg1)->HumanReadable();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_ScalarDescription__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_ScalarDescription" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prmPositionJointSet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmPositionJointSet_ScalarDescription" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    result = ((prmPositionJointSet const *)arg1)->ScalarDescription(arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_ScalarDescription__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmPositionJointSet *arg1 = (prmPositionJointSet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmPositionJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmPositionJointSet_ScalarDescription" "', argument " "1"" of type '" "prmPositionJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmPositionJointSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmPositionJointSet_ScalarDescription" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = ((prmPositionJointSet const *)arg1)->ScalarDescription(arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmPositionJointSet_ScalarDescription(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmPositionJointSet_ScalarDescription", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_prmPositionJointSet_ScalarDescription__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmPositionJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_prmPositionJointSet_ScalarDescription__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmPositionJointSet_ScalarDescription'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmPositionJointSet::ScalarDescription(size_t const,std::string const &) const\n"
    "    prmPositionJointSet::ScalarDescription(size_t const) const\n");
  return 0;
}


SWIGINTERN PyObject *prmPositionJointSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmPositionJointSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmPositionJointSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cmnSerializeRaw__SWIG_28(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  prmPositionJointSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionJointSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmPositionJointSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnSerializeRaw" "', argument " "2"" of type '" "prmPositionJointSet const &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionJointSet * >(argp2);
  cmnSerializeRaw(*arg1,(prmPositionJointSet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cmnSerializeRaw(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cmnSerializeRaw", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_prmPositionCartesianGet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnSerializeRaw__SWIG_25(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_prmVelocityCartesianGet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnSerializeRaw__SWIG_26(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnSerializeRaw__SWIG_27(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnSerializeRaw__SWIG_28(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cmnSerializeRaw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmnSerializeRaw(std::ostream &,mtsExecutionResult const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsDescriptionComponent const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsDescriptionComponentClass const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsDescriptionInterface const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsDescriptionInterfaceFullName const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsDescriptionConnection const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsComponentStatusControl const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsComponentStateChange const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsDescriptionLoadLibrary const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsEndUserInterfaceArg const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsMessage const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsTaskConstructorArg const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsTaskContinuousConstructorArg const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsTaskPeriodicConstructorArg const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsComponentState const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsCommandVoidDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsCommandWriteDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsCommandReadDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsCommandQualifiedReadDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsCommandVoidReturnDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsCommandWriteReturnDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsEventVoidDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsEventWriteDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsInterfaceProvidedDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,mtsInterfaceRequiredDescription const &)\n"
    "    cmnSerializeRaw(std::ostream &,prmPositionCartesianGet const &)\n"
    "    cmnSerializeRaw(std::ostream &,prmVelocityCartesianGet const &)\n"
    "    cmnSerializeRaw(std::ostream &,prmPositionJointGet const &)\n"
    "    cmnSerializeRaw(std::ostream &,prmPositionJointSet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cmnDeSerializeRaw__SWIG_28(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  prmPositionJointSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmPositionJointSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmPositionJointSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cmnDeSerializeRaw" "', argument " "2"" of type '" "prmPositionJointSet &""'"); 
  }
  arg2 = reinterpret_cast< prmPositionJointSet * >(argp2);
  cmnDeSerializeRaw(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cmnDeSerializeRaw(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "cmnDeSerializeRaw", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmPositionCartesianGet, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnDeSerializeRaw__SWIG_25(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmVelocityCartesianGet, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnDeSerializeRaw__SWIG_26(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmPositionJointGet, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnDeSerializeRaw__SWIG_27(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmPositionJointSet, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cmnDeSerializeRaw__SWIG_28(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cmnDeSerializeRaw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cmnDeSerializeRaw(std::istream &,mtsExecutionResult &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsDescriptionComponent &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsDescriptionComponentClass &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsDescriptionInterface &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsDescriptionInterfaceFullName &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsDescriptionConnection &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsComponentStatusControl &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsComponentStateChange &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsDescriptionLoadLibrary &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsEndUserInterfaceArg &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsMessage &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsTaskConstructorArg &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsTaskContinuousConstructorArg &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsTaskPeriodicConstructorArg &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsComponentState &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsCommandVoidDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsCommandWriteDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsCommandReadDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsCommandQualifiedReadDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsCommandVoidReturnDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsCommandWriteReturnDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsEventVoidDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsEventWriteDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsInterfaceProvidedDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,mtsInterfaceRequiredDescription &)\n"
    "    cmnDeSerializeRaw(std::istream &,prmPositionCartesianGet &)\n"
    "    cmnDeSerializeRaw(std::istream &,prmVelocityCartesianGet &)\n"
    "    cmnDeSerializeRaw(std::istream &,prmPositionJointGet &)\n"
    "    cmnDeSerializeRaw(std::istream &,prmPositionJointSet &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointGet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmVelocityJointGet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointGet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmVelocityJointGet *)new prmVelocityJointGet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityJointGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointGet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointGet::size_type arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  prmVelocityJointGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_prmVelocityJointGet" "', argument " "1"" of type '" "prmVelocityJointGet::size_type""'");
  } 
  arg1 = static_cast< prmVelocityJointGet::size_type >(val1);
  result = (prmVelocityJointGet *)new prmVelocityJointGet(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityJointGet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  prmVelocityJointGet::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointGet_SetSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointGet_SetSize" "', argument " "1"" of type '" "prmVelocityJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityJointGet_SetSize" "', argument " "2"" of type '" "prmVelocityJointGet::size_type""'");
  } 
  arg2 = static_cast< prmVelocityJointGet::size_type >(val2);
  (arg1)->SetSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointGet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vctDoubleVec *arg1 = 0 ;
  prmVelocityJointGet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[0]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[0])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[0])
        && vctThrowUnlessDimension1(cast_array(swig_obj[0]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[0]), *(arg1)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[0]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[0]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[0]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[0])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg1 = new VectorType(tempContainer);
  }
  result = (prmVelocityJointGet *)new prmVelocityJointGet((vctDoubleVec const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityJointGet, SWIG_POINTER_NEW |  0 );
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg1;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointGet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmVelocityJointGet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmVelocityJointGet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      // test that the parameter is an array
      if (!PyArray_Check(argv[0])) {
        _v = 0;
        PyErr_Clear();
      } else {
        // we should test the dimension as well if we overload for vector and matrix
        if (PyArray_NDIM(cast_array(argv[0])) != 1) {
          _v = 0;
          PyErr_Clear();
        } else {
          _v = 1;
        }
      }
    }
    if (_v) {
      return _wrap_new_prmVelocityJointGet__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_prmVelocityJointGet__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmVelocityJointGet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointGet::prmVelocityJointGet()\n"
    "    prmVelocityJointGet::prmVelocityJointGet(prmVelocityJointGet::size_type)\n"
    "    prmVelocityJointGet::prmVelocityJointGet(vctDoubleVec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmVelocityJointGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmVelocityJointGet" "', argument " "1"" of type '" "prmVelocityJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_SetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointGet_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointGet_SetVelocity" "', argument " "1"" of type '" "prmVelocityJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetVelocity((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_GetVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointGet_GetVelocity" "', argument " "1"" of type '" "prmVelocityJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityJointGet const *)arg1)->GetVelocity(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_Velocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointGet_Velocity" "', argument " "1"" of type '" "prmVelocityJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  result = (vctDoubleVec *) &((prmVelocityJointGet const *)arg1)->Velocity();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_Velocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointGet_Velocity" "', argument " "1"" of type '" "prmVelocityJointGet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  result = (vctDoubleVec *) &(arg1)->Velocity();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_Velocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointGet_Velocity", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointGet_Velocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointGet_Velocity__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointGet_Velocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointGet::Velocity() const\n"
    "    prmVelocityJointGet::Velocity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_GetVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointGet *arg1 = (prmVelocityJointGet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointGet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointGet_GetVelocity" "', argument " "1"" of type '" "prmVelocityJointGet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointGet * >(argp1);
  result = (vctDoubleVec *) &prmVelocityJointGet_GetVelocity__SWIG_1((prmVelocityJointGet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointGet_GetVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointGet_GetVelocity", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointGet_GetVelocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointGet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmVelocityJointGet_GetVelocity__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointGet_GetVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointGet::GetVelocity(vctDoubleVec &) const\n"
    "    prmVelocityJointGet::GetVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *prmVelocityJointGet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmVelocityJointGet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmVelocityJointGet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmVelocityJointSet_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmVelocityJointSet::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctBoolVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetMask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetMask" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBoolVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetMask((vctBoolVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetMask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctBoolVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetMask" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctBoolVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityJointSet const *)arg1)->GetMask(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctBoolVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Mask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctBoolVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Mask" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctBoolVec *) &((prmVelocityJointSet const *)arg1)->Mask();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctBoolVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Mask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctBoolVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Mask" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctBoolVec *) &(arg1)->Mask();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctBoolVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Mask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_Mask", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Mask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Mask__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_Mask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::Mask() const\n"
    "    prmVelocityJointSet::Mask()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetMask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctBoolVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetMask" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctBoolVec *) &prmVelocityJointSet_GetMask__SWIG_1((prmVelocityJointSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctBoolVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetMask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_GetMask", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_GetMask__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmVelocityJointSet_GetMask__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_GetMask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::GetMask(vctBoolVec &) const\n"
    "    prmVelocityJointSet::GetMask() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetGuard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetGuard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetGuard" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetGuard((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetGuard__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetGuard" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityJointSet const *)arg1)->GetGuard(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Guard__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Guard" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &((prmVelocityJointSet const *)arg1)->Guard();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Guard__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Guard" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &(arg1)->Guard();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Guard(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_Guard", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Guard__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Guard__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_Guard'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::Guard() const\n"
    "    prmVelocityJointSet::Guard()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetGuard__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetGuard" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &prmVelocityJointSet_GetGuard__SWIG_1((prmVelocityJointSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetGuard(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_GetGuard", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_GetGuard__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmVelocityJointSet_GetGuard__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_GetGuard'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::GetGuard(vctDoubleVec &) const\n"
    "    prmVelocityJointSet::GetGuard() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetGoal" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetGoal((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetGoal" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityJointSet const *)arg1)->GetGoal(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Goal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Goal" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &((prmVelocityJointSet const *)arg1)->Goal();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Goal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Goal" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &(arg1)->Goal();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Goal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_Goal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Goal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Goal__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_Goal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::Goal() const\n"
    "    prmVelocityJointSet::Goal()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetGoal" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &prmVelocityJointSet_GetGoal__SWIG_1((prmVelocityJointSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_GetGoal", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_GetGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmVelocityJointSet_GetGoal__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_GetGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::GetGoal(vctDoubleVec &) const\n"
    "    prmVelocityJointSet::GetGoal() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetAcceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetAcceleration" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetAcceleration((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetAcceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetAcceleration" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityJointSet const *)arg1)->GetAcceleration(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Acceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Acceleration" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &((prmVelocityJointSet const *)arg1)->Acceleration();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Acceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Acceleration" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &(arg1)->Acceleration();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Acceleration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_Acceleration", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Acceleration__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Acceleration__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_Acceleration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::Acceleration() const\n"
    "    prmVelocityJointSet::Acceleration()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetAcceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetAcceleration" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &prmVelocityJointSet_GetAcceleration__SWIG_1((prmVelocityJointSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetAcceleration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_GetAcceleration", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_GetAcceleration__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmVelocityJointSet_GetAcceleration__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_GetAcceleration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::GetAcceleration(vctDoubleVec &) const\n"
    "    prmVelocityJointSet::GetAcceleration() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetDeceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetDeceleration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetDeceleration" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetDeceleration((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetDeceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetDeceleration" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmVelocityJointSet const *)arg1)->GetDeceleration(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Deceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Deceleration" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &((prmVelocityJointSet const *)arg1)->Deceleration();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Deceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_Deceleration" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &(arg1)->Deceleration();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_Deceleration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_Deceleration", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Deceleration__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_Deceleration__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_Deceleration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::Deceleration() const\n"
    "    prmVelocityJointSet::Deceleration()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetDeceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetDeceleration" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (vctDoubleVec *) &prmVelocityJointSet_GetDeceleration__SWIG_1((prmVelocityJointSet const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetDeceleration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_GetDeceleration", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_GetDeceleration__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmVelocityJointSet_GetDeceleration__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_GetDeceleration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::GetDeceleration(vctDoubleVec &) const\n"
    "    prmVelocityJointSet::GetDeceleration() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetIsPositionGuarded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetIsPositionGuarded", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetIsPositionGuarded" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityJointSet_SetIsPositionGuarded" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->SetIsPositionGuarded((bool const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetIsPositionGuarded__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetIsPositionGuarded" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmVelocityJointSet_GetIsPositionGuarded" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmVelocityJointSet_GetIsPositionGuarded" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  ((prmVelocityJointSet const *)arg1)->GetIsPositionGuarded(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_IsPositionGuarded__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_IsPositionGuarded" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (bool *) &((prmVelocityJointSet const *)arg1)->IsPositionGuarded();
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_IsPositionGuarded__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_IsPositionGuarded" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (bool *) &(arg1)->IsPositionGuarded();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_IsPositionGuarded(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_IsPositionGuarded", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_IsPositionGuarded__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_IsPositionGuarded__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_IsPositionGuarded'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::IsPositionGuarded() const\n"
    "    prmVelocityJointSet::IsPositionGuarded()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetIsPositionGuarded__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_GetIsPositionGuarded" "', argument " "1"" of type '" "prmVelocityJointSet const *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  result = (bool *) &prmVelocityJointSet_GetIsPositionGuarded__SWIG_1((prmVelocityJointSet const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_GetIsPositionGuarded(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_GetIsPositionGuarded", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmVelocityJointSet_GetIsPositionGuarded__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmVelocityJointSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmVelocityJointSet_GetIsPositionGuarded__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmVelocityJointSet_GetIsPositionGuarded'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::GetIsPositionGuarded(bool &) const\n"
    "    prmVelocityJointSet::GetIsPositionGuarded() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmVelocityJointSet *)new prmVelocityJointSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityJointSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmVelocityJointSet::size_type arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  prmVelocityJointSet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_prmVelocityJointSet" "', argument " "1"" of type '" "prmVelocityJointSet::size_type""'");
  } 
  arg1 = static_cast< prmVelocityJointSet::size_type >(val1);
  result = (prmVelocityJointSet *)new prmVelocityJointSet(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityJointSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmVelocityJointSet_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  prmVelocityJointSet::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmVelocityJointSet_SetSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmVelocityJointSet_SetSize" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmVelocityJointSet_SetSize" "', argument " "2"" of type '" "prmVelocityJointSet::size_type""'");
  } 
  arg2 = static_cast< prmVelocityJointSet::size_type >(val2);
  (arg1)->SetSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  vctBoolVec *arg1 = 0 ;
  vctDoubleVec *arg2 = 0 ;
  vctDoubleVec *arg3 = 0 ;
  vctDoubleVec *arg4 = 0 ;
  vctDoubleVec *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool temp6 ;
  bool val6 ;
  int ecode6 = 0 ;
  prmVelocityJointSet *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[0]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctBoolVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[0])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[0])
        && vctThrowUnlessDimension1(cast_array(swig_obj[0]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[0]), *(arg1)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[0]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[0]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[0]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[0])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg1 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[2]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[2])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[2])
        && vctThrowUnlessDimension1(cast_array(swig_obj[2]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[2]), *(arg3)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[2]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[2]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[2]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[2])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg3 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[3]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[3])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[3])
        && vctThrowUnlessDimension1(cast_array(swig_obj[3]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[3]), *(arg4)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[3]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[3]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[3]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[3])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg4 = new VectorType(tempContainer);
  }
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[4]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[4])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[4])
        && vctThrowUnlessDimension1(cast_array(swig_obj[4]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[4]), *(arg5)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[4]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[4]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[4]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[4])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg5 = new VectorType(tempContainer);
  }
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_prmVelocityJointSet" "', argument " "6"" of type '" "bool""'");
  } 
  temp6 = static_cast< bool >(val6);
  arg6 = &temp6;
  result = (prmVelocityJointSet *)new prmVelocityJointSet((vctBoolVec const &)*arg1,(vctDoubleVec const &)*arg2,(vctDoubleVec const &)*arg3,(vctDoubleVec const &)*arg4,(vctDoubleVec const &)*arg5,(bool const &)*arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmVelocityJointSet, SWIG_POINTER_NEW |  0 );
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg1;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg3;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg4;
  }
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg5;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmVelocityJointSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmVelocityJointSet", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmVelocityJointSet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_prmVelocityJointSet__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 6) {
    int _v;
    {
      // test that the parameter is an array
      if (!PyArray_Check(argv[0])) {
        _v = 0;
        PyErr_Clear();
      } else {
        // we should test the dimension as well if we overload for vector and matrix
        if (PyArray_NDIM(cast_array(argv[0])) != 1) {
          _v = 0;
          PyErr_Clear();
        } else {
          _v = 1;
        }
      }
    }
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        {
          // test that the parameter is an array
          if (!PyArray_Check(argv[2])) {
            _v = 0;
            PyErr_Clear();
          } else {
            // we should test the dimension as well if we overload for vector and matrix
            if (PyArray_NDIM(cast_array(argv[2])) != 1) {
              _v = 0;
              PyErr_Clear();
            } else {
              _v = 1;
            }
          }
        }
        if (_v) {
          {
            // test that the parameter is an array
            if (!PyArray_Check(argv[3])) {
              _v = 0;
              PyErr_Clear();
            } else {
              // we should test the dimension as well if we overload for vector and matrix
              if (PyArray_NDIM(cast_array(argv[3])) != 1) {
                _v = 0;
                PyErr_Clear();
              } else {
                _v = 1;
              }
            }
          }
          if (_v) {
            {
              // test that the parameter is an array
              if (!PyArray_Check(argv[4])) {
                _v = 0;
                PyErr_Clear();
              } else {
                // we should test the dimension as well if we overload for vector and matrix
                if (PyArray_NDIM(cast_array(argv[4])) != 1) {
                  _v = 0;
                  PyErr_Clear();
                } else {
                  _v = 1;
                }
              }
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_prmVelocityJointSet__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmVelocityJointSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmVelocityJointSet::prmVelocityJointSet()\n"
    "    prmVelocityJointSet::prmVelocityJointSet(prmVelocityJointSet::size_type)\n"
    "    prmVelocityJointSet::prmVelocityJointSet(vctBoolVec const &,vctDoubleVec const &,vctDoubleVec const &,vctDoubleVec const &,vctDoubleVec const &,bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmVelocityJointSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmVelocityJointSet *arg1 = (prmVelocityJointSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmVelocityJointSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmVelocityJointSet" "', argument " "1"" of type '" "prmVelocityJointSet *""'"); 
  }
  arg1 = reinterpret_cast< prmVelocityJointSet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmVelocityJointSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmVelocityJointSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmVelocityJointSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmTransformationBase_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationBase_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmTransformationBase::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_Services(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmnClassServicesBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_Services" "', argument " "1"" of type '" "prmTransformationBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  result = (cmnClassServicesBase *)((prmTransformationBase const *)arg1)->Services();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmTransformationBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmTransformationBase" "', argument " "1"" of type '" "prmTransformationBase *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_WorldFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  prmTransformationBasePtr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_WorldFrame" "', argument " "1"" of type '" "prmTransformationBase *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  result = (prmTransformationBasePtr)(arg1)->WorldFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_SetReferenceFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_SetReferenceFrame" "', argument " "1"" of type '" "prmTransformationBase *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationBase_SetReferenceFrame" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = (bool)(arg1)->SetReferenceFrame((prmTransformationBasePtr const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_SetReferenceFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_SetReferenceFrame" "', argument " "1"" of type '" "prmTransformationBase *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationBase_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationBase_SetReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->SetReferenceFrame((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_SetReferenceFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmTransformationBase_SetReferenceFrame", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmTransformationBase_SetReferenceFrame__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmTransformationBase_SetReferenceFrame__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmTransformationBase_SetReferenceFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmTransformationBase::SetReferenceFrame(prmTransformationBasePtr const &)\n"
    "    prmTransformationBase::SetReferenceFrame(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_GetReferenceFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  prmTransformationBasePtr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_GetReferenceFrame" "', argument " "1"" of type '" "prmTransformationBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  result = (prmTransformationBasePtr)((prmTransformationBase const *)arg1)->GetReferenceFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_GetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_GetName" "', argument " "1"" of type '" "prmTransformationBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  result = (std::string *) &((prmTransformationBase const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_SetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationBase_SetName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_SetName" "', argument " "1"" of type '" "prmTransformationBase *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationBase_SetName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationBase_SetName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationBase_WRTReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBase *arg1 = (prmTransformationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctFrm3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationBase_WRTReference" "', argument " "1"" of type '" "prmTransformationBase const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationBase * >(argp1);
  result = ((prmTransformationBase const *)arg1)->WRTReference();
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmTransformationBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmTransformationBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_prmTransformationManager_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationManager_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmTransformationManager::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_Services(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationManager *arg1 = (prmTransformationManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  cmnClassServicesBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_Services" "', argument " "1"" of type '" "prmTransformationManager const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationManager * >(argp1);
  result = (cmnClassServicesBase *)((prmTransformationManager const *)arg1)->Services();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_prmTransformationManager_TheWorld_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_prmTransformationFixed,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""prmTransformationManager::TheWorld""' of type '""prmTransformationFixed""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""prmTransformationManager::TheWorld""' of type '""prmTransformationFixed""'");
    } else {
      prmTransformationFixed * temp;
      temp  = reinterpret_cast< prmTransformationFixed * >(argp);
      prmTransformationManager::TheWorld = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_prmTransformationManager_TheWorld_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&prmTransformationManager::TheWorld), SWIGTYPE_p_prmTransformationFixed,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_TheWorld_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_prmTransformationManager_TheWorld_get();
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_TheWorld_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  
  res = Swig_var_prmTransformationManager_TheWorld_set(args);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationManager_Clear", 0, 0, 0)) SWIG_fail;
  prmTransformationManager::Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_NodeCreatesCycle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_NodeCreatesCycle" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_NodeCreatesCycle" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = (bool)prmTransformationManager::NodeCreatesCycle((prmTransformationBase *const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_NodeCreatesCycle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_NodeCreatesCycle" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationManager_NodeCreatesCycle" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_NodeCreatesCycle" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = (bool)prmTransformationManager::NodeCreatesCycle((std::string const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_NodeCreatesCycle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmTransformationManager_NodeCreatesCycle", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmTransformationManager_NodeCreatesCycle__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmTransformationManager_NodeCreatesCycle__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmTransformationManager_NodeCreatesCycle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmTransformationManager::NodeCreatesCycle(prmTransformationBasePtr const &,prmTransformationBasePtr const &)\n"
    "    prmTransformationManager::NodeCreatesCycle(std::string const &,prmTransformationBasePtr const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_WRTReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  PyObject *swig_obj[2] ;
  vctFrm3 result;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationManager_WRTReference", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_WRTReference" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_WRTReference" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = prmTransformationManager::WRTReference((prmTransformationBase *const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_ReplaceReference__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  unsigned int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_ReplaceReference" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_ReplaceReference" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = (unsigned int)prmTransformationManager::ReplaceReference((prmTransformationBase *const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_ReplaceReference__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_ReplaceReference" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_ReplaceReference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationManager_ReplaceReference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (unsigned int)prmTransformationManager::ReplaceReference((prmTransformationBase *const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_ReplaceReference(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmTransformationManager_ReplaceReference", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmTransformationManager_ReplaceReference__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmTransformationManager_ReplaceReference__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmTransformationManager_ReplaceReference'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmTransformationManager::ReplaceReference(prmTransformationBasePtr const &,prmTransformationBasePtr const &)\n"
    "    prmTransformationManager::ReplaceReference(prmTransformationBasePtr const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_ToStreamDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_ToStreamDot" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationManager_ToStreamDot" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  prmTransformationManager::ToStreamDot(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_ToStreamDotHelper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  prmTransformationBasePtr arg2 = (prmTransformationBasePtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationManager_ToStreamDotHelper", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_ToStreamDotHelper" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationManager_ToStreamDotHelper" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_ToStreamDotHelper" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  arg2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  prmTransformationManager::ToStreamDotHelper(*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_FindPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationManager_FindPath", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_FindPath" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_FindPath" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = (bool)prmTransformationManager::FindPath((prmTransformationBase *const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_FindPathConnectedTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationManager_FindPathConnectedTree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_FindPathConnectedTree" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationManager_FindPathConnectedTree" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = (bool)prmTransformationManager::FindPathConnectedTree((prmTransformationBase *const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_GetTransformationNodePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject *swig_obj[1] ;
  prmTransformationBasePtr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "prmTransformationManager_GetTransformationNodePtr" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (prmTransformationBasePtr)prmTransformationManager::GetTransformationNodePtr(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationManager_PathToStreamDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationManager_PathToStreamDot" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationManager_PathToStreamDot" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  prmTransformationManager::PathToStreamDot(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationManager *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_prmTransformationManager", 0, 0, 0)) SWIG_fail;
  result = (prmTransformationManager *)new prmTransformationManager();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmTransformationManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationManager *arg1 = (prmTransformationManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmTransformationManager" "', argument " "1"" of type '" "prmTransformationManager *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationManager * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmTransformationManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmTransformationManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmTransformationManager_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmWRTReference__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  vctFrm3 result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmWRTReference" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmWRTReference" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = prmWRTReference((prmTransformationBase *const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmWRTWorld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  PyObject *swig_obj[1] ;
  vctFrm3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmWRTWorld" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  result = prmWRTWorld((prmTransformationBase *const &)*arg1);
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmWRTReference__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  vctFrm3 result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmWRTReference" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmWRTReference" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmWRTReference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmWRTReference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = prmWRTReference((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmWRTReference__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  prmTransformationBasePtr *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  prmTransformationBasePtr temp2 ;
  vctFrm3 result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmWRTReference" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmWRTReference" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmWRTReference" "', argument " "2"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp2 = reinterpret_cast< prmTransformationBasePtr >(argp2);
  arg2 = reinterpret_cast< prmTransformationBasePtr * >(&temp2);
  result = prmWRTReference((std::string const &)*arg1,(prmTransformationBase *const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmWRTReference__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmTransformationBasePtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  prmTransformationBasePtr temp1 ;
  int res2 = SWIG_OLDOBJ ;
  vctFrm3 result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmWRTReference" "', argument " "1"" of type '" "prmTransformationBasePtr""'"); 
  }
  temp1 = reinterpret_cast< prmTransformationBasePtr >(argp1);
  arg1 = reinterpret_cast< prmTransformationBasePtr * >(&temp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmWRTReference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmWRTReference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = prmWRTReference((prmTransformationBase *const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmWRTReference(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmWRTReference", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmWRTReference__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmWRTReference__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmWRTReference__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmWRTReference__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmWRTReference'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmWRTReference(prmTransformationBasePtr const &,prmTransformationBasePtr const &)\n"
    "    prmWRTReference(std::string const &,std::string const &)\n"
    "    prmWRTReference(std::string const &,prmTransformationBasePtr const &)\n"
    "    prmWRTReference(prmTransformationBasePtr const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmTransformationDynamic_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationDynamic_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmTransformationDynamic::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationDynamic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmTransformationDynamic *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmTransformationDynamic *)new prmTransformationDynamic();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationDynamic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationDynamic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  prmTransformationDynamic *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmTransformationDynamic" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmTransformationDynamic" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (prmTransformationDynamic *)new prmTransformationDynamic((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationDynamic, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationDynamic__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  prmTransformationDynamic::CommandType *arg2 = 0 ;
  prmTransformationBasePtr arg3 = (prmTransformationBasePtr) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  prmTransformationDynamic *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmTransformationDynamic" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmTransformationDynamic" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mtsFunctionRead,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_prmTransformationDynamic" "', argument " "2"" of type '" "prmTransformationDynamic::CommandType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmTransformationDynamic" "', argument " "2"" of type '" "prmTransformationDynamic::CommandType const &""'"); 
  }
  arg2 = reinterpret_cast< prmTransformationDynamic::CommandType * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_prmTransformationDynamic" "', argument " "3"" of type '" "prmTransformationBasePtr""'"); 
  }
  arg3 = reinterpret_cast< prmTransformationBasePtr >(argp3);
  result = (prmTransformationDynamic *)new prmTransformationDynamic((std::string const &)*arg1,(prmTransformationDynamic::CommandType const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationDynamic, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationDynamic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmTransformationDynamic", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmTransformationDynamic__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmTransformationDynamic__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mtsFunctionRead, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_prmTransformationDynamic__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmTransformationDynamic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmTransformationDynamic::prmTransformationDynamic()\n"
    "    prmTransformationDynamic::prmTransformationDynamic(std::string const &)\n"
    "    prmTransformationDynamic::prmTransformationDynamic(std::string const &,prmTransformationDynamic::CommandType const &,prmTransformationBasePtr)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmTransformationDynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationDynamic *arg1 = (prmTransformationDynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationDynamic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmTransformationDynamic" "', argument " "1"" of type '" "prmTransformationDynamic *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationDynamic * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationDynamic_SetTransformationCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationDynamic *arg1 = (prmTransformationDynamic *) 0 ;
  prmTransformationDynamic::CommandType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationDynamic_SetTransformationCommand", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationDynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationDynamic_SetTransformationCommand" "', argument " "1"" of type '" "prmTransformationDynamic *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationDynamic * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mtsFunctionRead,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationDynamic_SetTransformationCommand" "', argument " "2"" of type '" "prmTransformationDynamic::CommandType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationDynamic_SetTransformationCommand" "', argument " "2"" of type '" "prmTransformationDynamic::CommandType const &""'"); 
  }
  arg2 = reinterpret_cast< prmTransformationDynamic::CommandType * >(argp2);
  (arg1)->SetTransformationCommand((prmTransformationDynamic::CommandType const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationDynamic_GetTransformationCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationDynamic *arg1 = (prmTransformationDynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  prmTransformationDynamic::CommandType *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationDynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationDynamic_GetTransformationCommand" "', argument " "1"" of type '" "prmTransformationDynamic const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationDynamic * >(argp1);
  result = (prmTransformationDynamic::CommandType *) &((prmTransformationDynamic const *)arg1)->GetTransformationCommand();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mtsFunctionRead, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmTransformationDynamic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmTransformationDynamic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmTransformationDynamic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmTransformationFixed_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationFixed_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmTransformationFixed::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationFixed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmTransformationFixed *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmTransformationFixed *)new prmTransformationFixed();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationFixed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationFixed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  prmTransformationFixed *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmTransformationFixed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmTransformationFixed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (prmTransformationFixed *)new prmTransformationFixed((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationFixed, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationFixed__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vctFrm3 *arg2 = 0 ;
  prmTransformationBasePtr arg3 = (prmTransformationBasePtr) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  prmTransformationFixed *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_prmTransformationFixed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmTransformationFixed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_prmTransformationFixed" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_prmTransformationFixed" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctFrm3 * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_prmTransformationBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_prmTransformationFixed" "', argument " "3"" of type '" "prmTransformationBasePtr""'"); 
  }
  arg3 = reinterpret_cast< prmTransformationBasePtr >(argp3);
  result = (prmTransformationFixed *)new prmTransformationFixed((std::string const &)*arg1,(vctFrm3 const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmTransformationFixed, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmTransformationFixed(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmTransformationFixed", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmTransformationFixed__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_prmTransformationFixed__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_prmTransformationBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_prmTransformationFixed__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmTransformationFixed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmTransformationFixed::prmTransformationFixed()\n"
    "    prmTransformationFixed::prmTransformationFixed(std::string const &)\n"
    "    prmTransformationFixed::prmTransformationFixed(std::string const &,vctFrm3 const &,prmTransformationBasePtr)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_prmTransformationFixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationFixed *arg1 = (prmTransformationFixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationFixed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmTransformationFixed" "', argument " "1"" of type '" "prmTransformationFixed *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationFixed * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationFixed_SetTransformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationFixed *arg1 = (prmTransformationFixed *) 0 ;
  vctFrm3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmTransformationFixed_SetTransformation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationFixed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationFixed_SetTransformation" "', argument " "1"" of type '" "prmTransformationFixed *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationFixed * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmTransformationFixed_SetTransformation" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmTransformationFixed_SetTransformation" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctFrm3 * >(argp2);
  (arg1)->SetTransformation((vctFrm3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmTransformationFixed_GetTransformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmTransformationFixed *arg1 = (prmTransformationFixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  vctFrm3 result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmTransformationFixed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmTransformationFixed_GetTransformation" "', argument " "1"" of type '" "prmTransformationFixed const *""'"); 
  }
  arg1 = reinterpret_cast< prmTransformationFixed * >(argp1);
  result = ((prmTransformationFixed const *)arg1)->GetTransformation();
  resultobj = SWIG_NewPointerObj((new vctFrm3(static_cast< const vctFrm3& >(result))), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prmTransformationFixed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmTransformationFixed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmTransformationFixed_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_prmRobotState_ClassServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  cmnClassServicesBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_ClassServices", 0, 0, 0)) SWIG_fail;
  result = (cmnClassServicesBase *)prmRobotState::ClassServices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cmnClassServicesBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmRobotState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  prmRobotState *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (prmRobotState *)new prmRobotState();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmRobotState, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmRobotState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState::size_type arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  prmRobotState *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_prmRobotState" "', argument " "1"" of type '" "prmRobotState::size_type""'");
  } 
  arg1 = static_cast< prmRobotState::size_type >(val1);
  result = (prmRobotState *)new prmRobotState(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_prmRobotState, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prmRobotState(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_prmRobotState", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_prmRobotState__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_prmRobotState__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_prmRobotState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::prmRobotState()\n"
    "    prmRobotState::prmRobotState(prmRobotState::size_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  prmRobotState::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetSize" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "prmRobotState_SetSize" "', argument " "2"" of type '" "prmRobotState::size_type""'");
  } 
  arg2 = static_cast< prmRobotState::size_type >(val2);
  (arg1)->SetSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prmRobotState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prmRobotState" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetJointPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetJointPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetJointPosition" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetJointPosition((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointPosition" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetJointPosition(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointPosition" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->JointPosition();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointPosition" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->JointPosition();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_JointPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointPosition__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_JointPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::JointPosition() const\n"
    "    prmRobotState::JointPosition()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointPosition" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetJointPosition__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetJointPosition", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetJointPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetJointPosition__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetJointPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetJointPosition(vctDoubleVec &) const\n"
    "    prmRobotState::GetJointPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetJointVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetJointVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetJointVelocity" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetJointVelocity((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointVelocity" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetJointVelocity(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointVelocity" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->JointVelocity();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointVelocity" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->JointVelocity();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_JointVelocity", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointVelocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointVelocity__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_JointVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::JointVelocity() const\n"
    "    prmRobotState::JointVelocity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointVelocity" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetJointVelocity__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetJointVelocity", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetJointVelocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetJointVelocity__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetJointVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetJointVelocity(vctDoubleVec &) const\n"
    "    prmRobotState::GetJointVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetJointPositionGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetJointPositionGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetJointPositionGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetJointPositionGoal((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPositionGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointPositionGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetJointPositionGoal(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPositionGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointPositionGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->JointPositionGoal();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPositionGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointPositionGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->JointPositionGoal();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPositionGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_JointPositionGoal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointPositionGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointPositionGoal__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_JointPositionGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::JointPositionGoal() const\n"
    "    prmRobotState::JointPositionGoal()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPositionGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointPositionGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetJointPositionGoal__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPositionGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetJointPositionGoal", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetJointPositionGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetJointPositionGoal__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetJointPositionGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetJointPositionGoal(vctDoubleVec &) const\n"
    "    prmRobotState::GetJointPositionGoal() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetJointVelocityGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetJointVelocityGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetJointVelocityGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetJointVelocityGoal((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocityGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointVelocityGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetJointVelocityGoal(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocityGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointVelocityGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->JointVelocityGoal();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocityGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointVelocityGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->JointVelocityGoal();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocityGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_JointVelocityGoal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointVelocityGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointVelocityGoal__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_JointVelocityGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::JointVelocityGoal() const\n"
    "    prmRobotState::JointVelocityGoal()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocityGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointVelocityGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetJointVelocityGoal__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocityGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetJointVelocityGoal", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetJointVelocityGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetJointVelocityGoal__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetJointVelocityGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetJointVelocityGoal(vctDoubleVec &) const\n"
    "    prmRobotState::GetJointVelocityGoal() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetJointPositionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetJointPositionError", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetJointPositionError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetJointPositionError((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPositionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointPositionError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetJointPositionError(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPositionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointPositionError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->JointPositionError();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPositionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointPositionError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->JointPositionError();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointPositionError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_JointPositionError", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointPositionError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointPositionError__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_JointPositionError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::JointPositionError() const\n"
    "    prmRobotState::JointPositionError()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPositionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointPositionError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetJointPositionError__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointPositionError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetJointPositionError", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetJointPositionError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetJointPositionError__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetJointPositionError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetJointPositionError(vctDoubleVec &) const\n"
    "    prmRobotState::GetJointPositionError() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetJointVelocityError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetJointVelocityError", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetJointVelocityError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetJointVelocityError((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocityError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointVelocityError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetJointVelocityError(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocityError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointVelocityError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->JointVelocityError();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocityError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_JointVelocityError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->JointVelocityError();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_JointVelocityError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_JointVelocityError", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointVelocityError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_JointVelocityError__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_JointVelocityError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::JointVelocityError() const\n"
    "    prmRobotState::JointVelocityError()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocityError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetJointVelocityError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetJointVelocityError__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetJointVelocityError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetJointVelocityError", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetJointVelocityError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetJointVelocityError__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetJointVelocityError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetJointVelocityError(vctDoubleVec &) const\n"
    "    prmRobotState::GetJointVelocityError() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetCartesianPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetCartesianPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetCartesianPosition" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetCartesianPosition((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianPosition" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetCartesianPosition(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianPosition" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->CartesianPosition();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianPosition" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->CartesianPosition();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_CartesianPosition", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianPosition__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_CartesianPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::CartesianPosition() const\n"
    "    prmRobotState::CartesianPosition()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianPosition" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetCartesianPosition__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetCartesianPosition", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetCartesianPosition__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetCartesianPosition__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetCartesianPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetCartesianPosition(vctDoubleVec &) const\n"
    "    prmRobotState::GetCartesianPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetCartesianVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetCartesianVelocity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetCartesianVelocity" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetCartesianVelocity((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianVelocity" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetCartesianVelocity(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianVelocity" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->CartesianVelocity();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianVelocity" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->CartesianVelocity();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_CartesianVelocity", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianVelocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianVelocity__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_CartesianVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::CartesianVelocity() const\n"
    "    prmRobotState::CartesianVelocity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianVelocity" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetCartesianVelocity__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetCartesianVelocity", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetCartesianVelocity__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetCartesianVelocity__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetCartesianVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetCartesianVelocity(vctDoubleVec &) const\n"
    "    prmRobotState::GetCartesianVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetCartesianPositionGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetCartesianPositionGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetCartesianPositionGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetCartesianPositionGoal((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPositionGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianPositionGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetCartesianPositionGoal(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPositionGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianPositionGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->CartesianPositionGoal();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPositionGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianPositionGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->CartesianPositionGoal();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPositionGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_CartesianPositionGoal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianPositionGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianPositionGoal__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_CartesianPositionGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::CartesianPositionGoal() const\n"
    "    prmRobotState::CartesianPositionGoal()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPositionGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianPositionGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetCartesianPositionGoal__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPositionGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetCartesianPositionGoal", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetCartesianPositionGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetCartesianPositionGoal__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetCartesianPositionGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetCartesianPositionGoal(vctDoubleVec &) const\n"
    "    prmRobotState::GetCartesianPositionGoal() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetCartesianVelocityGoal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetCartesianVelocityGoal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetCartesianVelocityGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetCartesianVelocityGoal((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocityGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianVelocityGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetCartesianVelocityGoal(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocityGoal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianVelocityGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->CartesianVelocityGoal();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocityGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianVelocityGoal" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->CartesianVelocityGoal();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocityGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_CartesianVelocityGoal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianVelocityGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianVelocityGoal__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_CartesianVelocityGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::CartesianVelocityGoal() const\n"
    "    prmRobotState::CartesianVelocityGoal()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocityGoal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianVelocityGoal" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetCartesianVelocityGoal__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocityGoal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetCartesianVelocityGoal", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetCartesianVelocityGoal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetCartesianVelocityGoal__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetCartesianVelocityGoal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetCartesianVelocityGoal(vctDoubleVec &) const\n"
    "    prmRobotState::GetCartesianVelocityGoal() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetCartesianPositionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetCartesianPositionError", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetCartesianPositionError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetCartesianPositionError((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPositionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianPositionError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetCartesianPositionError(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPositionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianPositionError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->CartesianPositionError();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPositionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianPositionError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->CartesianPositionError();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianPositionError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_CartesianPositionError", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianPositionError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianPositionError__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_CartesianPositionError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::CartesianPositionError() const\n"
    "    prmRobotState::CartesianPositionError()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPositionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianPositionError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetCartesianPositionError__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianPositionError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetCartesianPositionError", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetCartesianPositionError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetCartesianPositionError__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetCartesianPositionError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetCartesianPositionError(vctDoubleVec &) const\n"
    "    prmRobotState::GetCartesianPositionError() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetCartesianVelocityError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetCartesianVelocityError", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetCartesianVelocityError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) const vctDynamicVector &
        *   Passing a vctDynamicVector by const &
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, AND IS ONE-DIMENSIONAL
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  (arg1)->SetCartesianVelocityError((vctDoubleVec const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    /**************************************************************************
        *   %typemap(argout) const vctDynamicVector &
        *   Passing a vctDynamicVector by const reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        **************************************************************************/
    
    /**************************************************************************
         CLEAN UP
        **************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocityError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctDoubleVec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianVelocityError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  {
    /*****************************************************************************
        *   %typemap(in) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*****************************************************************************
         CHECK IF THE PYTHON OBJECT (NAMED `swig_obj[1]') THAT WAS PASSED TO THIS TYPEMAP
         IS A PYARRAY, IS OF THE CORRECT DTYPE, IS ONE-DIMENSIONAL, AND IS WRITABLE
        *****************************************************************************/
    
    typedef vctDoubleVec VectorType;
    if (!(   vctThrowUnlessIsPyArray(swig_obj[1])
        && vctThrowUnlessIsSameTypeArray<VectorType::value_type>(swig_obj[1])
        && vctThrowUnlessDimension1(cast_array(swig_obj[1]))
        && vctThrowUnlessCorrectVectorSize(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessIsWritable(cast_array(swig_obj[1]))
        && vctThrowUnlessOwnsData(cast_array(swig_obj[1]), *(arg2))
        && vctThrowUnlessNotReferenced(swig_obj[1], *(arg2)))
      ) {
      return NULL;
    }
    
    /*****************************************************************************
         COPY THE DATA OF THE PYARRAY (NAMED `swig_obj[1]') TO THE vctDynamicVector
        *****************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    const vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Create the vctDynamicVector
    arg2 = new VectorType(tempContainer);
  }
  ((prmRobotState const *)arg1)->GetCartesianVelocityError(*arg2);
  resultobj = SWIG_Py_Void();
  {
    /*****************************************************************************
        *   %typemap(argout) vctDynamicVector &
        *   Passing a vctDynamicVector by reference
        *
        *   See the documentation ``Developer's Guide to Writing Typemaps'' for documentation on the logic behind
        *   this typemap.
        *****************************************************************************/
    
    /*************************************************************************
         CHECK IF THE CONTAINER HAS BEEN RESIZED
        *************************************************************************/
    
    typedef vctDoubleVec VectorType;
    const VectorType::size_type input_size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const VectorType::size_type output_size = arg2->size();
    
    if (input_size != output_size) {
      // Resize the PyArray by:
      //  1)  Creating an array containing the new size
      //  2)  Pass that array to the resizing function given by NumPy API
      npy_intp *sizes = PyDimMem_NEW(1);              // create an array of sizes; dimension 1
      sizes[0] = output_size;                         // set the size
      PyArray_Dims dims;                              // create a PyArray_Dims object to hand to PyArray_Resize
      dims.ptr = sizes;
      dims.len = 1;
      PyArray_Resize(cast_array(swig_obj[1]), &dims, 0, NPY_CORDER);
    }
    
    /*************************************************************************
         COPY THE DATA TO THE PYARRAY
        *************************************************************************/
    
    // Create a temporary vctDynamicVectorRef container
    const npy_intp size = PyArray_DIM(cast_array(swig_obj[1]), 0);
    const npy_intp stride = PyArray_STRIDE(cast_array(swig_obj[1]), 0) / sizeof(VectorType::value_type);
    const VectorType::pointer data = reinterpret_cast<VectorType::pointer>(PyArray_DATA(cast_array(swig_obj[1])));
    
    vctDynamicVectorRef<VectorType::value_type> tempContainer(size, data, stride);
    
    // Copy the data from the temporary container to the vctDynamicVector
    tempContainer.Assign(*(arg2));
    
    /*************************************************************************
         CLEAN UP
        *************************************************************************/
    
    // Don't forget to free the memory we allocated in the `in' typemap
    delete arg2;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocityError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianVelocityError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &((prmRobotState const *)arg1)->CartesianVelocityError();
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocityError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_CartesianVelocityError" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &(arg1)->CartesianVelocityError();
  {
    /* Return vector by reference
           Using: %typemap(out) vctDynamicVector &
         */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizeOfReturnedVector = PyDimMem_NEW(1);
    sizeOfReturnedVector[0] = result->size();
    
    //create a new PyArray from the reference returned by the C function
    int type = vctPythonType<VectorType::value_type>();
    resultobj = PyArray_SimpleNewFromData(1, sizeOfReturnedVector, type,  result->Pointer() );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_CartesianVelocityError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_CartesianVelocityError", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianVelocityError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_CartesianVelocityError__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_CartesianVelocityError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::CartesianVelocityError() const\n"
    "    prmRobotState::CartesianVelocityError()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocityError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctDoubleVec *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetCartesianVelocityError" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctDoubleVec *) &prmRobotState_GetCartesianVelocityError__SWIG_1((prmRobotState const *)arg1);
  {
    /* Return vector by const reference
           Using: %typemap(out) const vctDynamicVector &
         */
    
    /* To imitate const functionality, set the writable flag to false */
    
    typedef vctDoubleVec VectorType;
    //Create new size array and set size
    npy_intp* sizes = PyDimMem_NEW(1);
    sizes[0] = result->size();
    
    // Look at the NumPy C API to see how these lines work: http://projects.scipy.org/numpy/wiki/NumPyCAPI
    int type = vctPythonType<VectorType::value_type>();
    PyArray_Descr *descr = PyArray_DescrFromType(type);
    resultobj = PyArray_NewFromDescr(&PyArray_Type, descr, 1, sizes, NULL, result->Pointer(), NPY_ARRAY_CARRAY_RO, NULL);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetCartesianVelocityError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetCartesianVelocityError", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetCartesianVelocityError__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // test that the parameter is an array
        if (!PyArray_Check(argv[1])) {
          _v = 0;
          PyErr_Clear();
        } else {
          // we should test the dimension as well if we overload for vector and matrix
          if (PyArray_NDIM(cast_array(argv[1])) != 1) {
            _v = 0;
            PyErr_Clear();
          } else {
            _v = 1;
          }
        }
      }
      if (_v) {
        return _wrap_prmRobotState_GetCartesianVelocityError__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetCartesianVelocityError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetCartesianVelocityError(vctDoubleVec &) const\n"
    "    prmRobotState::GetCartesianVelocityError() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_SetEndEffectorFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctFrm3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "prmRobotState_SetEndEffectorFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_SetEndEffectorFrame" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmRobotState_SetEndEffectorFrame" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmRobotState_SetEndEffectorFrame" "', argument " "2"" of type '" "vctFrm3 const &""'"); 
  }
  arg2 = reinterpret_cast< vctFrm3 * >(argp2);
  (arg1)->SetEndEffectorFrame((vctFrm3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetEndEffectorFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  vctFrm3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetEndEffectorFrame" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prmRobotState_GetEndEffectorFrame" "', argument " "2"" of type '" "vctFrm3 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prmRobotState_GetEndEffectorFrame" "', argument " "2"" of type '" "vctFrm3 &""'"); 
  }
  arg2 = reinterpret_cast< vctFrm3 * >(argp2);
  ((prmRobotState const *)arg1)->GetEndEffectorFrame(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_EndEffectorFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_EndEffectorFrame" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctFrm3 *) &((prmRobotState const *)arg1)->EndEffectorFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_EndEffectorFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_EndEffectorFrame" "', argument " "1"" of type '" "prmRobotState *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctFrm3 *) &(arg1)->EndEffectorFrame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_EndEffectorFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_EndEffectorFrame", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_EndEffectorFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_EndEffectorFrame__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_EndEffectorFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::EndEffectorFrame() const\n"
    "    prmRobotState::EndEffectorFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetEndEffectorFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  prmRobotState *arg1 = (prmRobotState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vctFrm3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_prmRobotState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prmRobotState_GetEndEffectorFrame" "', argument " "1"" of type '" "prmRobotState const *""'"); 
  }
  arg1 = reinterpret_cast< prmRobotState * >(argp1);
  result = (vctFrm3 *) &prmRobotState_GetEndEffectorFrame__SWIG_1((prmRobotState const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prmRobotState_GetEndEffectorFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "prmRobotState_GetEndEffectorFrame", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_prmRobotState_GetEndEffectorFrame__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_prmRobotState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_prmRobotState_GetEndEffectorFrame__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'prmRobotState_GetEndEffectorFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    prmRobotState::GetEndEffectorFrame(vctFrm3 &) const\n"
    "    prmRobotState::GetEndEffectorFrame() const\n");
  return 0;
}


SWIGINTERN PyObject *prmRobotState_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_prmRobotState, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *prmRobotState_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, NULL},
	 { "ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, NULL},
	 { "ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, NULL},
	 { "ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, NULL},
	 { "ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, NULL},
	 { "ios_base_width", _wrap_ios_base_width, METH_VARARGS, NULL},
	 { "ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, NULL},
	 { "ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, NULL},
	 { "ios_base_getloc", _wrap_ios_base_getloc, METH_O, NULL},
	 { "ios_base_xalloc", _wrap_ios_base_xalloc, METH_NOARGS, NULL},
	 { "ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, NULL},
	 { "ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, NULL},
	 { "delete_ios_base", _wrap_delete_ios_base, METH_O, NULL},
	 { "ios_base_swigregister", ios_base_swigregister, METH_O, NULL},
	 { "ios_rdstate", _wrap_ios_rdstate, METH_O, NULL},
	 { "ios_clear", _wrap_ios_clear, METH_VARARGS, NULL},
	 { "ios_setstate", _wrap_ios_setstate, METH_VARARGS, NULL},
	 { "ios_good", _wrap_ios_good, METH_O, NULL},
	 { "ios_eof", _wrap_ios_eof, METH_O, NULL},
	 { "ios_fail", _wrap_ios_fail, METH_O, NULL},
	 { "ios_bad", _wrap_ios_bad, METH_O, NULL},
	 { "ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, NULL},
	 { "new_ios", _wrap_new_ios, METH_O, NULL},
	 { "delete_ios", _wrap_delete_ios, METH_O, NULL},
	 { "ios_tie", _wrap_ios_tie, METH_VARARGS, NULL},
	 { "ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, NULL},
	 { "ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, NULL},
	 { "ios_fill", _wrap_ios_fill, METH_VARARGS, NULL},
	 { "ios_imbue", _wrap_ios_imbue, METH_VARARGS, NULL},
	 { "ios_narrow", _wrap_ios_narrow, METH_VARARGS, NULL},
	 { "ios_widen", _wrap_ios_widen, METH_VARARGS, NULL},
	 { "ios_swigregister", ios_swigregister, METH_O, NULL},
	 { "ios_swiginit", ios_swiginit, METH_VARARGS, NULL},
	 { "delete_streambuf", _wrap_delete_streambuf, METH_O, NULL},
	 { "streambuf_pubimbue", _wrap_streambuf_pubimbue, METH_VARARGS, NULL},
	 { "streambuf_getloc", _wrap_streambuf_getloc, METH_O, NULL},
	 { "streambuf_pubsetbuf", _wrap_streambuf_pubsetbuf, METH_VARARGS, NULL},
	 { "streambuf_pubseekoff", _wrap_streambuf_pubseekoff, METH_VARARGS, NULL},
	 { "streambuf_pubseekpos", _wrap_streambuf_pubseekpos, METH_VARARGS, NULL},
	 { "streambuf_pubsync", _wrap_streambuf_pubsync, METH_O, NULL},
	 { "streambuf_in_avail", _wrap_streambuf_in_avail, METH_O, NULL},
	 { "streambuf_snextc", _wrap_streambuf_snextc, METH_O, NULL},
	 { "streambuf_sbumpc", _wrap_streambuf_sbumpc, METH_O, NULL},
	 { "streambuf_sgetc", _wrap_streambuf_sgetc, METH_O, NULL},
	 { "streambuf_sgetn", _wrap_streambuf_sgetn, METH_VARARGS, NULL},
	 { "streambuf_sputbackc", _wrap_streambuf_sputbackc, METH_VARARGS, NULL},
	 { "streambuf_sungetc", _wrap_streambuf_sungetc, METH_O, NULL},
	 { "streambuf_sputc", _wrap_streambuf_sputc, METH_VARARGS, NULL},
	 { "streambuf_sputn", _wrap_streambuf_sputn, METH_VARARGS, NULL},
	 { "streambuf_swigregister", streambuf_swigregister, METH_O, NULL},
	 { "new_ostream", _wrap_new_ostream, METH_O, NULL},
	 { "delete_ostream", _wrap_delete_ostream, METH_O, NULL},
	 { "ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, NULL},
	 { "ostream_put", _wrap_ostream_put, METH_VARARGS, NULL},
	 { "ostream_write", _wrap_ostream_write, METH_VARARGS, NULL},
	 { "ostream_flush", _wrap_ostream_flush, METH_O, NULL},
	 { "ostream_tellp", _wrap_ostream_tellp, METH_O, NULL},
	 { "ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, NULL},
	 { "ostream_swigregister", ostream_swigregister, METH_O, NULL},
	 { "ostream_swiginit", ostream_swiginit, METH_VARARGS, NULL},
	 { "new_istream", _wrap_new_istream, METH_O, NULL},
	 { "delete_istream", _wrap_delete_istream, METH_O, NULL},
	 { "istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, NULL},
	 { "istream_gcount", _wrap_istream_gcount, METH_O, NULL},
	 { "istream_get", _wrap_istream_get, METH_VARARGS, NULL},
	 { "istream_getline", _wrap_istream_getline, METH_VARARGS, NULL},
	 { "istream_ignore", _wrap_istream_ignore, METH_VARARGS, NULL},
	 { "istream_peek", _wrap_istream_peek, METH_O, NULL},
	 { "istream_read", _wrap_istream_read, METH_VARARGS, NULL},
	 { "istream_readsome", _wrap_istream_readsome, METH_VARARGS, NULL},
	 { "istream_putback", _wrap_istream_putback, METH_VARARGS, NULL},
	 { "istream_unget", _wrap_istream_unget, METH_O, NULL},
	 { "istream_sync", _wrap_istream_sync, METH_O, NULL},
	 { "istream_tellg", _wrap_istream_tellg, METH_O, NULL},
	 { "istream_seekg", _wrap_istream_seekg, METH_VARARGS, NULL},
	 { "istream_swigregister", istream_swigregister, METH_O, NULL},
	 { "istream_swiginit", istream_swiginit, METH_VARARGS, NULL},
	 { "new_iostream", _wrap_new_iostream, METH_O, NULL},
	 { "delete_iostream", _wrap_delete_iostream, METH_O, NULL},
	 { "iostream_swigregister", iostream_swigregister, METH_O, NULL},
	 { "iostream_swiginit", iostream_swiginit, METH_VARARGS, NULL},
	 { "endl", _wrap_endl, METH_O, "swig_ptr: endl_cb_ptr"},
	 { "ends", _wrap_ends, METH_O, "swig_ptr: ends_cb_ptr"},
	 { "flush", _wrap_flush, METH_O, "swig_ptr: flush_cb_ptr"},
	 { "delete_prmMotionBase", _wrap_delete_prmMotionBase, METH_O, "delete_prmMotionBase(prmMotionBase self)"},
	 { "prmMotionBase_SetBaseParameter", _wrap_prmMotionBase_SetBaseParameter, METH_VARARGS, "prmMotionBase_SetBaseParameter(prmMotionBase self, prmBlocking const & blockingFlag, bool const & blendingFactor, double const & timeLimit, bool const & isPreemptable, bool const & isCoordinated, bool const & isGoalOnly)"},
	 { "prmMotionBase_SetBlockingFlag", _wrap_prmMotionBase_SetBlockingFlag, METH_VARARGS, "prmMotionBase_SetBlockingFlag(prmMotionBase self, prmBlocking const & newValue)"},
	 { "prmMotionBase_BlockingFlag", _wrap_prmMotionBase_BlockingFlag, METH_VARARGS, "\n"
		"prmMotionBase_BlockingFlag(prmMotionBase self) -> prmBlocking const\n"
		"prmMotionBase_BlockingFlag(prmMotionBase self) -> prmBlocking &\n"
		""},
	 { "prmMotionBase_GetBlockingFlag", _wrap_prmMotionBase_GetBlockingFlag, METH_VARARGS, "\n"
		"prmMotionBase_GetBlockingFlag(prmMotionBase self, prmBlocking & placeHolder)\n"
		"prmMotionBase_GetBlockingFlag(prmMotionBase self) -> prmBlocking const &\n"
		""},
	 { "prmMotionBase_SetBlendingFactor", _wrap_prmMotionBase_SetBlendingFactor, METH_VARARGS, "prmMotionBase_SetBlendingFactor(prmMotionBase self, bool const & newValue)"},
	 { "prmMotionBase_BlendingFactor", _wrap_prmMotionBase_BlendingFactor, METH_VARARGS, "\n"
		"prmMotionBase_BlendingFactor(prmMotionBase self) -> bool const\n"
		"prmMotionBase_BlendingFactor(prmMotionBase self) -> bool &\n"
		""},
	 { "prmMotionBase_GetBlendingFactor", _wrap_prmMotionBase_GetBlendingFactor, METH_VARARGS, "\n"
		"prmMotionBase_GetBlendingFactor(prmMotionBase self, bool & placeHolder)\n"
		"prmMotionBase_GetBlendingFactor(prmMotionBase self) -> bool const &\n"
		""},
	 { "prmMotionBase_SetTimeLimit", _wrap_prmMotionBase_SetTimeLimit, METH_VARARGS, "prmMotionBase_SetTimeLimit(prmMotionBase self, double const & newValue)"},
	 { "prmMotionBase_TimeLimit", _wrap_prmMotionBase_TimeLimit, METH_VARARGS, "\n"
		"prmMotionBase_TimeLimit(prmMotionBase self) -> double const\n"
		"prmMotionBase_TimeLimit(prmMotionBase self) -> double &\n"
		""},
	 { "prmMotionBase_GetTimeLimit", _wrap_prmMotionBase_GetTimeLimit, METH_VARARGS, "\n"
		"prmMotionBase_GetTimeLimit(prmMotionBase self, double & placeHolder)\n"
		"prmMotionBase_GetTimeLimit(prmMotionBase self) -> double const &\n"
		""},
	 { "prmMotionBase_SetIsPreemptable", _wrap_prmMotionBase_SetIsPreemptable, METH_VARARGS, "prmMotionBase_SetIsPreemptable(prmMotionBase self, bool const & newValue)"},
	 { "prmMotionBase_IsPreemptable", _wrap_prmMotionBase_IsPreemptable, METH_VARARGS, "\n"
		"prmMotionBase_IsPreemptable(prmMotionBase self) -> bool const\n"
		"prmMotionBase_IsPreemptable(prmMotionBase self) -> bool &\n"
		""},
	 { "prmMotionBase_GetIsPreemptable", _wrap_prmMotionBase_GetIsPreemptable, METH_VARARGS, "\n"
		"prmMotionBase_GetIsPreemptable(prmMotionBase self, bool & placeHolder)\n"
		"prmMotionBase_GetIsPreemptable(prmMotionBase self) -> bool const &\n"
		""},
	 { "prmMotionBase_SetIsCoordinated", _wrap_prmMotionBase_SetIsCoordinated, METH_VARARGS, "prmMotionBase_SetIsCoordinated(prmMotionBase self, bool const & newValue)"},
	 { "prmMotionBase_IsCoordinated", _wrap_prmMotionBase_IsCoordinated, METH_VARARGS, "\n"
		"prmMotionBase_IsCoordinated(prmMotionBase self) -> bool const\n"
		"prmMotionBase_IsCoordinated(prmMotionBase self) -> bool &\n"
		""},
	 { "prmMotionBase_GetIsCoordinated", _wrap_prmMotionBase_GetIsCoordinated, METH_VARARGS, "\n"
		"prmMotionBase_GetIsCoordinated(prmMotionBase self, bool & placeHolder)\n"
		"prmMotionBase_GetIsCoordinated(prmMotionBase self) -> bool const &\n"
		""},
	 { "prmMotionBase_SetIsGoalOnly", _wrap_prmMotionBase_SetIsGoalOnly, METH_VARARGS, "prmMotionBase_SetIsGoalOnly(prmMotionBase self, bool const & newValue)"},
	 { "prmMotionBase_IsGoalOnly", _wrap_prmMotionBase_IsGoalOnly, METH_VARARGS, "\n"
		"prmMotionBase_IsGoalOnly(prmMotionBase self) -> bool const\n"
		"prmMotionBase_IsGoalOnly(prmMotionBase self) -> bool &\n"
		""},
	 { "prmMotionBase_GetIsGoalOnly", _wrap_prmMotionBase_GetIsGoalOnly, METH_VARARGS, "\n"
		"prmMotionBase_GetIsGoalOnly(prmMotionBase self, bool & placeHolder)\n"
		"prmMotionBase_GetIsGoalOnly(prmMotionBase self) -> bool const &\n"
		""},
	 { "prmMotionBase_swigregister", prmMotionBase_swigregister, METH_O, NULL},
	 { "prmEventButton_ClassServices", _wrap_prmEventButton_ClassServices, METH_NOARGS, "prmEventButton_ClassServices() -> cmnClassServicesBase"},
	 { "new_prmEventButton", _wrap_new_prmEventButton, METH_VARARGS, "\n"
		"prmEventButton()\n"
		"prmEventButton(prmEventButton::EventType const & type)\n"
		"new_prmEventButton(prmEventButton other) -> prmEventButton\n"
		""},
	 { "delete_prmEventButton", _wrap_delete_prmEventButton, METH_O, "delete_prmEventButton(prmEventButton self)"},
	 { "prmEventButton_SetType", _wrap_prmEventButton_SetType, METH_VARARGS, "prmEventButton_SetType(prmEventButton self, prmEventButton::EventType const & newValue)"},
	 { "prmEventButton_Type", _wrap_prmEventButton_Type, METH_VARARGS, "\n"
		"prmEventButton_Type(prmEventButton self) -> prmEventButton::EventType const\n"
		"prmEventButton_Type(prmEventButton self) -> prmEventButton::EventType &\n"
		""},
	 { "prmEventButton_GetType", _wrap_prmEventButton_GetType, METH_VARARGS, "\n"
		"prmEventButton_GetType(prmEventButton self, prmEventButton::EventType & placeHolder)\n"
		"prmEventButton_GetType(prmEventButton self) -> prmEventButton::EventType const &\n"
		""},
	 { "prmEventButton_swigregister", prmEventButton_swigregister, METH_O, NULL},
	 { "prmEventButton_swiginit", prmEventButton_swiginit, METH_VARARGS, NULL},
	 { "new_prmPositionCartesianGet", _wrap_new_prmPositionCartesianGet, METH_VARARGS, "\n"
		"prmPositionCartesianGet()\n"
		"new_prmPositionCartesianGet(prmPositionCartesianGet other) -> prmPositionCartesianGet\n"
		""},
	 { "delete_prmPositionCartesianGet", _wrap_delete_prmPositionCartesianGet, METH_O, "delete_prmPositionCartesianGet(prmPositionCartesianGet self)"},
	 { "prmPositionCartesianGet_GetMovingFrame", _wrap_prmPositionCartesianGet_GetMovingFrame, METH_VARARGS, "prmPositionCartesianGet_GetMovingFrame(prmPositionCartesianGet self, std::string & placeHolder)"},
	 { "prmPositionCartesianGet_SetMovingFrame", _wrap_prmPositionCartesianGet_SetMovingFrame, METH_VARARGS, "prmPositionCartesianGet_SetMovingFrame(prmPositionCartesianGet self, std::string const & newValue)"},
	 { "prmPositionCartesianGet_MovingFrame", _wrap_prmPositionCartesianGet_MovingFrame, METH_VARARGS, "\n"
		"prmPositionCartesianGet_MovingFrame(prmPositionCartesianGet self) -> std::string const\n"
		"prmPositionCartesianGet_MovingFrame(prmPositionCartesianGet self) -> std::string &\n"
		""},
	 { "prmPositionCartesianGet_GetReferenceFrame", _wrap_prmPositionCartesianGet_GetReferenceFrame, METH_VARARGS, "prmPositionCartesianGet_GetReferenceFrame(prmPositionCartesianGet self, std::string & placeHolder)"},
	 { "prmPositionCartesianGet_SetReferenceFrame", _wrap_prmPositionCartesianGet_SetReferenceFrame, METH_VARARGS, "prmPositionCartesianGet_SetReferenceFrame(prmPositionCartesianGet self, std::string const & newValue)"},
	 { "prmPositionCartesianGet_ReferenceFrame", _wrap_prmPositionCartesianGet_ReferenceFrame, METH_VARARGS, "\n"
		"prmPositionCartesianGet_ReferenceFrame(prmPositionCartesianGet self) -> std::string const\n"
		"prmPositionCartesianGet_ReferenceFrame(prmPositionCartesianGet self) -> std::string &\n"
		""},
	 { "prmPositionCartesianGet_GetPosition", _wrap_prmPositionCartesianGet_GetPosition, METH_VARARGS, "prmPositionCartesianGet_GetPosition(prmPositionCartesianGet self, vctFrm3 placeHolder)"},
	 { "prmPositionCartesianGet_SetPosition", _wrap_prmPositionCartesianGet_SetPosition, METH_VARARGS, "prmPositionCartesianGet_SetPosition(prmPositionCartesianGet self, vctFrm3 newValue)"},
	 { "prmPositionCartesianGet_Position", _wrap_prmPositionCartesianGet_Position, METH_VARARGS, "\n"
		"prmPositionCartesianGet_Position(prmPositionCartesianGet self) -> vctFrm3\n"
		"prmPositionCartesianGet_Position(prmPositionCartesianGet self) -> vctFrm3\n"
		""},
	 { "prmPositionCartesianGet_ClassServices", _wrap_prmPositionCartesianGet_ClassServices, METH_NOARGS, "prmPositionCartesianGet_ClassServices() -> cmnClassServicesBase"},
	 { "prmPositionCartesianGet_Copy", _wrap_prmPositionCartesianGet_Copy, METH_VARARGS, "prmPositionCartesianGet_Copy(prmPositionCartesianGet self, prmPositionCartesianGet source)"},
	 { "prmPositionCartesianGet_SerializeBinary", _wrap_prmPositionCartesianGet_SerializeBinary, METH_VARARGS, "prmPositionCartesianGet_SerializeBinary(prmPositionCartesianGet self, ostream outputStream)"},
	 { "prmPositionCartesianGet_DeSerializeBinary", _wrap_prmPositionCartesianGet_DeSerializeBinary, METH_VARARGS, "prmPositionCartesianGet_DeSerializeBinary(prmPositionCartesianGet self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"},
	 { "prmPositionCartesianGet_SerializeText", _wrap_prmPositionCartesianGet_SerializeText, METH_VARARGS, "prmPositionCartesianGet_SerializeText(prmPositionCartesianGet self, ostream outputStream, char const delimiter=',')"},
	 { "prmPositionCartesianGet_SerializeDescription", _wrap_prmPositionCartesianGet_SerializeDescription, METH_VARARGS, "prmPositionCartesianGet_SerializeDescription(prmPositionCartesianGet self, char const delimiter=',', std::string const & userDescription=\"\") -> std::string"},
	 { "prmPositionCartesianGet_DeSerializeText", _wrap_prmPositionCartesianGet_DeSerializeText, METH_VARARGS, "prmPositionCartesianGet_DeSerializeText(prmPositionCartesianGet self, istream inputStream, char const delimiter=',')"},
	 { "prmPositionCartesianGet___str__", _wrap_prmPositionCartesianGet___str__, METH_O, "prmPositionCartesianGet___str__(prmPositionCartesianGet self) -> std::string"},
	 { "prmPositionCartesianGet_ScalarDescription", _wrap_prmPositionCartesianGet_ScalarDescription, METH_VARARGS, "prmPositionCartesianGet_ScalarDescription(prmPositionCartesianGet self, size_t const index, std::string const & userDescription=\"\") -> std::string"},
	 { "prmPositionCartesianGet_swigregister", prmPositionCartesianGet_swigregister, METH_O, NULL},
	 { "prmPositionCartesianGet_swiginit", prmPositionCartesianGet_swiginit, METH_VARARGS, NULL},
	 { "prmPositionCartesianSet_ClassServices", _wrap_prmPositionCartesianSet_ClassServices, METH_NOARGS, "prmPositionCartesianSet_ClassServices() -> cmnClassServicesBase"},
	 { "prmPositionCartesianSet_SetMovingFrame", _wrap_prmPositionCartesianSet_SetMovingFrame, METH_VARARGS, "prmPositionCartesianSet_SetMovingFrame(prmPositionCartesianSet self, std::string const & newValue)"},
	 { "prmPositionCartesianSet_MovingFrame", _wrap_prmPositionCartesianSet_MovingFrame, METH_VARARGS, "\n"
		"prmPositionCartesianSet_MovingFrame(prmPositionCartesianSet self) -> std::string const\n"
		"prmPositionCartesianSet_MovingFrame(prmPositionCartesianSet self) -> std::string &\n"
		""},
	 { "prmPositionCartesianSet_GetMovingFrame", _wrap_prmPositionCartesianSet_GetMovingFrame, METH_VARARGS, "\n"
		"prmPositionCartesianSet_GetMovingFrame(prmPositionCartesianSet self, std::string & placeHolder)\n"
		"prmPositionCartesianSet_GetMovingFrame(prmPositionCartesianSet self) -> std::string const &\n"
		""},
	 { "prmPositionCartesianSet_SetReferenceFrame", _wrap_prmPositionCartesianSet_SetReferenceFrame, METH_VARARGS, "prmPositionCartesianSet_SetReferenceFrame(prmPositionCartesianSet self, std::string const & newValue)"},
	 { "prmPositionCartesianSet_ReferenceFrame", _wrap_prmPositionCartesianSet_ReferenceFrame, METH_VARARGS, "\n"
		"prmPositionCartesianSet_ReferenceFrame(prmPositionCartesianSet self) -> std::string const\n"
		"prmPositionCartesianSet_ReferenceFrame(prmPositionCartesianSet self) -> std::string &\n"
		""},
	 { "prmPositionCartesianSet_GetReferenceFrame", _wrap_prmPositionCartesianSet_GetReferenceFrame, METH_VARARGS, "\n"
		"prmPositionCartesianSet_GetReferenceFrame(prmPositionCartesianSet self, std::string & placeHolder)\n"
		"prmPositionCartesianSet_GetReferenceFrame(prmPositionCartesianSet self) -> std::string const &\n"
		""},
	 { "new_prmPositionCartesianSet", _wrap_new_prmPositionCartesianSet, METH_VARARGS, "\n"
		"prmPositionCartesianSet()\n"
		"new_prmPositionCartesianSet(vctFrm3 goal, vctDouble3 const & velocity, vctDouble3 const & velocityAngular, vctDouble3 const & acceleration, vctDouble3 const & accelerationAngular, vctBool2 const & mask) -> prmPositionCartesianSet\n"
		""},
	 { "delete_prmPositionCartesianSet", _wrap_delete_prmPositionCartesianSet, METH_O, "delete_prmPositionCartesianSet(prmPositionCartesianSet self)"},
	 { "prmPositionCartesianSet_Goal", _wrap_prmPositionCartesianSet_Goal, METH_VARARGS, "\n"
		"prmPositionCartesianSet_Goal(prmPositionCartesianSet self) -> vctFrm3\n"
		"prmPositionCartesianSet_Goal(prmPositionCartesianSet self) -> vctFrm3\n"
		""},
	 { "prmPositionCartesianSet_SetGoal", _wrap_prmPositionCartesianSet_SetGoal, METH_VARARGS, "\n"
		"prmPositionCartesianSet_SetGoal(prmPositionCartesianSet self, vctFrm3 goal, vctBool2 const & mask)\n"
		"prmPositionCartesianSet_SetGoal(prmPositionCartesianSet self, vctFrm3 goal)\n"
		"prmPositionCartesianSet_SetGoal(prmPositionCartesianSet self, vctDouble3 const & position)\n"
		"prmPositionCartesianSet_SetGoal(prmPositionCartesianSet self, vctDoubleRot3 const & orientation)\n"
		""},
	 { "prmPositionCartesianSet_GetGoal", _wrap_prmPositionCartesianSet_GetGoal, METH_O, "prmPositionCartesianSet_GetGoal(prmPositionCartesianSet self) -> vctFrm3"},
	 { "prmPositionCartesianSet_SetVelocity", _wrap_prmPositionCartesianSet_SetVelocity, METH_VARARGS, "prmPositionCartesianSet_SetVelocity(prmPositionCartesianSet self, vctDouble3 const & velocity)"},
	 { "prmPositionCartesianSet_GetVelocity", _wrap_prmPositionCartesianSet_GetVelocity, METH_O, "prmPositionCartesianSet_GetVelocity(prmPositionCartesianSet self) -> vctDouble3"},
	 { "prmPositionCartesianSet_SetAngularVelocity", _wrap_prmPositionCartesianSet_SetAngularVelocity, METH_VARARGS, "prmPositionCartesianSet_SetAngularVelocity(prmPositionCartesianSet self, vctDouble3 const & velocityAngular)"},
	 { "prmPositionCartesianSet_GetAngularVelocity", _wrap_prmPositionCartesianSet_GetAngularVelocity, METH_O, "prmPositionCartesianSet_GetAngularVelocity(prmPositionCartesianSet self) -> vctDouble3"},
	 { "prmPositionCartesianSet_SetAcceleration", _wrap_prmPositionCartesianSet_SetAcceleration, METH_VARARGS, "prmPositionCartesianSet_SetAcceleration(prmPositionCartesianSet self, vctDouble3 const & acceleration)"},
	 { "prmPositionCartesianSet_GetAcceleration", _wrap_prmPositionCartesianSet_GetAcceleration, METH_O, "prmPositionCartesianSet_GetAcceleration(prmPositionCartesianSet self) -> vctDouble3"},
	 { "prmPositionCartesianSet_SetAngularAcceleration", _wrap_prmPositionCartesianSet_SetAngularAcceleration, METH_VARARGS, "prmPositionCartesianSet_SetAngularAcceleration(prmPositionCartesianSet self, vctDouble3 const & accelerationAngular)"},
	 { "prmPositionCartesianSet_GetAngularAcceleration", _wrap_prmPositionCartesianSet_GetAngularAcceleration, METH_O, "prmPositionCartesianSet_GetAngularAcceleration(prmPositionCartesianSet self) -> vctDouble3"},
	 { "prmPositionCartesianSet_SetMask", _wrap_prmPositionCartesianSet_SetMask, METH_VARARGS, "prmPositionCartesianSet_SetMask(prmPositionCartesianSet self, vctBool2 const & mask)"},
	 { "prmPositionCartesianSet_GetMask", _wrap_prmPositionCartesianSet_GetMask, METH_O, "prmPositionCartesianSet_GetMask(prmPositionCartesianSet self) -> vctBool2"},
	 { "prmPositionCartesianSet_swigregister", prmPositionCartesianSet_swigregister, METH_O, NULL},
	 { "prmPositionCartesianSet_swiginit", prmPositionCartesianSet_swiginit, METH_VARARGS, NULL},
	 { "new_prmVelocityCartesianGet", _wrap_new_prmVelocityCartesianGet, METH_VARARGS, "\n"
		"prmVelocityCartesianGet()\n"
		"new_prmVelocityCartesianGet(prmVelocityCartesianGet other) -> prmVelocityCartesianGet\n"
		""},
	 { "delete_prmVelocityCartesianGet", _wrap_delete_prmVelocityCartesianGet, METH_O, "delete_prmVelocityCartesianGet(prmVelocityCartesianGet self)"},
	 { "prmVelocityCartesianGet_GetVelocityLinear", _wrap_prmVelocityCartesianGet_GetVelocityLinear, METH_VARARGS, "prmVelocityCartesianGet_GetVelocityLinear(prmVelocityCartesianGet self, vct3 & placeHolder)"},
	 { "prmVelocityCartesianGet_SetVelocityLinear", _wrap_prmVelocityCartesianGet_SetVelocityLinear, METH_VARARGS, "prmVelocityCartesianGet_SetVelocityLinear(prmVelocityCartesianGet self, vct3 const & newValue)"},
	 { "prmVelocityCartesianGet_VelocityLinear", _wrap_prmVelocityCartesianGet_VelocityLinear, METH_VARARGS, "\n"
		"prmVelocityCartesianGet_VelocityLinear(prmVelocityCartesianGet self) -> vct3 const\n"
		"prmVelocityCartesianGet_VelocityLinear(prmVelocityCartesianGet self) -> vct3 &\n"
		""},
	 { "prmVelocityCartesianGet_GetVelocityAngular", _wrap_prmVelocityCartesianGet_GetVelocityAngular, METH_VARARGS, "prmVelocityCartesianGet_GetVelocityAngular(prmVelocityCartesianGet self, vct3 & placeHolder)"},
	 { "prmVelocityCartesianGet_SetVelocityAngular", _wrap_prmVelocityCartesianGet_SetVelocityAngular, METH_VARARGS, "prmVelocityCartesianGet_SetVelocityAngular(prmVelocityCartesianGet self, vct3 const & newValue)"},
	 { "prmVelocityCartesianGet_VelocityAngular", _wrap_prmVelocityCartesianGet_VelocityAngular, METH_VARARGS, "\n"
		"prmVelocityCartesianGet_VelocityAngular(prmVelocityCartesianGet self) -> vct3 const\n"
		"prmVelocityCartesianGet_VelocityAngular(prmVelocityCartesianGet self) -> vct3 &\n"
		""},
	 { "prmVelocityCartesianGet_GetMovingFrame", _wrap_prmVelocityCartesianGet_GetMovingFrame, METH_VARARGS, "prmVelocityCartesianGet_GetMovingFrame(prmVelocityCartesianGet self, std::string & placeHolder)"},
	 { "prmVelocityCartesianGet_SetMovingFrame", _wrap_prmVelocityCartesianGet_SetMovingFrame, METH_VARARGS, "prmVelocityCartesianGet_SetMovingFrame(prmVelocityCartesianGet self, std::string const & newValue)"},
	 { "prmVelocityCartesianGet_MovingFrame", _wrap_prmVelocityCartesianGet_MovingFrame, METH_VARARGS, "\n"
		"prmVelocityCartesianGet_MovingFrame(prmVelocityCartesianGet self) -> std::string const\n"
		"prmVelocityCartesianGet_MovingFrame(prmVelocityCartesianGet self) -> std::string &\n"
		""},
	 { "prmVelocityCartesianGet_GetReferenceFrame", _wrap_prmVelocityCartesianGet_GetReferenceFrame, METH_VARARGS, "prmVelocityCartesianGet_GetReferenceFrame(prmVelocityCartesianGet self, std::string & placeHolder)"},
	 { "prmVelocityCartesianGet_SetReferenceFrame", _wrap_prmVelocityCartesianGet_SetReferenceFrame, METH_VARARGS, "prmVelocityCartesianGet_SetReferenceFrame(prmVelocityCartesianGet self, std::string const & newValue)"},
	 { "prmVelocityCartesianGet_ReferenceFrame", _wrap_prmVelocityCartesianGet_ReferenceFrame, METH_VARARGS, "\n"
		"prmVelocityCartesianGet_ReferenceFrame(prmVelocityCartesianGet self) -> std::string const\n"
		"prmVelocityCartesianGet_ReferenceFrame(prmVelocityCartesianGet self) -> std::string &\n"
		""},
	 { "prmVelocityCartesianGet_ClassServices", _wrap_prmVelocityCartesianGet_ClassServices, METH_NOARGS, "prmVelocityCartesianGet_ClassServices() -> cmnClassServicesBase"},
	 { "prmVelocityCartesianGet_SetVelocity", _wrap_prmVelocityCartesianGet_SetVelocity, METH_VARARGS, "prmVelocityCartesianGet_SetVelocity(prmVelocityCartesianGet self, vct6 const & newValue)"},
	 { "prmVelocityCartesianGet_GetVelocity", _wrap_prmVelocityCartesianGet_GetVelocity, METH_VARARGS, "prmVelocityCartesianGet_GetVelocity(prmVelocityCartesianGet self, vct6 & placeHolder)"},
	 { "prmVelocityCartesianGet_Copy", _wrap_prmVelocityCartesianGet_Copy, METH_VARARGS, "prmVelocityCartesianGet_Copy(prmVelocityCartesianGet self, prmVelocityCartesianGet source)"},
	 { "prmVelocityCartesianGet_SerializeBinary", _wrap_prmVelocityCartesianGet_SerializeBinary, METH_VARARGS, "prmVelocityCartesianGet_SerializeBinary(prmVelocityCartesianGet self, ostream outputStream)"},
	 { "prmVelocityCartesianGet_DeSerializeBinary", _wrap_prmVelocityCartesianGet_DeSerializeBinary, METH_VARARGS, "prmVelocityCartesianGet_DeSerializeBinary(prmVelocityCartesianGet self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"},
	 { "prmVelocityCartesianGet_SerializeText", _wrap_prmVelocityCartesianGet_SerializeText, METH_VARARGS, "prmVelocityCartesianGet_SerializeText(prmVelocityCartesianGet self, ostream outputStream, char const delimiter=',')"},
	 { "prmVelocityCartesianGet_SerializeDescription", _wrap_prmVelocityCartesianGet_SerializeDescription, METH_VARARGS, "prmVelocityCartesianGet_SerializeDescription(prmVelocityCartesianGet self, char const delimiter=',', std::string const & userDescription=\"\") -> std::string"},
	 { "prmVelocityCartesianGet_DeSerializeText", _wrap_prmVelocityCartesianGet_DeSerializeText, METH_VARARGS, "prmVelocityCartesianGet_DeSerializeText(prmVelocityCartesianGet self, istream inputStream, char const delimiter=',')"},
	 { "prmVelocityCartesianGet___str__", _wrap_prmVelocityCartesianGet___str__, METH_O, "prmVelocityCartesianGet___str__(prmVelocityCartesianGet self) -> std::string"},
	 { "prmVelocityCartesianGet_ScalarDescription", _wrap_prmVelocityCartesianGet_ScalarDescription, METH_VARARGS, "prmVelocityCartesianGet_ScalarDescription(prmVelocityCartesianGet self, size_t const index, std::string const & userDescription=\"\") -> std::string"},
	 { "prmVelocityCartesianGet_swigregister", prmVelocityCartesianGet_swigregister, METH_O, NULL},
	 { "prmVelocityCartesianGet_swiginit", prmVelocityCartesianGet_swiginit, METH_VARARGS, NULL},
	 { "prmVelocityCartesianSet_ClassServices", _wrap_prmVelocityCartesianSet_ClassServices, METH_NOARGS, "prmVelocityCartesianSet_ClassServices() -> cmnClassServicesBase"},
	 { "new_prmVelocityCartesianSet", _wrap_new_prmVelocityCartesianSet, METH_VARARGS, "\n"
		"prmVelocityCartesianSet()\n"
		"new_prmVelocityCartesianSet(vctDouble3 const & velocity, vctDouble3 const & velocityAngular, vctDouble3 const & acceleration, vctDouble3 const & accelerationAngular, vctBool6 const & mask) -> prmVelocityCartesianSet\n"
		""},
	 { "delete_prmVelocityCartesianSet", _wrap_delete_prmVelocityCartesianSet, METH_O, "delete_prmVelocityCartesianSet(prmVelocityCartesianSet self)"},
	 { "prmVelocityCartesianSet_SetGoal", _wrap_prmVelocityCartesianSet_SetGoal, METH_VARARGS, "prmVelocityCartesianSet_SetGoal(prmVelocityCartesianSet self, vctDouble6 const & velocities)"},
	 { "prmVelocityCartesianSet_SetTranslationGoal", _wrap_prmVelocityCartesianSet_SetTranslationGoal, METH_VARARGS, "prmVelocityCartesianSet_SetTranslationGoal(prmVelocityCartesianSet self, vctDouble3 const & velocity)"},
	 { "prmVelocityCartesianSet_SetRotationGoal", _wrap_prmVelocityCartesianSet_SetRotationGoal, METH_VARARGS, "prmVelocityCartesianSet_SetRotationGoal(prmVelocityCartesianSet self, vctDouble3 const & velocityAngular)"},
	 { "prmVelocityCartesianSet_GetGoal", _wrap_prmVelocityCartesianSet_GetGoal, METH_O, "prmVelocityCartesianSet_GetGoal(prmVelocityCartesianSet self) -> vctDouble3"},
	 { "prmVelocityCartesianSet_SetVelocity", _wrap_prmVelocityCartesianSet_SetVelocity, METH_VARARGS, "prmVelocityCartesianSet_SetVelocity(prmVelocityCartesianSet self, vctDouble3 const & velocity)"},
	 { "prmVelocityCartesianSet_GetVelocity", _wrap_prmVelocityCartesianSet_GetVelocity, METH_O, "prmVelocityCartesianSet_GetVelocity(prmVelocityCartesianSet self) -> vctDouble3"},
	 { "prmVelocityCartesianSet_SetAngularVelocity", _wrap_prmVelocityCartesianSet_SetAngularVelocity, METH_VARARGS, "prmVelocityCartesianSet_SetAngularVelocity(prmVelocityCartesianSet self, vctDouble3 const & velocityAngular)"},
	 { "prmVelocityCartesianSet_GetAngularVelocity", _wrap_prmVelocityCartesianSet_GetAngularVelocity, METH_O, "prmVelocityCartesianSet_GetAngularVelocity(prmVelocityCartesianSet self) -> vctDouble3"},
	 { "prmVelocityCartesianSet_SetAcceleration", _wrap_prmVelocityCartesianSet_SetAcceleration, METH_VARARGS, "prmVelocityCartesianSet_SetAcceleration(prmVelocityCartesianSet self, vctDouble3 const & acceleration)"},
	 { "prmVelocityCartesianSet_GetAcceleration", _wrap_prmVelocityCartesianSet_GetAcceleration, METH_O, "prmVelocityCartesianSet_GetAcceleration(prmVelocityCartesianSet self) -> vctDouble3"},
	 { "prmVelocityCartesianSet_SetAngularAcceleration", _wrap_prmVelocityCartesianSet_SetAngularAcceleration, METH_VARARGS, "prmVelocityCartesianSet_SetAngularAcceleration(prmVelocityCartesianSet self, vctDouble3 const & accelerationAngular)"},
	 { "prmVelocityCartesianSet_GetAngularAcceleration", _wrap_prmVelocityCartesianSet_GetAngularAcceleration, METH_O, "prmVelocityCartesianSet_GetAngularAcceleration(prmVelocityCartesianSet self) -> vctDouble3"},
	 { "prmVelocityCartesianSet_SetMask", _wrap_prmVelocityCartesianSet_SetMask, METH_VARARGS, "prmVelocityCartesianSet_SetMask(prmVelocityCartesianSet self, vctBool6 const & mask)"},
	 { "prmVelocityCartesianSet_GetMask", _wrap_prmVelocityCartesianSet_GetMask, METH_O, "prmVelocityCartesianSet_GetMask(prmVelocityCartesianSet self) -> vctBool6"},
	 { "prmVelocityCartesianSet_swigregister", prmVelocityCartesianSet_swigregister, METH_O, NULL},
	 { "prmVelocityCartesianSet_swiginit", prmVelocityCartesianSet_swiginit, METH_VARARGS, NULL},
	 { "prmForceCartesianGet_ClassServices", _wrap_prmForceCartesianGet_ClassServices, METH_NOARGS, "prmForceCartesianGet_ClassServices() -> cmnClassServicesBase"},
	 { "new_prmForceCartesianGet", _wrap_new_prmForceCartesianGet, METH_VARARGS, "\n"
		"prmForceCartesianGet()\n"
		"new_prmForceCartesianGet(vctDouble6 const & force) -> prmForceCartesianGet\n"
		""},
	 { "delete_prmForceCartesianGet", _wrap_delete_prmForceCartesianGet, METH_O, "delete_prmForceCartesianGet(prmForceCartesianGet self)"},
	 { "prmForceCartesianGet_SetForce", _wrap_prmForceCartesianGet_SetForce, METH_VARARGS, "prmForceCartesianGet_SetForce(prmForceCartesianGet self, vctDouble6 const & newValue)"},
	 { "prmForceCartesianGet_Force", _wrap_prmForceCartesianGet_Force, METH_VARARGS, "\n"
		"prmForceCartesianGet_Force(prmForceCartesianGet self) -> vctDouble6 const\n"
		"prmForceCartesianGet_Force(prmForceCartesianGet self) -> vctDouble6 &\n"
		""},
	 { "prmForceCartesianGet_GetForce", _wrap_prmForceCartesianGet_GetForce, METH_VARARGS, "\n"
		"prmForceCartesianGet_GetForce(prmForceCartesianGet self, vctDouble6 & placeHolder)\n"
		"prmForceCartesianGet_GetForce(prmForceCartesianGet self) -> vctDouble6 const &\n"
		""},
	 { "prmForceCartesianGet_SetMask", _wrap_prmForceCartesianGet_SetMask, METH_VARARGS, "prmForceCartesianGet_SetMask(prmForceCartesianGet self, vctBool6 const & newValue)"},
	 { "prmForceCartesianGet_Mask", _wrap_prmForceCartesianGet_Mask, METH_VARARGS, "\n"
		"prmForceCartesianGet_Mask(prmForceCartesianGet self) -> vctBool6 const\n"
		"prmForceCartesianGet_Mask(prmForceCartesianGet self) -> vctBool6 &\n"
		""},
	 { "prmForceCartesianGet_GetMask", _wrap_prmForceCartesianGet_GetMask, METH_VARARGS, "\n"
		"prmForceCartesianGet_GetMask(prmForceCartesianGet self, vctBool6 & placeHolder)\n"
		"prmForceCartesianGet_GetMask(prmForceCartesianGet self) -> vctBool6 const &\n"
		""},
	 { "prmForceCartesianGet_SetMovingFrame", _wrap_prmForceCartesianGet_SetMovingFrame, METH_VARARGS, "prmForceCartesianGet_SetMovingFrame(prmForceCartesianGet self, std::string const & newValue)"},
	 { "prmForceCartesianGet_MovingFrame", _wrap_prmForceCartesianGet_MovingFrame, METH_VARARGS, "\n"
		"prmForceCartesianGet_MovingFrame(prmForceCartesianGet self) -> std::string const\n"
		"prmForceCartesianGet_MovingFrame(prmForceCartesianGet self) -> std::string &\n"
		""},
	 { "prmForceCartesianGet_GetMovingFrame", _wrap_prmForceCartesianGet_GetMovingFrame, METH_VARARGS, "\n"
		"prmForceCartesianGet_GetMovingFrame(prmForceCartesianGet self, std::string & placeHolder)\n"
		"prmForceCartesianGet_GetMovingFrame(prmForceCartesianGet self) -> std::string const &\n"
		""},
	 { "prmForceCartesianGet_F", _wrap_prmForceCartesianGet_F, METH_VARARGS, "\n"
		"prmForceCartesianGet_F(prmForceCartesianGet self) -> prmForceCartesianGet::ConstForceType\n"
		"prmForceCartesianGet_F(prmForceCartesianGet self) -> prmForceCartesianGet::ForceType\n"
		""},
	 { "prmForceCartesianGet_T", _wrap_prmForceCartesianGet_T, METH_VARARGS, "\n"
		"prmForceCartesianGet_T(prmForceCartesianGet self) -> prmForceCartesianGet::ConstTorqueType\n"
		"prmForceCartesianGet_T(prmForceCartesianGet self) -> prmForceCartesianGet::TorqueType\n"
		""},
	 { "prmForceCartesianGet_swigregister", prmForceCartesianGet_swigregister, METH_O, NULL},
	 { "prmForceCartesianGet_swiginit", prmForceCartesianGet_swiginit, METH_VARARGS, NULL},
	 { "prmForceCartesianSet_ClassServices", _wrap_prmForceCartesianSet_ClassServices, METH_NOARGS, "prmForceCartesianSet_ClassServices() -> cmnClassServicesBase"},
	 { "prmForceCartesianSet_SetForce", _wrap_prmForceCartesianSet_SetForce, METH_VARARGS, "prmForceCartesianSet_SetForce(prmForceCartesianSet self, prmForceCartesianSet::ForceType const & newValue)"},
	 { "prmForceCartesianSet_Force", _wrap_prmForceCartesianSet_Force, METH_VARARGS, "\n"
		"prmForceCartesianSet_Force(prmForceCartesianSet self) -> prmForceCartesianSet::ForceType const\n"
		"prmForceCartesianSet_Force(prmForceCartesianSet self) -> prmForceCartesianSet::ForceType &\n"
		""},
	 { "prmForceCartesianSet_GetForce", _wrap_prmForceCartesianSet_GetForce, METH_VARARGS, "\n"
		"prmForceCartesianSet_GetForce(prmForceCartesianSet self, prmForceCartesianSet::ForceType & placeHolder)\n"
		"prmForceCartesianSet_GetForce(prmForceCartesianSet self) -> prmForceCartesianSet::ForceType const &\n"
		""},
	 { "prmForceCartesianSet_SetMask", _wrap_prmForceCartesianSet_SetMask, METH_VARARGS, "prmForceCartesianSet_SetMask(prmForceCartesianSet self, prmForceCartesianSet::MaskType const & newValue)"},
	 { "prmForceCartesianSet_Mask", _wrap_prmForceCartesianSet_Mask, METH_VARARGS, "\n"
		"prmForceCartesianSet_Mask(prmForceCartesianSet self) -> prmForceCartesianSet::MaskType const\n"
		"prmForceCartesianSet_Mask(prmForceCartesianSet self) -> prmForceCartesianSet::MaskType &\n"
		""},
	 { "prmForceCartesianSet_GetMask", _wrap_prmForceCartesianSet_GetMask, METH_VARARGS, "\n"
		"prmForceCartesianSet_GetMask(prmForceCartesianSet self, prmForceCartesianSet::MaskType & placeHolder)\n"
		"prmForceCartesianSet_GetMask(prmForceCartesianSet self) -> prmForceCartesianSet::MaskType const &\n"
		""},
	 { "new_prmForceCartesianSet", _wrap_new_prmForceCartesianSet, METH_VARARGS, "\n"
		"prmForceCartesianSet()\n"
		"new_prmForceCartesianSet(prmForceCartesianSet::ForceType const & force, prmForceCartesianSet::MaskType const & mask) -> prmForceCartesianSet\n"
		""},
	 { "prmForceCartesianSet_SetAll", _wrap_prmForceCartesianSet_SetAll, METH_VARARGS, "prmForceCartesianSet_SetAll(prmForceCartesianSet self, double forceSet, bool mask)"},
	 { "delete_prmForceCartesianSet", _wrap_delete_prmForceCartesianSet, METH_O, "delete_prmForceCartesianSet(prmForceCartesianSet self)"},
	 { "prmForceCartesianSet_swigregister", prmForceCartesianSet_swigregister, METH_O, NULL},
	 { "prmForceCartesianSet_swiginit", prmForceCartesianSet_swiginit, METH_VARARGS, NULL},
	 { "delete_prmPositionJointGet", _wrap_delete_prmPositionJointGet, METH_O, "delete_prmPositionJointGet(prmPositionJointGet self)"},
	 { "prmPositionJointGet_GetPosition", _wrap_prmPositionJointGet_GetPosition, METH_VARARGS, "prmPositionJointGet_GetPosition(prmPositionJointGet self, vctDynamicVector< double > & placeHolder)"},
	 { "prmPositionJointGet_SetPosition", _wrap_prmPositionJointGet_SetPosition, METH_VARARGS, "prmPositionJointGet_SetPosition(prmPositionJointGet self, vctDynamicVector< double > const & newValue)"},
	 { "prmPositionJointGet_Position", _wrap_prmPositionJointGet_Position, METH_VARARGS, "\n"
		"prmPositionJointGet_Position(prmPositionJointGet self) -> vctDynamicVector< double > const\n"
		"prmPositionJointGet_Position(prmPositionJointGet self) -> vctDynamicVector< double > &\n"
		""},
	 { "prmPositionJointGet_GetTimestamps", _wrap_prmPositionJointGet_GetTimestamps, METH_VARARGS, "prmPositionJointGet_GetTimestamps(prmPositionJointGet self, vctDynamicVector< double > & placeHolder)"},
	 { "prmPositionJointGet_SetTimestamps", _wrap_prmPositionJointGet_SetTimestamps, METH_VARARGS, "prmPositionJointGet_SetTimestamps(prmPositionJointGet self, vctDynamicVector< double > const & newValue)"},
	 { "prmPositionJointGet_Timestamps", _wrap_prmPositionJointGet_Timestamps, METH_VARARGS, "\n"
		"prmPositionJointGet_Timestamps(prmPositionJointGet self) -> vctDynamicVector< double > const\n"
		"prmPositionJointGet_Timestamps(prmPositionJointGet self) -> vctDynamicVector< double > &\n"
		""},
	 { "new_prmPositionJointGet", _wrap_new_prmPositionJointGet, METH_VARARGS, "\n"
		"prmPositionJointGet()\n"
		"prmPositionJointGet(prmPositionJointGet other)\n"
		"new_prmPositionJointGet(size_t size) -> prmPositionJointGet\n"
		""},
	 { "prmPositionJointGet_SetSize", _wrap_prmPositionJointGet_SetSize, METH_VARARGS, "prmPositionJointGet_SetSize(prmPositionJointGet self, size_t size)"},
	 { "prmPositionJointGet_ClassServices", _wrap_prmPositionJointGet_ClassServices, METH_NOARGS, "prmPositionJointGet_ClassServices() -> cmnClassServicesBase"},
	 { "prmPositionJointGet_Copy", _wrap_prmPositionJointGet_Copy, METH_VARARGS, "prmPositionJointGet_Copy(prmPositionJointGet self, prmPositionJointGet source)"},
	 { "prmPositionJointGet_SerializeBinary", _wrap_prmPositionJointGet_SerializeBinary, METH_VARARGS, "prmPositionJointGet_SerializeBinary(prmPositionJointGet self, ostream outputStream)"},
	 { "prmPositionJointGet_DeSerializeBinary", _wrap_prmPositionJointGet_DeSerializeBinary, METH_VARARGS, "prmPositionJointGet_DeSerializeBinary(prmPositionJointGet self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"},
	 { "prmPositionJointGet_SerializeText", _wrap_prmPositionJointGet_SerializeText, METH_VARARGS, "prmPositionJointGet_SerializeText(prmPositionJointGet self, ostream outputStream, char const delimiter=',')"},
	 { "prmPositionJointGet_SerializeDescription", _wrap_prmPositionJointGet_SerializeDescription, METH_VARARGS, "prmPositionJointGet_SerializeDescription(prmPositionJointGet self, char const delimiter=',', std::string const & userDescription=\"\") -> std::string"},
	 { "prmPositionJointGet_DeSerializeText", _wrap_prmPositionJointGet_DeSerializeText, METH_VARARGS, "prmPositionJointGet_DeSerializeText(prmPositionJointGet self, istream inputStream, char const delimiter=',')"},
	 { "prmPositionJointGet___str__", _wrap_prmPositionJointGet___str__, METH_O, "prmPositionJointGet___str__(prmPositionJointGet self) -> std::string"},
	 { "prmPositionJointGet_ScalarDescription", _wrap_prmPositionJointGet_ScalarDescription, METH_VARARGS, "prmPositionJointGet_ScalarDescription(prmPositionJointGet self, size_t const index, std::string const & userDescription=\"\") -> std::string"},
	 { "prmPositionJointGet_swigregister", prmPositionJointGet_swigregister, METH_O, NULL},
	 { "prmPositionJointGet_swiginit", prmPositionJointGet_swiginit, METH_VARARGS, NULL},
	 { "delete_prmPositionJointSet", _wrap_delete_prmPositionJointSet, METH_O, "delete_prmPositionJointSet(prmPositionJointSet self)"},
	 { "prmPositionJointSet_GetGoal", _wrap_prmPositionJointSet_GetGoal, METH_VARARGS, "prmPositionJointSet_GetGoal(prmPositionJointSet self, vctDynamicVector< double > & placeHolder)"},
	 { "prmPositionJointSet_SetGoal", _wrap_prmPositionJointSet_SetGoal, METH_VARARGS, "prmPositionJointSet_SetGoal(prmPositionJointSet self, vctDynamicVector< double > const & newValue)"},
	 { "prmPositionJointSet_Goal", _wrap_prmPositionJointSet_Goal, METH_VARARGS, "\n"
		"prmPositionJointSet_Goal(prmPositionJointSet self) -> vctDynamicVector< double > const\n"
		"prmPositionJointSet_Goal(prmPositionJointSet self) -> vctDynamicVector< double > &\n"
		""},
	 { "prmPositionJointSet_GetVelocity", _wrap_prmPositionJointSet_GetVelocity, METH_VARARGS, "prmPositionJointSet_GetVelocity(prmPositionJointSet self, vctDynamicVector< double > & placeHolder)"},
	 { "prmPositionJointSet_SetVelocity", _wrap_prmPositionJointSet_SetVelocity, METH_VARARGS, "prmPositionJointSet_SetVelocity(prmPositionJointSet self, vctDynamicVector< double > const & newValue)"},
	 { "prmPositionJointSet_Velocity", _wrap_prmPositionJointSet_Velocity, METH_VARARGS, "\n"
		"prmPositionJointSet_Velocity(prmPositionJointSet self) -> vctDynamicVector< double > const\n"
		"prmPositionJointSet_Velocity(prmPositionJointSet self) -> vctDynamicVector< double > &\n"
		""},
	 { "prmPositionJointSet_GetAcceleration", _wrap_prmPositionJointSet_GetAcceleration, METH_VARARGS, "prmPositionJointSet_GetAcceleration(prmPositionJointSet self, vctDynamicVector< double > & placeHolder)"},
	 { "prmPositionJointSet_SetAcceleration", _wrap_prmPositionJointSet_SetAcceleration, METH_VARARGS, "prmPositionJointSet_SetAcceleration(prmPositionJointSet self, vctDynamicVector< double > const & newValue)"},
	 { "prmPositionJointSet_Acceleration", _wrap_prmPositionJointSet_Acceleration, METH_VARARGS, "\n"
		"prmPositionJointSet_Acceleration(prmPositionJointSet self) -> vctDynamicVector< double > const\n"
		"prmPositionJointSet_Acceleration(prmPositionJointSet self) -> vctDynamicVector< double > &\n"
		""},
	 { "prmPositionJointSet_GetTimeLimit", _wrap_prmPositionJointSet_GetTimeLimit, METH_VARARGS, "prmPositionJointSet_GetTimeLimit(prmPositionJointSet self, double & placeHolder)"},
	 { "prmPositionJointSet_SetTimeLimit", _wrap_prmPositionJointSet_SetTimeLimit, METH_VARARGS, "prmPositionJointSet_SetTimeLimit(prmPositionJointSet self, double const & newValue)"},
	 { "prmPositionJointSet_TimeLimit", _wrap_prmPositionJointSet_TimeLimit, METH_VARARGS, "\n"
		"prmPositionJointSet_TimeLimit(prmPositionJointSet self) -> double const\n"
		"prmPositionJointSet_TimeLimit(prmPositionJointSet self) -> double &\n"
		""},
	 { "prmPositionJointSet_GetIsCoordinated", _wrap_prmPositionJointSet_GetIsCoordinated, METH_VARARGS, "prmPositionJointSet_GetIsCoordinated(prmPositionJointSet self, bool & placeHolder)"},
	 { "prmPositionJointSet_SetIsCoordinated", _wrap_prmPositionJointSet_SetIsCoordinated, METH_VARARGS, "prmPositionJointSet_SetIsCoordinated(prmPositionJointSet self, bool const & newValue)"},
	 { "prmPositionJointSet_IsCoordinated", _wrap_prmPositionJointSet_IsCoordinated, METH_VARARGS, "\n"
		"prmPositionJointSet_IsCoordinated(prmPositionJointSet self) -> bool const\n"
		"prmPositionJointSet_IsCoordinated(prmPositionJointSet self) -> bool &\n"
		""},
	 { "prmPositionJointSet_GetDeceleration", _wrap_prmPositionJointSet_GetDeceleration, METH_VARARGS, "prmPositionJointSet_GetDeceleration(prmPositionJointSet self, vctDynamicVector< double > & placeHolder)"},
	 { "prmPositionJointSet_SetDeceleration", _wrap_prmPositionJointSet_SetDeceleration, METH_VARARGS, "prmPositionJointSet_SetDeceleration(prmPositionJointSet self, vctDynamicVector< double > const & newValue)"},
	 { "prmPositionJointSet_Deceleration", _wrap_prmPositionJointSet_Deceleration, METH_VARARGS, "\n"
		"prmPositionJointSet_Deceleration(prmPositionJointSet self) -> vctDynamicVector< double > const\n"
		"prmPositionJointSet_Deceleration(prmPositionJointSet self) -> vctDynamicVector< double > &\n"
		""},
	 { "prmPositionJointSet_GetMask", _wrap_prmPositionJointSet_GetMask, METH_VARARGS, "prmPositionJointSet_GetMask(prmPositionJointSet self, vctDynamicVector< bool > & placeHolder)"},
	 { "prmPositionJointSet_SetMask", _wrap_prmPositionJointSet_SetMask, METH_VARARGS, "prmPositionJointSet_SetMask(prmPositionJointSet self, vctDynamicVector< bool > const & newValue)"},
	 { "prmPositionJointSet_Mask", _wrap_prmPositionJointSet_Mask, METH_VARARGS, "\n"
		"prmPositionJointSet_Mask(prmPositionJointSet self) -> vctDynamicVector< bool > const\n"
		"prmPositionJointSet_Mask(prmPositionJointSet self) -> vctDynamicVector< bool > &\n"
		""},
	 { "prmPositionJointSet_GetBlockingFlag", _wrap_prmPositionJointSet_GetBlockingFlag, METH_VARARGS, "prmPositionJointSet_GetBlockingFlag(prmPositionJointSet self, prmBlocking & placeHolder)"},
	 { "prmPositionJointSet_SetBlockingFlag", _wrap_prmPositionJointSet_SetBlockingFlag, METH_VARARGS, "prmPositionJointSet_SetBlockingFlag(prmPositionJointSet self, prmBlocking const & newValue)"},
	 { "prmPositionJointSet_BlockingFlag", _wrap_prmPositionJointSet_BlockingFlag, METH_VARARGS, "\n"
		"prmPositionJointSet_BlockingFlag(prmPositionJointSet self) -> prmBlocking const\n"
		"prmPositionJointSet_BlockingFlag(prmPositionJointSet self) -> prmBlocking &\n"
		""},
	 { "prmPositionJointSet_GetBlendingFactor", _wrap_prmPositionJointSet_GetBlendingFactor, METH_VARARGS, "prmPositionJointSet_GetBlendingFactor(prmPositionJointSet self, bool & placeHolder)"},
	 { "prmPositionJointSet_SetBlendingFactor", _wrap_prmPositionJointSet_SetBlendingFactor, METH_VARARGS, "prmPositionJointSet_SetBlendingFactor(prmPositionJointSet self, bool const & newValue)"},
	 { "prmPositionJointSet_BlendingFactor", _wrap_prmPositionJointSet_BlendingFactor, METH_VARARGS, "\n"
		"prmPositionJointSet_BlendingFactor(prmPositionJointSet self) -> bool const\n"
		"prmPositionJointSet_BlendingFactor(prmPositionJointSet self) -> bool &\n"
		""},
	 { "prmPositionJointSet_GetIsPreemptable", _wrap_prmPositionJointSet_GetIsPreemptable, METH_VARARGS, "prmPositionJointSet_GetIsPreemptable(prmPositionJointSet self, bool & placeHolder)"},
	 { "prmPositionJointSet_SetIsPreemptable", _wrap_prmPositionJointSet_SetIsPreemptable, METH_VARARGS, "prmPositionJointSet_SetIsPreemptable(prmPositionJointSet self, bool const & newValue)"},
	 { "prmPositionJointSet_IsPreemptable", _wrap_prmPositionJointSet_IsPreemptable, METH_VARARGS, "\n"
		"prmPositionJointSet_IsPreemptable(prmPositionJointSet self) -> bool const\n"
		"prmPositionJointSet_IsPreemptable(prmPositionJointSet self) -> bool &\n"
		""},
	 { "prmPositionJointSet_GetIsGoalOnly", _wrap_prmPositionJointSet_GetIsGoalOnly, METH_VARARGS, "prmPositionJointSet_GetIsGoalOnly(prmPositionJointSet self, bool & placeHolder)"},
	 { "prmPositionJointSet_SetIsGoalOnly", _wrap_prmPositionJointSet_SetIsGoalOnly, METH_VARARGS, "prmPositionJointSet_SetIsGoalOnly(prmPositionJointSet self, bool const & newValue)"},
	 { "prmPositionJointSet_IsGoalOnly", _wrap_prmPositionJointSet_IsGoalOnly, METH_VARARGS, "\n"
		"prmPositionJointSet_IsGoalOnly(prmPositionJointSet self) -> bool const\n"
		"prmPositionJointSet_IsGoalOnly(prmPositionJointSet self) -> bool &\n"
		""},
	 { "new_prmPositionJointSet", _wrap_new_prmPositionJointSet, METH_VARARGS, "\n"
		"prmPositionJointSet()\n"
		"prmPositionJointSet(prmPositionJointSet other)\n"
		"new_prmPositionJointSet(size_t const size) -> prmPositionJointSet\n"
		""},
	 { "prmPositionJointSet_SetSize", _wrap_prmPositionJointSet_SetSize, METH_VARARGS, "prmPositionJointSet_SetSize(prmPositionJointSet self, size_t const size)"},
	 { "prmPositionJointSet_ClassServices", _wrap_prmPositionJointSet_ClassServices, METH_NOARGS, "prmPositionJointSet_ClassServices() -> cmnClassServicesBase"},
	 { "prmPositionJointSet_Copy", _wrap_prmPositionJointSet_Copy, METH_VARARGS, "prmPositionJointSet_Copy(prmPositionJointSet self, prmPositionJointSet source)"},
	 { "prmPositionJointSet_SerializeBinary", _wrap_prmPositionJointSet_SerializeBinary, METH_VARARGS, "prmPositionJointSet_SerializeBinary(prmPositionJointSet self, ostream outputStream)"},
	 { "prmPositionJointSet_DeSerializeBinary", _wrap_prmPositionJointSet_DeSerializeBinary, METH_VARARGS, "prmPositionJointSet_DeSerializeBinary(prmPositionJointSet self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"},
	 { "prmPositionJointSet_SerializeText", _wrap_prmPositionJointSet_SerializeText, METH_VARARGS, "prmPositionJointSet_SerializeText(prmPositionJointSet self, ostream outputStream, char const delimiter=',')"},
	 { "prmPositionJointSet_SerializeDescription", _wrap_prmPositionJointSet_SerializeDescription, METH_VARARGS, "prmPositionJointSet_SerializeDescription(prmPositionJointSet self, char const delimiter=',', std::string const & userDescription=\"\") -> std::string"},
	 { "prmPositionJointSet_DeSerializeText", _wrap_prmPositionJointSet_DeSerializeText, METH_VARARGS, "prmPositionJointSet_DeSerializeText(prmPositionJointSet self, istream inputStream, char const delimiter=',')"},
	 { "prmPositionJointSet___str__", _wrap_prmPositionJointSet___str__, METH_O, "prmPositionJointSet___str__(prmPositionJointSet self) -> std::string"},
	 { "prmPositionJointSet_ScalarDescription", _wrap_prmPositionJointSet_ScalarDescription, METH_VARARGS, "prmPositionJointSet_ScalarDescription(prmPositionJointSet self, size_t const index, std::string const & userDescription=\"\") -> std::string"},
	 { "prmPositionJointSet_swigregister", prmPositionJointSet_swigregister, METH_O, NULL},
	 { "prmPositionJointSet_swiginit", prmPositionJointSet_swiginit, METH_VARARGS, NULL},
	 { "cmnSerializeRaw", _wrap_cmnSerializeRaw, METH_VARARGS, "\n"
		"cmnSerializeRaw(ostream outputStream, mtsExecutionResult object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsDescriptionComponent object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsDescriptionComponentClass object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsDescriptionInterface object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsDescriptionInterfaceFullName object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsDescriptionConnection object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsComponentStatusControl object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsComponentStateChange object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsDescriptionLoadLibrary object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsEndUserInterfaceArg object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsMessage object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsTaskConstructorArg object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsTaskContinuousConstructorArg object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsTaskPeriodicConstructorArg object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsComponentState object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsCommandVoidDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsCommandWriteDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsCommandReadDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsCommandQualifiedReadDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsCommandVoidReturnDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsCommandWriteReturnDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsEventVoidDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsEventWriteDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsInterfaceProvidedDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, mtsInterfaceRequiredDescription object)\n"
		"cmnSerializeRaw(ostream outputStream, prmPositionCartesianGet object)\n"
		"cmnSerializeRaw(ostream outputStream, prmVelocityCartesianGet object)\n"
		"cmnSerializeRaw(ostream outputStream, prmPositionJointGet object)\n"
		"cmnSerializeRaw(ostream outputStream, prmPositionJointSet object)\n"
		""},
	 { "cmnDeSerializeRaw", _wrap_cmnDeSerializeRaw, METH_VARARGS, "\n"
		"cmnDeSerializeRaw(istream inputStream, mtsExecutionResult placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsDescriptionComponent placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsDescriptionComponentClass placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsDescriptionInterface placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsDescriptionInterfaceFullName placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsDescriptionConnection placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsComponentStatusControl placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsComponentStateChange placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsDescriptionLoadLibrary placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsEndUserInterfaceArg placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsMessage placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsTaskConstructorArg placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsTaskContinuousConstructorArg placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsTaskPeriodicConstructorArg placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsComponentState placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsCommandVoidDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsCommandWriteDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsCommandReadDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsCommandQualifiedReadDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsCommandVoidReturnDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsCommandWriteReturnDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsEventVoidDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsEventWriteDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsInterfaceProvidedDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, mtsInterfaceRequiredDescription placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, prmPositionCartesianGet placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, prmVelocityCartesianGet placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, prmPositionJointGet placeHolder)\n"
		"cmnDeSerializeRaw(istream inputStream, prmPositionJointSet placeHolder)\n"
		""},
	 { "prmVelocityJointGet_ClassServices", _wrap_prmVelocityJointGet_ClassServices, METH_NOARGS, "prmVelocityJointGet_ClassServices() -> cmnClassServicesBase"},
	 { "prmVelocityJointGet_SetSize", _wrap_prmVelocityJointGet_SetSize, METH_VARARGS, "prmVelocityJointGet_SetSize(prmVelocityJointGet self, prmVelocityJointGet::size_type size)"},
	 { "new_prmVelocityJointGet", _wrap_new_prmVelocityJointGet, METH_VARARGS, "\n"
		"prmVelocityJointGet()\n"
		"prmVelocityJointGet(prmVelocityJointGet::size_type size)\n"
		"new_prmVelocityJointGet(vctDoubleVec const & velocity) -> prmVelocityJointGet\n"
		""},
	 { "delete_prmVelocityJointGet", _wrap_delete_prmVelocityJointGet, METH_O, "delete_prmVelocityJointGet(prmVelocityJointGet self)"},
	 { "prmVelocityJointGet_SetVelocity", _wrap_prmVelocityJointGet_SetVelocity, METH_VARARGS, "prmVelocityJointGet_SetVelocity(prmVelocityJointGet self, vctDoubleVec const & newValue)"},
	 { "prmVelocityJointGet_Velocity", _wrap_prmVelocityJointGet_Velocity, METH_VARARGS, "\n"
		"prmVelocityJointGet_Velocity(prmVelocityJointGet self) -> vctDoubleVec const\n"
		"prmVelocityJointGet_Velocity(prmVelocityJointGet self) -> vctDoubleVec &\n"
		""},
	 { "prmVelocityJointGet_GetVelocity", _wrap_prmVelocityJointGet_GetVelocity, METH_VARARGS, "\n"
		"prmVelocityJointGet_GetVelocity(prmVelocityJointGet self, vctDoubleVec & placeHolder)\n"
		"prmVelocityJointGet_GetVelocity(prmVelocityJointGet self) -> vctDoubleVec const &\n"
		""},
	 { "prmVelocityJointGet_swigregister", prmVelocityJointGet_swigregister, METH_O, NULL},
	 { "prmVelocityJointGet_swiginit", prmVelocityJointGet_swiginit, METH_VARARGS, NULL},
	 { "prmVelocityJointSet_ClassServices", _wrap_prmVelocityJointSet_ClassServices, METH_NOARGS, "prmVelocityJointSet_ClassServices() -> cmnClassServicesBase"},
	 { "prmVelocityJointSet_SetMask", _wrap_prmVelocityJointSet_SetMask, METH_VARARGS, "prmVelocityJointSet_SetMask(prmVelocityJointSet self, vctBoolVec const & newValue)"},
	 { "prmVelocityJointSet_Mask", _wrap_prmVelocityJointSet_Mask, METH_VARARGS, "\n"
		"prmVelocityJointSet_Mask(prmVelocityJointSet self) -> vctBoolVec const\n"
		"prmVelocityJointSet_Mask(prmVelocityJointSet self) -> vctBoolVec &\n"
		""},
	 { "prmVelocityJointSet_GetMask", _wrap_prmVelocityJointSet_GetMask, METH_VARARGS, "\n"
		"prmVelocityJointSet_GetMask(prmVelocityJointSet self, vctBoolVec & placeHolder)\n"
		"prmVelocityJointSet_GetMask(prmVelocityJointSet self) -> vctBoolVec const &\n"
		""},
	 { "prmVelocityJointSet_SetGuard", _wrap_prmVelocityJointSet_SetGuard, METH_VARARGS, "prmVelocityJointSet_SetGuard(prmVelocityJointSet self, vctDoubleVec const & newValue)"},
	 { "prmVelocityJointSet_Guard", _wrap_prmVelocityJointSet_Guard, METH_VARARGS, "\n"
		"prmVelocityJointSet_Guard(prmVelocityJointSet self) -> vctDoubleVec const\n"
		"prmVelocityJointSet_Guard(prmVelocityJointSet self) -> vctDoubleVec &\n"
		""},
	 { "prmVelocityJointSet_GetGuard", _wrap_prmVelocityJointSet_GetGuard, METH_VARARGS, "\n"
		"prmVelocityJointSet_GetGuard(prmVelocityJointSet self, vctDoubleVec & placeHolder)\n"
		"prmVelocityJointSet_GetGuard(prmVelocityJointSet self) -> vctDoubleVec const &\n"
		""},
	 { "prmVelocityJointSet_SetGoal", _wrap_prmVelocityJointSet_SetGoal, METH_VARARGS, "prmVelocityJointSet_SetGoal(prmVelocityJointSet self, vctDoubleVec const & newValue)"},
	 { "prmVelocityJointSet_Goal", _wrap_prmVelocityJointSet_Goal, METH_VARARGS, "\n"
		"prmVelocityJointSet_Goal(prmVelocityJointSet self) -> vctDoubleVec const\n"
		"prmVelocityJointSet_Goal(prmVelocityJointSet self) -> vctDoubleVec &\n"
		""},
	 { "prmVelocityJointSet_GetGoal", _wrap_prmVelocityJointSet_GetGoal, METH_VARARGS, "\n"
		"prmVelocityJointSet_GetGoal(prmVelocityJointSet self, vctDoubleVec & placeHolder)\n"
		"prmVelocityJointSet_GetGoal(prmVelocityJointSet self) -> vctDoubleVec const &\n"
		""},
	 { "prmVelocityJointSet_SetAcceleration", _wrap_prmVelocityJointSet_SetAcceleration, METH_VARARGS, "prmVelocityJointSet_SetAcceleration(prmVelocityJointSet self, vctDoubleVec const & newValue)"},
	 { "prmVelocityJointSet_Acceleration", _wrap_prmVelocityJointSet_Acceleration, METH_VARARGS, "\n"
		"prmVelocityJointSet_Acceleration(prmVelocityJointSet self) -> vctDoubleVec const\n"
		"prmVelocityJointSet_Acceleration(prmVelocityJointSet self) -> vctDoubleVec &\n"
		""},
	 { "prmVelocityJointSet_GetAcceleration", _wrap_prmVelocityJointSet_GetAcceleration, METH_VARARGS, "\n"
		"prmVelocityJointSet_GetAcceleration(prmVelocityJointSet self, vctDoubleVec & placeHolder)\n"
		"prmVelocityJointSet_GetAcceleration(prmVelocityJointSet self) -> vctDoubleVec const &\n"
		""},
	 { "prmVelocityJointSet_SetDeceleration", _wrap_prmVelocityJointSet_SetDeceleration, METH_VARARGS, "prmVelocityJointSet_SetDeceleration(prmVelocityJointSet self, vctDoubleVec const & newValue)"},
	 { "prmVelocityJointSet_Deceleration", _wrap_prmVelocityJointSet_Deceleration, METH_VARARGS, "\n"
		"prmVelocityJointSet_Deceleration(prmVelocityJointSet self) -> vctDoubleVec const\n"
		"prmVelocityJointSet_Deceleration(prmVelocityJointSet self) -> vctDoubleVec &\n"
		""},
	 { "prmVelocityJointSet_GetDeceleration", _wrap_prmVelocityJointSet_GetDeceleration, METH_VARARGS, "\n"
		"prmVelocityJointSet_GetDeceleration(prmVelocityJointSet self, vctDoubleVec & placeHolder)\n"
		"prmVelocityJointSet_GetDeceleration(prmVelocityJointSet self) -> vctDoubleVec const &\n"
		""},
	 { "prmVelocityJointSet_SetIsPositionGuarded", _wrap_prmVelocityJointSet_SetIsPositionGuarded, METH_VARARGS, "prmVelocityJointSet_SetIsPositionGuarded(prmVelocityJointSet self, bool const & newValue)"},
	 { "prmVelocityJointSet_IsPositionGuarded", _wrap_prmVelocityJointSet_IsPositionGuarded, METH_VARARGS, "\n"
		"prmVelocityJointSet_IsPositionGuarded(prmVelocityJointSet self) -> bool const\n"
		"prmVelocityJointSet_IsPositionGuarded(prmVelocityJointSet self) -> bool &\n"
		""},
	 { "prmVelocityJointSet_GetIsPositionGuarded", _wrap_prmVelocityJointSet_GetIsPositionGuarded, METH_VARARGS, "\n"
		"prmVelocityJointSet_GetIsPositionGuarded(prmVelocityJointSet self, bool & placeHolder)\n"
		"prmVelocityJointSet_GetIsPositionGuarded(prmVelocityJointSet self) -> bool const &\n"
		""},
	 { "prmVelocityJointSet_SetSize", _wrap_prmVelocityJointSet_SetSize, METH_VARARGS, "prmVelocityJointSet_SetSize(prmVelocityJointSet self, prmVelocityJointSet::size_type size)"},
	 { "new_prmVelocityJointSet", _wrap_new_prmVelocityJointSet, METH_VARARGS, "\n"
		"prmVelocityJointSet()\n"
		"prmVelocityJointSet(prmVelocityJointSet::size_type size)\n"
		"new_prmVelocityJointSet(vctBoolVec const & mask, vctDoubleVec const & guard, vctDoubleVec const & velocity, vctDoubleVec const & acceleration, vctDoubleVec const & deceleration, bool const & isPositionGuarded) -> prmVelocityJointSet\n"
		""},
	 { "delete_prmVelocityJointSet", _wrap_delete_prmVelocityJointSet, METH_O, "delete_prmVelocityJointSet(prmVelocityJointSet self)"},
	 { "prmVelocityJointSet_swigregister", prmVelocityJointSet_swigregister, METH_O, NULL},
	 { "prmVelocityJointSet_swiginit", prmVelocityJointSet_swiginit, METH_VARARGS, NULL},
	 { "prmTransformationBase_ClassServices", _wrap_prmTransformationBase_ClassServices, METH_NOARGS, "prmTransformationBase_ClassServices() -> cmnClassServicesBase"},
	 { "prmTransformationBase_Services", _wrap_prmTransformationBase_Services, METH_O, "prmTransformationBase_Services(prmTransformationBase self) -> cmnClassServicesBase"},
	 { "delete_prmTransformationBase", _wrap_delete_prmTransformationBase, METH_O, "delete_prmTransformationBase(prmTransformationBase self)"},
	 { "prmTransformationBase_WorldFrame", _wrap_prmTransformationBase_WorldFrame, METH_O, "prmTransformationBase_WorldFrame(prmTransformationBase self) -> prmTransformationBase"},
	 { "prmTransformationBase_SetReferenceFrame", _wrap_prmTransformationBase_SetReferenceFrame, METH_VARARGS, "\n"
		"prmTransformationBase_SetReferenceFrame(prmTransformationBase self, prmTransformationBase newReference) -> bool\n"
		"prmTransformationBase_SetReferenceFrame(prmTransformationBase self, std::string const & parentName) -> bool\n"
		""},
	 { "prmTransformationBase_GetReferenceFrame", _wrap_prmTransformationBase_GetReferenceFrame, METH_O, "prmTransformationBase_GetReferenceFrame(prmTransformationBase self) -> prmTransformationBase"},
	 { "prmTransformationBase_GetName", _wrap_prmTransformationBase_GetName, METH_O, "prmTransformationBase_GetName(prmTransformationBase self) -> std::string const &"},
	 { "prmTransformationBase_SetName", _wrap_prmTransformationBase_SetName, METH_VARARGS, "prmTransformationBase_SetName(prmTransformationBase self, std::string const & name)"},
	 { "prmTransformationBase_WRTReference", _wrap_prmTransformationBase_WRTReference, METH_O, "prmTransformationBase_WRTReference(prmTransformationBase self) -> vctFrm3"},
	 { "prmTransformationBase_swigregister", prmTransformationBase_swigregister, METH_O, NULL},
	 { "prmTransformationManager_ClassServices", _wrap_prmTransformationManager_ClassServices, METH_NOARGS, "prmTransformationManager_ClassServices() -> cmnClassServicesBase"},
	 { "prmTransformationManager_Services", _wrap_prmTransformationManager_Services, METH_O, "prmTransformationManager_Services(prmTransformationManager self) -> cmnClassServicesBase"},
	 { "prmTransformationManager_TheWorld_get", _wrap_prmTransformationManager_TheWorld_get, METH_VARARGS, NULL},
	 { "prmTransformationManager_TheWorld_set", _wrap_prmTransformationManager_TheWorld_set, METH_O, NULL},
	 { "prmTransformationManager_Clear", _wrap_prmTransformationManager_Clear, METH_NOARGS, "prmTransformationManager_Clear()"},
	 { "prmTransformationManager_NodeCreatesCycle", _wrap_prmTransformationManager_NodeCreatesCycle, METH_VARARGS, "\n"
		"prmTransformationManager_NodeCreatesCycle(prmTransformationBase attachPoint, prmTransformationBase newFrame) -> bool\n"
		"prmTransformationManager_NodeCreatesCycle(std::string const & pName, prmTransformationBase newFrame) -> bool\n"
		""},
	 { "prmTransformationManager_WRTReference", _wrap_prmTransformationManager_WRTReference, METH_VARARGS, "prmTransformationManager_WRTReference(prmTransformationBase tipFrame, prmTransformationBase refFrame) -> vctFrm3"},
	 { "prmTransformationManager_ReplaceReference", _wrap_prmTransformationManager_ReplaceReference, METH_VARARGS, "\n"
		"prmTransformationManager_ReplaceReference(prmTransformationBase nodePtr, prmTransformationBase newReference) -> unsigned int\n"
		"prmTransformationManager_ReplaceReference(prmTransformationBase nodePtr, std::string const & parentName) -> unsigned int\n"
		""},
	 { "prmTransformationManager_ToStreamDot", _wrap_prmTransformationManager_ToStreamDot, METH_O, "prmTransformationManager_ToStreamDot(ostream outputStream)"},
	 { "prmTransformationManager_ToStreamDotHelper", _wrap_prmTransformationManager_ToStreamDotHelper, METH_VARARGS, "prmTransformationManager_ToStreamDotHelper(ostream outputStream, prmTransformationBase parent)"},
	 { "prmTransformationManager_FindPath", _wrap_prmTransformationManager_FindPath, METH_VARARGS, "prmTransformationManager_FindPath(prmTransformationBase target, prmTransformationBase reference) -> bool"},
	 { "prmTransformationManager_FindPathConnectedTree", _wrap_prmTransformationManager_FindPathConnectedTree, METH_VARARGS, "prmTransformationManager_FindPathConnectedTree(prmTransformationBase target, prmTransformationBase reference) -> bool"},
	 { "prmTransformationManager_GetTransformationNodePtr", _wrap_prmTransformationManager_GetTransformationNodePtr, METH_O, "prmTransformationManager_GetTransformationNodePtr(std::string const pName) -> prmTransformationBase"},
	 { "prmTransformationManager_PathToStreamDot", _wrap_prmTransformationManager_PathToStreamDot, METH_O, "prmTransformationManager_PathToStreamDot(ostream outputStream)"},
	 { "new_prmTransformationManager", _wrap_new_prmTransformationManager, METH_NOARGS, "new_prmTransformationManager() -> prmTransformationManager"},
	 { "delete_prmTransformationManager", _wrap_delete_prmTransformationManager, METH_O, "delete_prmTransformationManager(prmTransformationManager self)"},
	 { "prmTransformationManager_swigregister", prmTransformationManager_swigregister, METH_O, NULL},
	 { "prmTransformationManager_swiginit", prmTransformationManager_swiginit, METH_VARARGS, NULL},
	 { "prmWRTWorld", _wrap_prmWRTWorld, METH_O, "prmWRTWorld(prmTransformationBase frame) -> vctFrm3"},
	 { "prmWRTReference", _wrap_prmWRTReference, METH_VARARGS, "\n"
		"prmWRTReference(prmTransformationBase tipFrame, prmTransformationBase refFrame) -> vctFrm3\n"
		"prmWRTReference(std::string const & tipFrame, std::string const & refFrame) -> vctFrm3\n"
		"prmWRTReference(std::string const & tipFrame, prmTransformationBase refFrame) -> vctFrm3\n"
		"prmWRTReference(prmTransformationBase tipFrame, std::string const & refFrame) -> vctFrm3\n"
		""},
	 { "prmTransformationDynamic_ClassServices", _wrap_prmTransformationDynamic_ClassServices, METH_NOARGS, "prmTransformationDynamic_ClassServices() -> cmnClassServicesBase"},
	 { "new_prmTransformationDynamic", _wrap_new_prmTransformationDynamic, METH_VARARGS, "\n"
		"prmTransformationDynamic()\n"
		"prmTransformationDynamic(std::string const & name)\n"
		"new_prmTransformationDynamic(std::string const & name, mtsFunctionRead transformationCommand, prmTransformationBase reference) -> prmTransformationDynamic\n"
		""},
	 { "delete_prmTransformationDynamic", _wrap_delete_prmTransformationDynamic, METH_O, "delete_prmTransformationDynamic(prmTransformationDynamic self)"},
	 { "prmTransformationDynamic_SetTransformationCommand", _wrap_prmTransformationDynamic_SetTransformationCommand, METH_VARARGS, "prmTransformationDynamic_SetTransformationCommand(prmTransformationDynamic self, mtsFunctionRead transformationCommand)"},
	 { "prmTransformationDynamic_GetTransformationCommand", _wrap_prmTransformationDynamic_GetTransformationCommand, METH_O, "prmTransformationDynamic_GetTransformationCommand(prmTransformationDynamic self) -> mtsFunctionRead"},
	 { "prmTransformationDynamic_swigregister", prmTransformationDynamic_swigregister, METH_O, NULL},
	 { "prmTransformationDynamic_swiginit", prmTransformationDynamic_swiginit, METH_VARARGS, NULL},
	 { "prmTransformationFixed_ClassServices", _wrap_prmTransformationFixed_ClassServices, METH_NOARGS, "prmTransformationFixed_ClassServices() -> cmnClassServicesBase"},
	 { "new_prmTransformationFixed", _wrap_new_prmTransformationFixed, METH_VARARGS, "\n"
		"prmTransformationFixed()\n"
		"prmTransformationFixed(std::string const & name)\n"
		"new_prmTransformationFixed(std::string const & name, vctFrm3 transformation, prmTransformationBase newReference) -> prmTransformationFixed\n"
		""},
	 { "delete_prmTransformationFixed", _wrap_delete_prmTransformationFixed, METH_O, "delete_prmTransformationFixed(prmTransformationFixed self)"},
	 { "prmTransformationFixed_SetTransformation", _wrap_prmTransformationFixed_SetTransformation, METH_VARARGS, "prmTransformationFixed_SetTransformation(prmTransformationFixed self, vctFrm3 newTransformation)"},
	 { "prmTransformationFixed_GetTransformation", _wrap_prmTransformationFixed_GetTransformation, METH_O, "prmTransformationFixed_GetTransformation(prmTransformationFixed self) -> vctFrm3"},
	 { "prmTransformationFixed_swigregister", prmTransformationFixed_swigregister, METH_O, NULL},
	 { "prmTransformationFixed_swiginit", prmTransformationFixed_swiginit, METH_VARARGS, NULL},
	 { "prmRobotState_ClassServices", _wrap_prmRobotState_ClassServices, METH_NOARGS, "prmRobotState_ClassServices() -> cmnClassServicesBase"},
	 { "new_prmRobotState", _wrap_new_prmRobotState, METH_VARARGS, "\n"
		"prmRobotState()\n"
		"new_prmRobotState(prmRobotState::size_type size) -> prmRobotState\n"
		""},
	 { "prmRobotState_SetSize", _wrap_prmRobotState_SetSize, METH_VARARGS, "prmRobotState_SetSize(prmRobotState self, prmRobotState::size_type size)"},
	 { "delete_prmRobotState", _wrap_delete_prmRobotState, METH_O, "delete_prmRobotState(prmRobotState self)"},
	 { "prmRobotState_SetJointPosition", _wrap_prmRobotState_SetJointPosition, METH_VARARGS, "prmRobotState_SetJointPosition(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_JointPosition", _wrap_prmRobotState_JointPosition, METH_VARARGS, "\n"
		"prmRobotState_JointPosition(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_JointPosition(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetJointPosition", _wrap_prmRobotState_GetJointPosition, METH_VARARGS, "\n"
		"prmRobotState_GetJointPosition(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetJointPosition(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetJointVelocity", _wrap_prmRobotState_SetJointVelocity, METH_VARARGS, "prmRobotState_SetJointVelocity(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_JointVelocity", _wrap_prmRobotState_JointVelocity, METH_VARARGS, "\n"
		"prmRobotState_JointVelocity(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_JointVelocity(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetJointVelocity", _wrap_prmRobotState_GetJointVelocity, METH_VARARGS, "\n"
		"prmRobotState_GetJointVelocity(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetJointVelocity(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetJointPositionGoal", _wrap_prmRobotState_SetJointPositionGoal, METH_VARARGS, "prmRobotState_SetJointPositionGoal(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_JointPositionGoal", _wrap_prmRobotState_JointPositionGoal, METH_VARARGS, "\n"
		"prmRobotState_JointPositionGoal(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_JointPositionGoal(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetJointPositionGoal", _wrap_prmRobotState_GetJointPositionGoal, METH_VARARGS, "\n"
		"prmRobotState_GetJointPositionGoal(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetJointPositionGoal(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetJointVelocityGoal", _wrap_prmRobotState_SetJointVelocityGoal, METH_VARARGS, "prmRobotState_SetJointVelocityGoal(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_JointVelocityGoal", _wrap_prmRobotState_JointVelocityGoal, METH_VARARGS, "\n"
		"prmRobotState_JointVelocityGoal(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_JointVelocityGoal(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetJointVelocityGoal", _wrap_prmRobotState_GetJointVelocityGoal, METH_VARARGS, "\n"
		"prmRobotState_GetJointVelocityGoal(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetJointVelocityGoal(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetJointPositionError", _wrap_prmRobotState_SetJointPositionError, METH_VARARGS, "prmRobotState_SetJointPositionError(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_JointPositionError", _wrap_prmRobotState_JointPositionError, METH_VARARGS, "\n"
		"prmRobotState_JointPositionError(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_JointPositionError(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetJointPositionError", _wrap_prmRobotState_GetJointPositionError, METH_VARARGS, "\n"
		"prmRobotState_GetJointPositionError(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetJointPositionError(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetJointVelocityError", _wrap_prmRobotState_SetJointVelocityError, METH_VARARGS, "prmRobotState_SetJointVelocityError(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_JointVelocityError", _wrap_prmRobotState_JointVelocityError, METH_VARARGS, "\n"
		"prmRobotState_JointVelocityError(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_JointVelocityError(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetJointVelocityError", _wrap_prmRobotState_GetJointVelocityError, METH_VARARGS, "\n"
		"prmRobotState_GetJointVelocityError(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetJointVelocityError(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetCartesianPosition", _wrap_prmRobotState_SetCartesianPosition, METH_VARARGS, "prmRobotState_SetCartesianPosition(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_CartesianPosition", _wrap_prmRobotState_CartesianPosition, METH_VARARGS, "\n"
		"prmRobotState_CartesianPosition(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_CartesianPosition(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetCartesianPosition", _wrap_prmRobotState_GetCartesianPosition, METH_VARARGS, "\n"
		"prmRobotState_GetCartesianPosition(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetCartesianPosition(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetCartesianVelocity", _wrap_prmRobotState_SetCartesianVelocity, METH_VARARGS, "prmRobotState_SetCartesianVelocity(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_CartesianVelocity", _wrap_prmRobotState_CartesianVelocity, METH_VARARGS, "\n"
		"prmRobotState_CartesianVelocity(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_CartesianVelocity(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetCartesianVelocity", _wrap_prmRobotState_GetCartesianVelocity, METH_VARARGS, "\n"
		"prmRobotState_GetCartesianVelocity(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetCartesianVelocity(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetCartesianPositionGoal", _wrap_prmRobotState_SetCartesianPositionGoal, METH_VARARGS, "prmRobotState_SetCartesianPositionGoal(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_CartesianPositionGoal", _wrap_prmRobotState_CartesianPositionGoal, METH_VARARGS, "\n"
		"prmRobotState_CartesianPositionGoal(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_CartesianPositionGoal(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetCartesianPositionGoal", _wrap_prmRobotState_GetCartesianPositionGoal, METH_VARARGS, "\n"
		"prmRobotState_GetCartesianPositionGoal(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetCartesianPositionGoal(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetCartesianVelocityGoal", _wrap_prmRobotState_SetCartesianVelocityGoal, METH_VARARGS, "prmRobotState_SetCartesianVelocityGoal(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_CartesianVelocityGoal", _wrap_prmRobotState_CartesianVelocityGoal, METH_VARARGS, "\n"
		"prmRobotState_CartesianVelocityGoal(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_CartesianVelocityGoal(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetCartesianVelocityGoal", _wrap_prmRobotState_GetCartesianVelocityGoal, METH_VARARGS, "\n"
		"prmRobotState_GetCartesianVelocityGoal(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetCartesianVelocityGoal(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetCartesianPositionError", _wrap_prmRobotState_SetCartesianPositionError, METH_VARARGS, "prmRobotState_SetCartesianPositionError(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_CartesianPositionError", _wrap_prmRobotState_CartesianPositionError, METH_VARARGS, "\n"
		"prmRobotState_CartesianPositionError(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_CartesianPositionError(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetCartesianPositionError", _wrap_prmRobotState_GetCartesianPositionError, METH_VARARGS, "\n"
		"prmRobotState_GetCartesianPositionError(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetCartesianPositionError(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetCartesianVelocityError", _wrap_prmRobotState_SetCartesianVelocityError, METH_VARARGS, "prmRobotState_SetCartesianVelocityError(prmRobotState self, vctDoubleVec const & newValue)"},
	 { "prmRobotState_CartesianVelocityError", _wrap_prmRobotState_CartesianVelocityError, METH_VARARGS, "\n"
		"prmRobotState_CartesianVelocityError(prmRobotState self) -> vctDoubleVec const\n"
		"prmRobotState_CartesianVelocityError(prmRobotState self) -> vctDoubleVec &\n"
		""},
	 { "prmRobotState_GetCartesianVelocityError", _wrap_prmRobotState_GetCartesianVelocityError, METH_VARARGS, "\n"
		"prmRobotState_GetCartesianVelocityError(prmRobotState self, vctDoubleVec & placeHolder)\n"
		"prmRobotState_GetCartesianVelocityError(prmRobotState self) -> vctDoubleVec const &\n"
		""},
	 { "prmRobotState_SetEndEffectorFrame", _wrap_prmRobotState_SetEndEffectorFrame, METH_VARARGS, "prmRobotState_SetEndEffectorFrame(prmRobotState self, vctFrm3 newValue)"},
	 { "prmRobotState_EndEffectorFrame", _wrap_prmRobotState_EndEffectorFrame, METH_VARARGS, "\n"
		"prmRobotState_EndEffectorFrame(prmRobotState self) -> vctFrm3\n"
		"prmRobotState_EndEffectorFrame(prmRobotState self) -> vctFrm3\n"
		""},
	 { "prmRobotState_GetEndEffectorFrame", _wrap_prmRobotState_GetEndEffectorFrame, METH_VARARGS, "\n"
		"prmRobotState_GetEndEffectorFrame(prmRobotState self, vctFrm3 placeHolder)\n"
		"prmRobotState_GetEndEffectorFrame(prmRobotState self) -> vctFrm3\n"
		""},
	 { "prmRobotState_swigregister", prmRobotState_swigregister, METH_O, NULL},
	 { "prmRobotState_swiginit", prmRobotState_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctMatRot3 > *) ((mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt2 > *) ((mtsGenericObjectProxy< vctInt2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_mtsComponentState_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< mtsComponentState > *) ((mtsGenericObjectProxy< mtsComponentState > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_mtsComponentState_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< mtsComponentState > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt2 > *) ((mtsGenericObjectProxy< vctUInt2 > *) x));
}
static void *_p_mtsVectorT_bool_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< bool > *) x));
}
static void *_p_mtsGenericObjectProxyT_bool_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< bool > *) ((mtsGenericObjectProxy< bool > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_bool_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< bool > *) x));
}
static void *_p_cmnGenericObjectProxyT_bool_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< bool > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar9 > *) ((mtsGenericObjectProxy< vctUChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar9 > *) ((mtsGenericObjectProxy< vctChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool9 > *) ((mtsGenericObjectProxy< vctBool9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< mtsInterfaceProvidedDescription > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct4 > *) ((mtsGenericObjectProxy< vct4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong8 > *) ((mtsGenericObjectProxy< vctLong8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong8 > *) ((mtsGenericObjectProxy< vctULong8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort2 > *) ((mtsGenericObjectProxy< vctUShort2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort2 > *) ((mtsGenericObjectProxy< vctShort2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort2 > *) x));
}
static void *_p_prmPositionJointSetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmPositionJointSet *) x));
}
static void *_p_prmVelocityJointSetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(prmMotionBase *) ((prmVelocityJointSet *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat6 > *) ((mtsGenericObjectProxy< vctFloat6 > *) x));
}
static void *_p_prmEventButtonTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmEventButton *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt3 > *) ((mtsGenericObjectProxy< vctInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt3 > *) ((mtsGenericObjectProxy< vctUInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUCharVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUCharVec > *) ((mtsGenericObjectProxy< vctUCharVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUCharVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUCharVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctCharVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctCharVec > *) ((mtsGenericObjectProxy< vctCharVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctCharVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctCharVec > *) x));
}
static void *_p_mtsFloatQuatTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatQuat *) x));
}
static void *_p_mtsGenericObjectProxyT_vct5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct5 > *) ((mtsGenericObjectProxy< vct5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong9 > *) ((mtsGenericObjectProxy< vctLong9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong9 > *) ((mtsGenericObjectProxy< vctULong9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULongVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULongVec > *) ((mtsGenericObjectProxy< vctULongVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULongVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULongVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLongVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLongVec > *) ((mtsGenericObjectProxy< vctLongVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLongVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLongVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort3 > *) ((mtsGenericObjectProxy< vctUShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort3 > *) ((mtsGenericObjectProxy< vctShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort3 > *) x));
}
static void *_p_mtsInterfaceTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((mtsInterface *) x));
}
static void *_p_mtsManagerLocalInterfaceTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((mtsManagerLocalInterface *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat7 > *) ((mtsGenericObjectProxy< vctFloat7 > *) x));
}
static void *_p_mtsGenericObjectTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((mtsGenericObject *) x));
}
static void *_p_mtsMatrixT_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsMatrix< short > *) x));
}
static void *_p_mtsVectorT_unsigned_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< unsigned short > *) x));
}
static void *_p_mtsVectorT_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< short > *) x));
}
static void *_p_mtsGenericObjectProxyT_unsigned_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< unsigned short > *) ((mtsGenericObjectProxy< unsigned short > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_unsigned_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< unsigned short > *) x));
}
static void *_p_mtsGenericObjectProxyT_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< short > *) ((mtsGenericObjectProxy< short > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< short > *) x));
}
static void *_p_cmnGenericObjectProxyT_unsigned_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< unsigned short > *) x));
}
static void *_p_cmnGenericObjectProxyT_short_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< short > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt4 > *) ((mtsGenericObjectProxy< vctInt4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt4 > *) ((mtsGenericObjectProxy< vctUInt4 > *) x));
}
static void *_p_mtsVectorT_unsigned_char_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< unsigned char > *) x));
}
static void *_p_mtsVectorT_char_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< char > *) x));
}
static void *_p_mtsDoubleMatRot2To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleMatRot2 *) x));
}
static void *_p_mtsFloatMatRot2To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatMatRot2 *) x));
}
static void *_p_mtsDoubleQuatRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleQuatRot3 *) x));
}
static void *_p_mtsFloatQuatRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatQuatRot3 *) x));
}
static void *_p_mtsDoubleMatRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleMatRot3 *) x));
}
static void *_p_mtsFloatMatRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatMatRot3 *) x));
}
static void *_p_mtsTaskMainTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *)(mtsTask *)(mtsTaskContinuous *) ((mtsTaskMain *) x));
}
static void *_p_prmPositionCartesianGetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmPositionCartesianGet *) x));
}
static void *_p_prmVelocityCartesianGetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmVelocityCartesianGet *) x));
}
static void *_p_prmForceCartesianGetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmForceCartesianGet *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFrm3 > *) ((mtsGenericObjectProxy< vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > > *) x));
}
static void *_p_mtsTaskContinuousTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *)(mtsTask *) ((mtsTaskContinuous *) x));
}
static void *_p_mtsGenericObjectProxyT_vct6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct6 > *) ((mtsGenericObjectProxy< vct6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort4 > *) ((mtsGenericObjectProxy< vctUShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort4 > *) ((mtsGenericObjectProxy< vctShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< std::vector< std::string,std::allocator< std::string > > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat8 > *) ((mtsGenericObjectProxy< vctFloat8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< std::vector< double,std::allocator< double > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar1 > *) ((mtsGenericObjectProxy< vctUChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar1 > *) ((mtsGenericObjectProxy< vctChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar1 > *) x));
}
static void *_p_prmMotionBaseTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmMotionBase *) x));
}
static void *_p_osaTimeServerTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((osaTimeServer *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool1 > *) ((mtsGenericObjectProxy< vctBool1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool1 > *) x));
}
static void *_p_mtsTaskTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *) ((mtsTask *) x));
}
static void *_p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< mtsInterfaceRequiredDescription > *) ((mtsGenericObjectProxy< mtsInterfaceRequiredDescription > *) x));
}
static void *_p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< mtsInterfaceProvidedDescription > *) ((mtsGenericObjectProxy< mtsInterfaceProvidedDescription > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt5 > *) ((mtsGenericObjectProxy< vctInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt5 > *) ((mtsGenericObjectProxy< vctUInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt5 > *) x));
}
static void *_p_mtsInterfaceProvidedTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsInterface *) ((mtsInterfaceProvided *) x));
}
static void *_p_mtsGenericObjectProxyT_vct7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct7 > *) ((mtsGenericObjectProxy< vct7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct7 > *) x));
}
static void *_p_prmPositionCartesianSetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(prmMotionBase *) ((prmPositionCartesianSet *) x));
}
static void *_p_prmVelocityCartesianSetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(prmMotionBase *) ((prmVelocityCartesianSet *) x));
}
static void *_p_prmForceCartesianSetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(prmMotionBase *) ((prmForceCartesianSet *) x));
}
static void *_p_mtsGenericObjectProxyT_vctDoubleVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctDoubleVec > *) ((mtsGenericObjectProxy< vctDoubleVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctDoubleVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctDoubleVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort5 > *) ((mtsGenericObjectProxy< vctUShort5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort5 > *) ((mtsGenericObjectProxy< vctShort5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort5 > *) x));
}
static void *_p_prmRobotStateTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmRobotState *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat9 > *) ((mtsGenericObjectProxy< vctFloat9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar2 > *) ((mtsGenericObjectProxy< vctUChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar2 > *) ((mtsGenericObjectProxy< vctChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool2 > *) ((mtsGenericObjectProxy< vctBool2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt6 > *) ((mtsGenericObjectProxy< vctInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt6 > *) ((mtsGenericObjectProxy< vctUInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong1 > *) ((mtsGenericObjectProxy< vctLong1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong1 > *) ((mtsGenericObjectProxy< vctULong1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloatMat_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloatMat > *) ((mtsGenericObjectProxy< vctFloatMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloatMat_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloatMat > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctIntMat_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctIntMat > *) ((mtsGenericObjectProxy< vctIntMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctIntMat_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctIntMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct8 > *) ((mtsGenericObjectProxy< vct8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< stdDoubleVec > *) ((mtsGenericObjectProxy< std::vector< double,std::allocator< double > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort6 > *) ((mtsGenericObjectProxy< vctUShort6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort6 > *) ((mtsGenericObjectProxy< vctShort6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort6 > *) x));
}
static void *_p_mtsIntervalStatisticsTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsIntervalStatistics *) x));
}
static void *_p_mtsDoubleRodRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleRodRot3 *) x));
}
static void *_p_mtsFloatRodRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatRodRot3 *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar3 > *) ((mtsGenericObjectProxy< vctUChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar3 > *) ((mtsGenericObjectProxy< vctChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool3 > *) ((mtsGenericObjectProxy< vctBool3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool3 > *) x));
}
static void *_p_mtsTaskPeriodicConstructorArgTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsTaskPeriodicConstructorArg *) x));
}
static void *_p_mtsTaskContinuousConstructorArgTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsTaskContinuousConstructorArg *) x));
}
static void *_p_mtsTaskConstructorArgTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsTaskConstructorArg *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt7 > *) ((mtsGenericObjectProxy< vctInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt7 > *) ((mtsGenericObjectProxy< vctUInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong2 > *) ((mtsGenericObjectProxy< vctLong2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong2 > *) ((mtsGenericObjectProxy< vctULong2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct9 > *) ((mtsGenericObjectProxy< vct9 > *) x));
}
static void *_p_cmnPathTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnPath *) x));
}
static void *_p_mtsInterfaceRequiredTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsInterface *) ((mtsInterfaceRequired *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort7 > *) ((mtsGenericObjectProxy< vctUShort7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort7 > *) ((mtsGenericObjectProxy< vctShort7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort7 > *) x));
}
static void *_p_mtsVectorT_unsigned_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< unsigned int > *) x));
}
static void *_p_mtsGenericObjectProxyT_unsigned_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< unsigned int > *) ((mtsGenericObjectProxy< unsigned int > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_unsigned_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< unsigned int > *) x));
}
static void *_p_cmnGenericObjectProxyT_unsigned_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< unsigned int > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_unsigned_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsComponentConstructorNameAndArg< unsigned int > *) x));
}
static void *_p_mtsCollectorStateTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *)(mtsTask *)(mtsTaskContinuous *)(mtsTaskFromSignal *)(mtsCollectorBase *) ((mtsCollectorState *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar4 > *) ((mtsGenericObjectProxy< vctUChar4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar4 > *) ((mtsGenericObjectProxy< vctChar4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar4 > *) x));
}
static void *_p_mtsDoubleQuatTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleQuat *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< std::vector< char,std::allocator< char > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< stdCharVec > *) ((mtsGenericObjectProxy< std::vector< char,std::allocator< char > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool4 > *) ((mtsGenericObjectProxy< vctBool4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt8 > *) ((mtsGenericObjectProxy< vctInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt8 > *) ((mtsGenericObjectProxy< vctUInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong3 > *) ((mtsGenericObjectProxy< vctLong3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong3 > *) ((mtsGenericObjectProxy< vctULong3 > *) x));
}
static void *_p_mtsManagerLocalTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsManagerLocalInterface *) ((mtsManagerLocal *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat1 > *) ((mtsGenericObjectProxy< vctFloat1 > *) x));
}
static void *_p_mtsMatrixT_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsMatrix< long > *) x));
}
static void *_p_mtsVectorT_unsigned_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< unsigned long > *) x));
}
static void *_p_mtsVectorT_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< long > *) x));
}
static void *_p_mtsGenericObjectProxyT_unsigned_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< unsigned long > *) ((mtsGenericObjectProxy< unsigned long > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_unsigned_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< unsigned long > *) x));
}
static void *_p_mtsGenericObjectProxyT_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< long > *) ((mtsGenericObjectProxy< long > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< long > *) x));
}
static void *_p_cmnGenericObjectProxyT_unsigned_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< unsigned long > *) x));
}
static void *_p_cmnGenericObjectProxyT_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< long > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsComponentConstructorNameAndArg< long > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_unsigned_long_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsComponentConstructorNameAndArg< unsigned long > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort8 > *) ((mtsGenericObjectProxy< vctUShort8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort8 > *) ((mtsGenericObjectProxy< vctShort8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort8 > *) x));
}
static void *_p_mtsVectorT_std__string_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< std::string > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__string_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< std::string > *) ((mtsGenericObjectProxy< std::string > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__string_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< std::string > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_std__string_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsComponentConstructorNameAndArg< std::string > *) x));
}
static void *_p_mtsStateIndexTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsStateIndex *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar5 > *) ((mtsGenericObjectProxy< vctUChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar5 > *) ((mtsGenericObjectProxy< vctChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar5 > *) x));
}
static void *_p_mtsTaskPeriodicTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *)(mtsTask *)(mtsTaskContinuous *) ((mtsTaskPeriodic *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool5 > *) ((mtsGenericObjectProxy< vctBool5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt9 > *) ((mtsGenericObjectProxy< vctInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt9 > *) ((mtsGenericObjectProxy< vctUInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong4 > *) ((mtsGenericObjectProxy< vctLong4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong4 > *) ((mtsGenericObjectProxy< vctULong4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBoolVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBoolVec > *) ((mtsGenericObjectProxy< vctBoolVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBoolVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBoolVec > *) x));
}
static void *_p_mtsComponentWithManagementTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *) ((mtsComponentWithManagement *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat2 > *) ((mtsGenericObjectProxy< vctFloat2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort9 > *) ((mtsGenericObjectProxy< vctUShort9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort9 > *) ((mtsGenericObjectProxy< vctShort9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort9_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort9 > *) x));
}
static void *_p_mtsFloatFrm4x4To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatFrm4x4 *) x));
}
static void *_p_mtsDoubleFrm4x4To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleFrm4x4 *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< mtsInterfaceRequiredDescription > *) x));
}
static void *_p_prmTransformationManagerTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((prmTransformationManager *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar6 > *) ((mtsGenericObjectProxy< vctUChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar6 > *) ((mtsGenericObjectProxy< vctChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool6 > *) ((mtsGenericObjectProxy< vctBool6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct4x4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct4x4 > *) ((mtsGenericObjectProxy< vct4x4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct4x4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct4x4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct3x3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct3x3 > *) ((mtsGenericObjectProxy< vct3x3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct3x3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct3x3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct1 > *) ((mtsGenericObjectProxy< vct1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct2x2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct2x2 > *) ((mtsGenericObjectProxy< vct2x2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct2x2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct2x2 > *) x));
}
static void *_p_mtsTaskFromSignalTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *)(mtsTask *)(mtsTaskContinuous *) ((mtsTaskFromSignal *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong5 > *) ((mtsGenericObjectProxy< vctLong5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong5 > *) ((mtsGenericObjectProxy< vctULong5 > *) x));
}
static void *_p_mtsMatrixT_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsMatrix< int > *) x));
}
static void *_p_mtsVectorT_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< int > *) x));
}
static void *_p_mtsGenericObjectProxyT_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< int > *) ((mtsGenericObjectProxy< int > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< int > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsComponentConstructorNameAndArg< int > *) x));
}
static void *_p_cmnGenericObjectProxyT_int_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< int > *) x));
}
static void *_p_mtsFloatAnRot2To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatAnRot2 *) x));
}
static void *_p_mtsDoubleAxAnRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleAxAnRot3 *) x));
}
static void *_p_mtsFloatAxAnRot3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatAxAnRot3 *) x));
}
static void *_p_mtsDoubleAnRot2To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleAnRot2 *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat3 > *) ((mtsGenericObjectProxy< vctFloat3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< stdStringVec > *) ((mtsGenericObjectProxy< std::vector< std::string,std::allocator< std::string > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctDoubleMat_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctDoubleMat > *) ((mtsGenericObjectProxy< vctDoubleMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctDoubleMat_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctDoubleMat > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar7 > *) ((mtsGenericObjectProxy< vctUChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar7 > *) ((mtsGenericObjectProxy< vctChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool7 > *) ((mtsGenericObjectProxy< vctBool7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool7 > *) x));
}
static void *_p_mtsMatrixT_double_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsMatrix< double > *) x));
}
static void *_p_mtsVectorT_double_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< double > *) x));
}
static void *_p_mtsGenericObjectProxyT_double_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< double > *) ((mtsGenericObjectProxy< double > *) x));
}
static void *_p_cmnGenericObjectProxyT_double_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((cmnGenericObjectProxy< double > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_double_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsComponentConstructorNameAndArg< double > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_double_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< double > *) x));
}
static void *_p_mtsDoubleQuatFrm3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleQuatFrm3 *) x));
}
static void *_p_mtsFloatQuatFrm3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatQuatFrm3 *) x));
}
static void *_p_mtsDoubleMatFrm3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsDoubleMatFrm3 *) x));
}
static void *_p_mtsFloatMatFrm3To_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsFloatMatFrm3 *) x));
}
static void *_p_mtsGenericObjectProxyT_vct2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct2 > *) ((mtsGenericObjectProxy< vct2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct2_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong6 > *) ((mtsGenericObjectProxy< vctLong6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong6_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong6 > *) ((mtsGenericObjectProxy< vctULong6 > *) x));
}
static void *_p_mtsVectorT_float_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsVector< float > *) x));
}
static void *_p_mtsGenericObjectProxyT_float_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< float > *) ((mtsGenericObjectProxy< float > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_float_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< float > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< mtsDescriptionComponentClassVec > *) ((mtsGenericObjectProxy< std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< mtsDescriptionConnectionVec > *) ((mtsGenericObjectProxy< std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > > > *) x));
}
static void *_p_mtsComponentTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((mtsComponent *) x));
}
static void *_p_mtsCollectorBaseTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsComponent *)(mtsTask *)(mtsTaskContinuous *)(mtsTaskFromSignal *) ((mtsCollectorBase *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat4_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat4 > *) ((mtsGenericObjectProxy< vctFloat4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctInt1 > *) ((mtsGenericObjectProxy< vctInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUInt1 > *) ((mtsGenericObjectProxy< vctUInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUChar8 > *) ((mtsGenericObjectProxy< vctUChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctChar8 > *) ((mtsGenericObjectProxy< vctChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloatVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloatVec > *) ((mtsGenericObjectProxy< vctFloatVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloatVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloatVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShortVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShortVec > *) ((mtsGenericObjectProxy< vctUShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShortVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShortVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShortVec > *) ((mtsGenericObjectProxy< vctShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShortVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUIntVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUIntVec > *) ((mtsGenericObjectProxy< vctUIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUIntVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctIntVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctIntVec > *) ((mtsGenericObjectProxy< vctIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctIntVec_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctBool8 > *) ((mtsGenericObjectProxy< vctBool8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool8_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctBool8 > *) x));
}
static void *_p_prmPositionJointGetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmPositionJointGet *) x));
}
static void *_p_prmVelocityJointGetTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((prmVelocityJointGet *) x));
}
static void *_p_mtsGenericObjectProxyT_vct3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vct3 > *) ((mtsGenericObjectProxy< vct3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct3_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vct3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctLong7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctLong7 > *) ((mtsGenericObjectProxy< vctLong7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctULong7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong7_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctULong7 > *) ((mtsGenericObjectProxy< vctULong7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctUShort1 > *) ((mtsGenericObjectProxy< vctUShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctUShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctShort1 > *) ((mtsGenericObjectProxy< vctShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort1_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctShort1 > *) x));
}
static void *_p_mtsManagerComponentServicesTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((mtsManagerComponentServices *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *) ((mtsGenericObjectProxyBase< vctFloat5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat5_tTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *) (mtsGenericObject *)(mtsGenericObjectProxyBase< vctFloat5 > *) ((mtsGenericObjectProxy< vctFloat5 > *) x));
}
static void *_p_osaSerialPortTo_p_cmnGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cmnGenericObject *)  ((osaSerialPort *) x));
}
static void *_p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctMatRot3 > *) ((mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt2 > *) ((mtsGenericObjectProxy< vctInt2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_mtsComponentState_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< mtsComponentState > *) ((mtsGenericObjectProxy< mtsComponentState > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_mtsComponentState_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< mtsComponentState > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt2 > *) ((mtsGenericObjectProxy< vctUInt2 > *) x));
}
static void *_p_mtsVectorT_bool_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< bool > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_bool_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< bool > *) x));
}
static void *_p_mtsGenericObjectProxyT_bool_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< bool > *) ((mtsGenericObjectProxy< bool > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar9 > *) ((mtsGenericObjectProxy< vctUChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar9 > *) ((mtsGenericObjectProxy< vctChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool9 > *) ((mtsGenericObjectProxy< vctBool9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< mtsInterfaceProvidedDescription > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct4 > *) ((mtsGenericObjectProxy< vct4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong8 > *) ((mtsGenericObjectProxy< vctLong8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong8 > *) ((mtsGenericObjectProxy< vctULong8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort2 > *) ((mtsGenericObjectProxy< vctUShort2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort2 > *) ((mtsGenericObjectProxy< vctShort2 > *) x));
}
static void *_p_prmPositionJointSetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmPositionJointSet *) x));
}
static void *_p_prmVelocityJointSetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (prmMotionBase *) ((prmVelocityJointSet *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat6 > *) ((mtsGenericObjectProxy< vctFloat6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat6 > *) x));
}
static void *_p_prmEventButtonTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmEventButton *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt3 > *) ((mtsGenericObjectProxy< vctInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt3 > *) ((mtsGenericObjectProxy< vctUInt3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUCharVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUCharVec > *) ((mtsGenericObjectProxy< vctUCharVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUCharVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUCharVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctCharVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctCharVec > *) ((mtsGenericObjectProxy< vctCharVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctCharVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctCharVec > *) x));
}
static void *_p_mtsFloatQuatTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatQuat *) x));
}
static void *_p_mtsGenericObjectProxyT_vct5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct5 > *) ((mtsGenericObjectProxy< vct5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong9 > *) ((mtsGenericObjectProxy< vctLong9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong9 > *) ((mtsGenericObjectProxy< vctULong9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULongVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULongVec > *) ((mtsGenericObjectProxy< vctULongVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULongVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULongVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLongVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLongVec > *) ((mtsGenericObjectProxy< vctLongVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLongVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLongVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort3 > *) ((mtsGenericObjectProxy< vctUShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort3 > *) ((mtsGenericObjectProxy< vctShort3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat7 > *) ((mtsGenericObjectProxy< vctFloat7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat7 > *) x));
}
static void *_p_mtsMatrixT_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsMatrix< short > *) x));
}
static void *_p_mtsVectorT_unsigned_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< unsigned short > *) x));
}
static void *_p_mtsVectorT_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< short > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< short > *) x));
}
static void *_p_mtsGenericObjectProxyT_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< short > *) ((mtsGenericObjectProxy< short > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_unsigned_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< unsigned short > *) x));
}
static void *_p_mtsGenericObjectProxyT_unsigned_short_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< unsigned short > *) ((mtsGenericObjectProxy< unsigned short > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt4 > *) ((mtsGenericObjectProxy< vctInt4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt4 > *) ((mtsGenericObjectProxy< vctUInt4 > *) x));
}
static void *_p_mtsVectorT_unsigned_char_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< unsigned char > *) x));
}
static void *_p_mtsVectorT_char_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< char > *) x));
}
static void *_p_mtsFloatMatRot2To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatMatRot2 *) x));
}
static void *_p_mtsDoubleMatRot2To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleMatRot2 *) x));
}
static void *_p_mtsFloatMatRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatMatRot3 *) x));
}
static void *_p_mtsDoubleMatRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleMatRot3 *) x));
}
static void *_p_mtsFloatQuatRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatQuatRot3 *) x));
}
static void *_p_mtsDoubleQuatRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleQuatRot3 *) x));
}
static void *_p_prmForceCartesianGetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmForceCartesianGet *) x));
}
static void *_p_prmVelocityCartesianGetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmVelocityCartesianGet *) x));
}
static void *_p_prmPositionCartesianGetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmPositionCartesianGet *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFrm3 > *) ((mtsGenericObjectProxy< vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct6 > *) ((mtsGenericObjectProxy< vct6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort4 > *) ((mtsGenericObjectProxy< vctUShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort4 > *) ((mtsGenericObjectProxy< vctShort4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< std::vector< std::string,std::allocator< std::string > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat8 > *) ((mtsGenericObjectProxy< vctFloat8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat8 > *) x));
}
static void *_p_prmMotionBaseTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmMotionBase *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< std::vector< double,std::allocator< double > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar1 > *) ((mtsGenericObjectProxy< vctUChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar1 > *) ((mtsGenericObjectProxy< vctChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool1 > *) ((mtsGenericObjectProxy< vctBool1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< mtsInterfaceRequiredDescription > *) ((mtsGenericObjectProxy< mtsInterfaceRequiredDescription > *) x));
}
static void *_p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< mtsInterfaceProvidedDescription > *) ((mtsGenericObjectProxy< mtsInterfaceProvidedDescription > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > > > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt5 > *) ((mtsGenericObjectProxy< vctInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt5 > *) ((mtsGenericObjectProxy< vctUInt5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct7 > *) ((mtsGenericObjectProxy< vct7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct7 > *) x));
}
static void *_p_prmVelocityCartesianSetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (prmMotionBase *) ((prmVelocityCartesianSet *) x));
}
static void *_p_prmPositionCartesianSetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (prmMotionBase *) ((prmPositionCartesianSet *) x));
}
static void *_p_prmForceCartesianSetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (prmMotionBase *) ((prmForceCartesianSet *) x));
}
static void *_p_mtsGenericObjectProxyT_vctDoubleVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctDoubleVec > *) ((mtsGenericObjectProxy< vctDoubleVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctDoubleVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctDoubleVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort5 > *) ((mtsGenericObjectProxy< vctUShort5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort5 > *) ((mtsGenericObjectProxy< vctShort5 > *) x));
}
static void *_p_prmRobotStateTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmRobotState *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat9 > *) ((mtsGenericObjectProxy< vctFloat9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar2 > *) ((mtsGenericObjectProxy< vctUChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar2 > *) ((mtsGenericObjectProxy< vctChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool2 > *) ((mtsGenericObjectProxy< vctBool2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt6 > *) ((mtsGenericObjectProxy< vctInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt6 > *) ((mtsGenericObjectProxy< vctUInt6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong1 > *) ((mtsGenericObjectProxy< vctLong1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong1 > *) ((mtsGenericObjectProxy< vctULong1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloatMat_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloatMat > *) ((mtsGenericObjectProxy< vctFloatMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloatMat_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloatMat > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctIntMat_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctIntMat > *) ((mtsGenericObjectProxy< vctIntMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctIntMat_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctIntMat > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct8 > *) ((mtsGenericObjectProxy< vct8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< stdDoubleVec > *) ((mtsGenericObjectProxy< std::vector< double,std::allocator< double > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort6 > *) ((mtsGenericObjectProxy< vctUShort6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort6 > *) ((mtsGenericObjectProxy< vctShort6 > *) x));
}
static void *_p_mtsIntervalStatisticsTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsIntervalStatistics *) x));
}
static void *_p_mtsFloatRodRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatRodRot3 *) x));
}
static void *_p_mtsDoubleRodRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleRodRot3 *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar3 > *) ((mtsGenericObjectProxy< vctUChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar3 > *) ((mtsGenericObjectProxy< vctChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool3 > *) ((mtsGenericObjectProxy< vctBool3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool3 > *) x));
}
static void *_p_mtsTaskPeriodicConstructorArgTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsTaskPeriodicConstructorArg *) x));
}
static void *_p_mtsTaskContinuousConstructorArgTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsTaskContinuousConstructorArg *) x));
}
static void *_p_mtsTaskConstructorArgTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsTaskConstructorArg *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt7 > *) ((mtsGenericObjectProxy< vctInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt7 > *) ((mtsGenericObjectProxy< vctUInt7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong2 > *) ((mtsGenericObjectProxy< vctLong2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong2 > *) ((mtsGenericObjectProxy< vctULong2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct9 > *) ((mtsGenericObjectProxy< vct9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort7 > *) ((mtsGenericObjectProxy< vctUShort7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort7 > *) ((mtsGenericObjectProxy< vctShort7 > *) x));
}
static void *_p_mtsVectorT_unsigned_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< unsigned int > *) x));
}
static void *_p_mtsGenericObjectProxyT_unsigned_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< unsigned int > *) ((mtsGenericObjectProxy< unsigned int > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_unsigned_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< unsigned int > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_unsigned_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsComponentConstructorNameAndArg< unsigned int > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar4 > *) ((mtsGenericObjectProxy< vctUChar4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar4 > *) ((mtsGenericObjectProxy< vctChar4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar4 > *) x));
}
static void *_p_mtsDoubleQuatTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleQuat *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< std::vector< char,std::allocator< char > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< stdCharVec > *) ((mtsGenericObjectProxy< std::vector< char,std::allocator< char > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool4 > *) ((mtsGenericObjectProxy< vctBool4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt8 > *) ((mtsGenericObjectProxy< vctInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt8 > *) ((mtsGenericObjectProxy< vctUInt8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong3 > *) ((mtsGenericObjectProxy< vctLong3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong3 > *) ((mtsGenericObjectProxy< vctULong3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat1 > *) ((mtsGenericObjectProxy< vctFloat1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat1 > *) x));
}
static void *_p_mtsMatrixT_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsMatrix< long > *) x));
}
static void *_p_mtsVectorT_unsigned_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< unsigned long > *) x));
}
static void *_p_mtsVectorT_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< long > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_unsigned_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsComponentConstructorNameAndArg< unsigned long > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsComponentConstructorNameAndArg< long > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< long > *) x));
}
static void *_p_mtsGenericObjectProxyT_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< long > *) ((mtsGenericObjectProxy< long > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_unsigned_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< unsigned long > *) x));
}
static void *_p_mtsGenericObjectProxyT_unsigned_long_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< unsigned long > *) ((mtsGenericObjectProxy< unsigned long > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort8 > *) ((mtsGenericObjectProxy< vctUShort8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort8 > *) ((mtsGenericObjectProxy< vctShort8 > *) x));
}
static void *_p_mtsVectorT_std__string_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< std::string > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_std__string_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsComponentConstructorNameAndArg< std::string > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_std__string_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< std::string > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__string_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< std::string > *) ((mtsGenericObjectProxy< std::string > *) x));
}
static void *_p_mtsStateIndexTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsStateIndex *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar5 > *) ((mtsGenericObjectProxy< vctUChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar5 > *) ((mtsGenericObjectProxy< vctChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool5 > *) ((mtsGenericObjectProxy< vctBool5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt9 > *) ((mtsGenericObjectProxy< vctInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt9 > *) ((mtsGenericObjectProxy< vctUInt9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong4 > *) ((mtsGenericObjectProxy< vctLong4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong4 > *) ((mtsGenericObjectProxy< vctULong4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBoolVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBoolVec > *) ((mtsGenericObjectProxy< vctBoolVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBoolVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBoolVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat2 > *) ((mtsGenericObjectProxy< vctFloat2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat2 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort9 > *) ((mtsGenericObjectProxy< vctUShort9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort9 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort9 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort9_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort9 > *) ((mtsGenericObjectProxy< vctShort9 > *) x));
}
static void *_p_mtsFloatFrm4x4To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatFrm4x4 *) x));
}
static void *_p_mtsDoubleFrm4x4To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleFrm4x4 *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< mtsInterfaceRequiredDescription > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar6 > *) ((mtsGenericObjectProxy< vctUChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar6 > *) ((mtsGenericObjectProxy< vctChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool6 > *) ((mtsGenericObjectProxy< vctBool6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct4x4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct4x4 > *) ((mtsGenericObjectProxy< vct4x4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct4x4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct4x4 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct3x3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct3x3 > *) ((mtsGenericObjectProxy< vct3x3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct3x3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct3x3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct1 > *) ((mtsGenericObjectProxy< vct1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vct2x2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct2x2 > *) ((mtsGenericObjectProxy< vct2x2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct2x2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct2x2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong5 > *) ((mtsGenericObjectProxy< vctLong5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong5 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong5 > *) ((mtsGenericObjectProxy< vctULong5 > *) x));
}
static void *_p_mtsFloatAnRot2To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatAnRot2 *) x));
}
static void *_p_mtsMatrixT_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsMatrix< int > *) x));
}
static void *_p_mtsVectorT_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< int > *) x));
}
static void *_p_mtsGenericObjectProxyT_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< int > *) ((mtsGenericObjectProxy< int > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< int > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_int_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsComponentConstructorNameAndArg< int > *) x));
}
static void *_p_mtsDoubleAnRot2To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleAnRot2 *) x));
}
static void *_p_mtsFloatAxAnRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatAxAnRot3 *) x));
}
static void *_p_mtsDoubleAxAnRot3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleAxAnRot3 *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat3 > *) ((mtsGenericObjectProxy< vctFloat3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat3 > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< stdStringVec > *) ((mtsGenericObjectProxy< std::vector< std::string,std::allocator< std::string > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctDoubleMat_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctDoubleMat > *) ((mtsGenericObjectProxy< vctDoubleMat > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctDoubleMat_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctDoubleMat > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar7 > *) ((mtsGenericObjectProxy< vctUChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar7 > *) ((mtsGenericObjectProxy< vctChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool7 > *) ((mtsGenericObjectProxy< vctBool7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool7 > *) x));
}
static void *_p_mtsMatrixT_double_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsMatrix< double > *) x));
}
static void *_p_mtsVectorT_double_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< double > *) x));
}
static void *_p_mtsGenericObjectProxyT_double_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< double > *) ((mtsGenericObjectProxy< double > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_double_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< double > *) x));
}
static void *_p_mtsComponentConstructorNameAndArgT_double_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsComponentConstructorNameAndArg< double > *) x));
}
static void *_p_mtsFloatMatFrm3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatMatFrm3 *) x));
}
static void *_p_mtsDoubleMatFrm3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleMatFrm3 *) x));
}
static void *_p_mtsFloatQuatFrm3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsFloatQuatFrm3 *) x));
}
static void *_p_mtsDoubleQuatFrm3To_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsDoubleQuatFrm3 *) x));
}
static void *_p_mtsGenericObjectProxyT_vct2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct2 > *) ((mtsGenericObjectProxy< vct2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct2_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct2 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong6 > *) ((mtsGenericObjectProxy< vctLong6 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong6 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong6_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong6 > *) ((mtsGenericObjectProxy< vctULong6 > *) x));
}
static void *_p_mtsVectorT_float_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsVector< float > *) x));
}
static void *_p_mtsGenericObjectProxyT_float_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< float > *) ((mtsGenericObjectProxy< float > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_float_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< float > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< mtsDescriptionComponentClassVec > *) ((mtsGenericObjectProxy< std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< mtsDescriptionConnectionVec > *) ((mtsGenericObjectProxy< std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > > > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat4 > *) ((mtsGenericObjectProxy< vctFloat4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat4_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat4 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctInt1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctInt1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctInt1 > *) ((mtsGenericObjectProxy< vctInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUInt1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUInt1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUInt1 > *) ((mtsGenericObjectProxy< vctUInt1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUChar8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUChar8 > *) ((mtsGenericObjectProxy< vctUChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUChar8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctChar8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctChar8 > *) ((mtsGenericObjectProxy< vctChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctChar8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctChar8 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloatVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloatVec > *) ((mtsGenericObjectProxy< vctFloatVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloatVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloatVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShortVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShortVec > *) ((mtsGenericObjectProxy< vctUShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShortVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShortVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShortVec > *) ((mtsGenericObjectProxy< vctShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShortVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShortVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUIntVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUIntVec > *) ((mtsGenericObjectProxy< vctUIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUIntVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctIntVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctIntVec > *) ((mtsGenericObjectProxy< vctIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctIntVec_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctIntVec > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctBool8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctBool8 > *) ((mtsGenericObjectProxy< vctBool8 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctBool8_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctBool8 > *) x));
}
static void *_p_prmPositionJointGetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmPositionJointGet *) x));
}
static void *_p_prmVelocityJointGetTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((prmVelocityJointGet *) x));
}
static void *_p_mtsGenericObjectProxyT_vct3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vct3 > *) ((mtsGenericObjectProxy< vct3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vct3_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vct3 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctLong7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctLong7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctLong7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctLong7 > *) ((mtsGenericObjectProxy< vctLong7 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctULong7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctULong7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctULong7_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctULong7 > *) ((mtsGenericObjectProxy< vctULong7 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctUShort1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctUShort1 > *) ((mtsGenericObjectProxy< vctUShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctUShort1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctUShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctShort1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctShort1_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctShort1 > *) ((mtsGenericObjectProxy< vctShort1 > *) x));
}
static void *_p_mtsGenericObjectProxyT_vctFloat5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *) (mtsGenericObjectProxyBase< vctFloat5 > *) ((mtsGenericObjectProxy< vctFloat5 > *) x));
}
static void *_p_mtsGenericObjectProxyBaseT_vctFloat5_tTo_p_mtsGenericObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsGenericObject *)  ((mtsGenericObjectProxyBase< vctFloat5 > *) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_prmTransformationDynamicTo_p_prmTransformationBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((prmTransformationBase *)  ((prmTransformationDynamic *) x));
}
static void *_p_prmTransformationFixedTo_p_prmTransformationBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((prmTransformationBase *)  ((prmTransformationFixed *) x));
}
static void *_p_prmVelocityJointSetTo_p_prmMotionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((prmMotionBase *)  ((prmVelocityJointSet *) x));
}
static void *_p_prmPositionCartesianSetTo_p_prmMotionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((prmMotionBase *)  ((prmPositionCartesianSet *) x));
}
static void *_p_prmVelocityCartesianSetTo_p_prmMotionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((prmMotionBase *)  ((prmVelocityCartesianSet *) x));
}
static void *_p_prmForceCartesianSetTo_p_prmMotionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((prmMotionBase *)  ((prmForceCartesianSet *) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_mtsTaskMainTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *) (mtsTask *)(mtsTaskContinuous *) ((mtsTaskMain *) x));
}
static void *_p_mtsTaskTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *)  ((mtsTask *) x));
}
static void *_p_mtsTaskContinuousTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *) (mtsTask *) ((mtsTaskContinuous *) x));
}
static void *_p_mtsComponentWithManagementTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *)  ((mtsComponentWithManagement *) x));
}
static void *_p_mtsTaskFromSignalTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *) (mtsTask *)(mtsTaskContinuous *) ((mtsTaskFromSignal *) x));
}
static void *_p_mtsCollectorStateTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *) (mtsTask *)(mtsTaskContinuous *)(mtsTaskFromSignal *)(mtsCollectorBase *) ((mtsCollectorState *) x));
}
static void *_p_mtsTaskPeriodicTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *) (mtsTask *)(mtsTaskContinuous *) ((mtsTaskPeriodic *) x));
}
static void *_p_mtsCollectorBaseTo_p_mtsComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mtsComponent *) (mtsTask *)(mtsTaskContinuous *)(mtsTaskFromSignal *) ((mtsCollectorBase *) x));
}
static void *_p_mtsDoubleMatFrm3To_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *)  ((mtsDoubleMatFrm3 *) x));
}
static void *_p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_tTo_p_std__basic_streambufT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_streambuf< char,std::char_traits< char > > *)  ((cmnLODMultiplexerStreambuf< char > *) x));
}
static void *_p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_tTo_p_std__basic_streambufT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_streambuf< char,std::char_traits< char > > *)  ((cmnCallbackStreambuf< char > *) x));
}
static swig_type_info _swigt__p_ActionType = {"_p_ActionType", "ActionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AngleType = {"_p_AngleType", "AngleType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BaseClassType = {"_p_BaseClassType", "BaseClassType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BaseType = {"_p_BaseType", "BaseType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoolType = {"_p_BoolType", "BoolType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CallableType = {"_p_CallableType", "CallableType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelContainerType = {"_p_ChannelContainerType", "ChannelContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelType = {"_p_ChannelType", "ChannelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollectorFileFloatingNotation = {"_p_CollectorFileFloatingNotation", "CollectorFileFloatingNotation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollectorFileFormat = {"_p_CollectorFileFormat", "CollectorFileFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandInternalMapType = {"_p_CommandInternalMapType", "CommandInternalMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandQualifiedReadMapType = {"_p_CommandQualifiedReadMapType", "CommandQualifiedReadMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandReadMapType = {"_p_CommandReadMapType", "CommandReadMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandType = {"_p_CommandType", "CommandType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandVoidMapType = {"_p_CommandVoidMapType", "CommandVoidMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandVoidReturnMapType = {"_p_CommandVoidReturnMapType", "CommandVoidReturnMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandWriteMapType = {"_p_CommandWriteMapType", "CommandWriteMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommandWriteReturnMapType = {"_p_CommandWriteReturnMapType", "CommandWriteReturnMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstForceType = {"_p_ConstForceType", "ConstForceType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstIteratorType = {"_p_ConstIteratorType", "ConstIteratorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstTorqueType = {"_p_ConstTorqueType", "ConstTorqueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContainerType = {"_p_ContainerType", "ContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DeRefType = {"_p_DeRefType", "DeRefType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElementType = {"_p_ElementType", "ElementType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntryType = {"_p_EntryType", "EntryType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventType = {"_p_EventType", "EventType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventVoidMapType = {"_p_EventVoidMapType", "EventVoidMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventWriteMapType = {"_p_EventWriteMapType", "EventWriteMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ForceType = {"_p_ForceType", "ForceType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IteratorType = {"_p_IteratorType", "IteratorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskType = {"_p_MaskType", "MaskType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiplexerConstIteratorType = {"_p_MultiplexerConstIteratorType", "MultiplexerConstIteratorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiplexerContainerType = {"_p_MultiplexerContainerType", "MultiplexerContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiplexerIteratorType = {"_p_MultiplexerIteratorType", "MultiplexerIteratorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeListType = {"_p_NodeListType", "NodeListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NormType = {"_p_NormType", "NormType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefType = {"_p_RefType", "RefType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RotationType = {"_p_RotationType", "RotationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ServicesContainerType = {"_p_ServicesContainerType", "ServicesContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamBufType = {"_p_StreamBufType", "StreamBufType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ThisType = {"_p_ThisType", "ThisType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TimeTicksType = {"_p_TimeTicksType", "TimeTicksType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TorqueType = {"_p_TorqueType", "TorqueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TranslationType = {"_p_TranslationType", "TranslationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeTraits = {"_p_TypeTraits", "TypeTraits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VaArgPromotion = {"_p_VaArgPromotion", "VaArgPromotion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType = {"_p_VectorType", "VectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnClassServicesBase = {"_p_cmnClassServicesBase", "cmnClassServicesBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnDataFormat = {"_p_cmnDataFormat", "cmnDataFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObject = {"_p_cmnGenericObject", "cmnGenericObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort8_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort8_t = {"_p_mtsGenericObjectProxyBaseT_vctShort8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_unsigned_int_t = {"_p_mtsGenericObjectProxyBaseT_unsigned_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_int_t = {"_p_mtsGenericObjectProxyBaseT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_std__string_t = {"_p_mtsGenericObjectProxyBaseT_std__string_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar5_t = {"_p_mtsGenericObjectProxyBaseT_vctChar5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar5_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool5_t = {"_p_mtsGenericObjectProxyBaseT_vctBool5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt9_t = {"_p_mtsGenericObjectProxyBaseT_vctInt9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt9_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong4_t = {"_p_mtsGenericObjectProxyBaseT_vctULong4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong4_t = {"_p_mtsGenericObjectProxyBaseT_vctLong4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBoolVec_t = {"_p_mtsGenericObjectProxyBaseT_vctBoolVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat2_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort9_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort9_t = {"_p_mtsGenericObjectProxyBaseT_vctShort9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar6_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar6_t = {"_p_mtsGenericObjectProxyBaseT_vctChar6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatQuat = {"_p_mtsFloatQuat", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool6_t = {"_p_mtsGenericObjectProxyBaseT_vctBool6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct4x4_t = {"_p_mtsGenericObjectProxyBaseT_vct4x4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct1_t = {"_p_mtsGenericObjectProxyBaseT_vct1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct3x3_t = {"_p_mtsGenericObjectProxyBaseT_vct3x3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct2x2_t = {"_p_mtsGenericObjectProxyBaseT_vct2x2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong5_t = {"_p_mtsGenericObjectProxyBaseT_vctLong5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong5_t = {"_p_mtsGenericObjectProxyBaseT_vctULong5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsInterface = {"_p_mtsInterface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsManagerLocalInterface = {"_p_mtsManagerLocalInterface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat3_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t = {"_p_mtsGenericObjectProxyBaseT_vctDoubleMat_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatMatRot2 = {"_p_mtsFloatMatRot2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsDoubleMatRot2 = {"_p_mtsDoubleMatRot2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatMatRot3 = {"_p_mtsFloatMatRot3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatQuatRot3 = {"_p_mtsFloatQuatRot3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsTaskMain = {"_p_mtsTaskMain", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar7_t = {"_p_mtsGenericObjectProxyBaseT_vctChar7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar7_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool7_t = {"_p_mtsGenericObjectProxyBaseT_vctBool7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_double_t = {"_p_mtsGenericObjectProxyBaseT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsTaskContinuous = {"_p_mtsTaskContinuous", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct2_t = {"_p_mtsGenericObjectProxyBaseT_vct2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong6_t = {"_p_mtsGenericObjectProxyBaseT_vctULong6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong6_t = {"_p_mtsGenericObjectProxyBaseT_vctLong6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_float_t = {"_p_mtsGenericObjectProxyBaseT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat4_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osaTimeServer = {"_p_osaTimeServer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t = {"_p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsTask = {"_p_mtsTask", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt1_t = {"_p_mtsGenericObjectProxyBaseT_vctInt1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt1_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t = {"_p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsInterfaceProvided = {"_p_mtsInterfaceProvided", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar8_t = {"_p_mtsGenericObjectProxyBaseT_vctChar8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar8_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloatVec_t = {"_p_mtsGenericObjectProxyBaseT_vctFloatVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctIntVec_t = {"_p_mtsGenericObjectProxyBaseT_vctIntVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUIntVec_t = {"_p_mtsGenericObjectProxyBaseT_vctUIntVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShortVec_t = {"_p_mtsGenericObjectProxyBaseT_vctShortVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShortVec_t = {"_p_mtsGenericObjectProxyBaseT_vctUShortVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool8_t = {"_p_mtsGenericObjectProxyBaseT_vctBool8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct3_t = {"_p_mtsGenericObjectProxyBaseT_vct3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong7_t = {"_p_mtsGenericObjectProxyBaseT_vctULong7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong7_t = {"_p_mtsGenericObjectProxyBaseT_vctLong7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort1_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort1_t = {"_p_mtsGenericObjectProxyBaseT_vctShort1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat5_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt2_t = {"_p_mtsGenericObjectProxyBaseT_vctInt2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt2_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_mtsComponentState_t = {"_p_mtsGenericObjectProxyBaseT_mtsComponentState_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_bool_t = {"_p_mtsGenericObjectProxyBaseT_bool_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar9_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar9_t = {"_p_mtsGenericObjectProxyBaseT_vctChar9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool9_t = {"_p_mtsGenericObjectProxyBaseT_vctBool9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct4_t = {"_p_mtsGenericObjectProxyBaseT_vct4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong8_t = {"_p_mtsGenericObjectProxyBaseT_vctULong8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong8_t = {"_p_mtsGenericObjectProxyBaseT_vctLong8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort2_t = {"_p_mtsGenericObjectProxyBaseT_vctShort2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort2_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsIntervalStatistics = {"_p_mtsIntervalStatistics", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatRodRot3 = {"_p_mtsFloatRodRot3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat6_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt3_t = {"_p_mtsGenericObjectProxyBaseT_vctInt3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt3_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUCharVec_t = {"_p_mtsGenericObjectProxyBaseT_vctUCharVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctCharVec_t = {"_p_mtsGenericObjectProxyBaseT_vctCharVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct5_t = {"_p_mtsGenericObjectProxyBaseT_vct5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_cmnPath = {"_p_cmnPath", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t = {"_p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsInterfaceRequired = {"_p_mtsInterfaceRequired", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong9_t = {"_p_mtsGenericObjectProxyBaseT_vctLong9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong9_t = {"_p_mtsGenericObjectProxyBaseT_vctULong9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULongVec_t = {"_p_mtsGenericObjectProxyBaseT_vctULongVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLongVec_t = {"_p_mtsGenericObjectProxyBaseT_vctLongVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort3_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort3_t = {"_p_mtsGenericObjectProxyBaseT_vctShort3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsCollectorState = {"_p_mtsCollectorState", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat7_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_short_t = {"_p_mtsGenericObjectProxyBaseT_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_unsigned_short_t = {"_p_mtsGenericObjectProxyBaseT_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt4_t = {"_p_mtsGenericObjectProxyBaseT_vctInt4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt4_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsManagerLocal = {"_p_mtsManagerLocal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct6_t = {"_p_mtsGenericObjectProxyBaseT_vct6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort4_t = {"_p_mtsGenericObjectProxyBaseT_vctShort4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort4_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsStateIndex = {"_p_mtsStateIndex", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsTaskPeriodic = {"_p_mtsTaskPeriodic", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat8_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar1_t = {"_p_mtsGenericObjectProxyBaseT_vctChar1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar1_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool1_t = {"_p_mtsGenericObjectProxyBaseT_vctBool1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt5_t = {"_p_mtsGenericObjectProxyBaseT_vctInt5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt5_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t = {"_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t = {"_p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsComponentWithManagement = {"_p_mtsComponentWithManagement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct7_t = {"_p_mtsGenericObjectProxyBaseT_vct7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatFrm4x4 = {"_p_mtsFloatFrm4x4", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t = {"_p_mtsGenericObjectProxyBaseT_vctDoubleVec_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort5_t = {"_p_mtsGenericObjectProxyBaseT_vctShort5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort5_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort5_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat9_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar2_t = {"_p_mtsGenericObjectProxyBaseT_vctChar2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar2_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool2_t = {"_p_mtsGenericObjectProxyBaseT_vctBool2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt6_t = {"_p_mtsGenericObjectProxyBaseT_vctInt6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt6_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsTaskFromSignal = {"_p_mtsTaskFromSignal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong1_t = {"_p_mtsGenericObjectProxyBaseT_vctULong1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong1_t = {"_p_mtsGenericObjectProxyBaseT_vctLong1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t = {"_p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatAnRot2 = {"_p_mtsFloatAnRot2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloatMat_t = {"_p_mtsGenericObjectProxyBaseT_vctFloatMat_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatAxAnRot3 = {"_p_mtsFloatAxAnRot3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctIntMat_t = {"_p_mtsGenericObjectProxyBaseT_vctIntMat_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct8_t = {"_p_mtsGenericObjectProxyBaseT_vct8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort6_t = {"_p_mtsGenericObjectProxyBaseT_vctShort6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort6_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort6_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar3_t = {"_p_mtsGenericObjectProxyBaseT_vctChar3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar3_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatMatFrm3 = {"_p_mtsFloatMatFrm3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsFloatQuatFrm3 = {"_p_mtsFloatQuatFrm3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool3_t = {"_p_mtsGenericObjectProxyBaseT_vctBool3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt7_t = {"_p_mtsGenericObjectProxyBaseT_vctInt7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt7_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong2_t = {"_p_mtsGenericObjectProxyBaseT_vctLong2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong2_t = {"_p_mtsGenericObjectProxyBaseT_vctULong2_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsCollectorBase = {"_p_mtsCollectorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vct9_t = {"_p_mtsGenericObjectProxyBaseT_vct9_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t = {"_p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUShort7_t = {"_p_mtsGenericObjectProxyBaseT_vctUShort7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctShort7_t = {"_p_mtsGenericObjectProxyBaseT_vctShort7_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUChar4_t = {"_p_mtsGenericObjectProxyBaseT_vctUChar4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctChar4_t = {"_p_mtsGenericObjectProxyBaseT_vctChar4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctBool4_t = {"_p_mtsGenericObjectProxyBaseT_vctBool4_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctInt8_t = {"_p_mtsGenericObjectProxyBaseT_vctInt8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctUInt8_t = {"_p_mtsGenericObjectProxyBaseT_vctUInt8_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctULong3_t = {"_p_mtsGenericObjectProxyBaseT_vctULong3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctLong3_t = {"_p_mtsGenericObjectProxyBaseT_vctLong3_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsManagerComponentServices = {"_p_mtsManagerComponentServices", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osaSerialPort = {"_p_osaSerialPort", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_unsigned_long_t = {"_p_mtsGenericObjectProxyBaseT_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_long_t = {"_p_mtsGenericObjectProxyBaseT_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyBaseT_vctFloat1_t = {"_p_mtsGenericObjectProxyBaseT_vctFloat1_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_bool_t = {"_p_cmnGenericObjectProxyT_bool_t", "cmnBool *|cmnGenericObjectProxy< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_char_t = {"_p_cmnGenericObjectProxyT_char_t", "cmnChar *|cmnGenericObjectProxy< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_double_t = {"_p_cmnGenericObjectProxyT_double_t", "cmnDouble *|cmnGenericObjectProxy< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_int_t = {"_p_cmnGenericObjectProxyT_int_t", "cmnGenericObjectProxy< int > *|cmnInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_long_long_t = {"_p_cmnGenericObjectProxyT_long_long_t", "cmnGenericObjectProxy< long long > *|cmnLongLong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_long_t = {"_p_cmnGenericObjectProxyT_long_t", "cmnLong *|cmnGenericObjectProxy< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_short_t = {"_p_cmnGenericObjectProxyT_short_t", "cmnGenericObjectProxy< short > *|cmnShort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_unsigned_char_t = {"_p_cmnGenericObjectProxyT_unsigned_char_t", "cmnGenericObjectProxy< unsigned char > *|cmnUChar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_unsigned_int_t = {"_p_cmnGenericObjectProxyT_unsigned_int_t", "cmnGenericObjectProxy< unsigned int > *|cmnUInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_unsigned_long_long_t = {"_p_cmnGenericObjectProxyT_unsigned_long_long_t", "cmnGenericObjectProxy< unsigned long long > *|cmnULongLong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_unsigned_long_t = {"_p_cmnGenericObjectProxyT_unsigned_long_t", "cmnGenericObjectProxy< unsigned long > *|cmnULong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnGenericObjectProxyT_unsigned_short_t = {"_p_cmnGenericObjectProxyT_unsigned_short_t", "cmnGenericObjectProxy< unsigned short > *|cmnUShort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dimension_type = {"_p_dimension_type", "dimension_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_index_type = {"_p_index_type", "index_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsBlockingType = {"_p_mtsBlockingType", "enum mtsBlockingType *|mtsBlockingType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandQualifiedReadDescription = {"_p_mtsCommandQualifiedReadDescription", "mtsCommandQualifiedReadDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t = {"_p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t", "mtsCommandQueuedVoidReturnBase< mtsCommandRead > *|mtsCommandQueuedRead *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t = {"_p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t", "mtsCommandQueuedVoidReturnBase< mtsCommandVoidReturn > *|mtsCommandQueuedVoidReturn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t = {"_p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t", "mtsCommandQueuedWriteReturnBase< mtsCommandQualifiedRead > *|mtsCommandQueuedQualifiedRead *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t = {"_p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t", "mtsCommandQueuedWriteReturn *|mtsCommandQueuedWriteReturnBase< mtsCommandWriteReturn > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandQueueingPolicy = {"_p_mtsCommandQueueingPolicy", "enum mtsCommandQueueingPolicy *|mtsCommandQueueingPolicy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandReadDescription = {"_p_mtsCommandReadDescription", "mtsCommandReadDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandVoidDescription = {"_p_mtsCommandVoidDescription", "mtsCommandVoidDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandVoidReturnDescription = {"_p_mtsCommandVoidReturnDescription", "mtsCommandVoidReturnDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandWriteDescription = {"_p_mtsCommandWriteDescription", "mtsCommandWriteDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsCommandWriteReturnDescription = {"_p_mtsCommandWriteReturnDescription", "mtsCommandWriteReturnDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponent = {"_p_mtsComponent", "mtsDevice *|mtsComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentConstructorNameAndArgT_double_t = {"_p_mtsComponentConstructorNameAndArgT_double_t", "mtsComponentConstructorNameAndDouble *|mtsComponentConstructorNameAndArg< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentConstructorNameAndArgT_int_t = {"_p_mtsComponentConstructorNameAndArgT_int_t", "mtsComponentConstructorNameAndInt *|mtsComponentConstructorNameAndArg< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentConstructorNameAndArgT_long_t = {"_p_mtsComponentConstructorNameAndArgT_long_t", "mtsComponentConstructorNameAndLong *|mtsComponentConstructorNameAndArg< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentConstructorNameAndArgT_std__string_t = {"_p_mtsComponentConstructorNameAndArgT_std__string_t", "mtsComponentConstructorNameAndArg< std::string > *|mtsComponentConstructorNameAndString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentConstructorNameAndArgT_unsigned_int_t = {"_p_mtsComponentConstructorNameAndArgT_unsigned_int_t", "mtsComponentConstructorNameAndArg< unsigned int > *|mtsComponentConstructorNameAndUInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentConstructorNameAndArgT_unsigned_long_t = {"_p_mtsComponentConstructorNameAndArgT_unsigned_long_t", "mtsComponentConstructorNameAndArg< unsigned long > *|mtsComponentConstructorNameAndULong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentState = {"_p_mtsComponentState", "mtsComponentState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentStateChange = {"_p_mtsComponentStateChange", "mtsComponentStateChange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsComponentStatusControl = {"_p_mtsComponentStatusControl", "mtsComponentStatusControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDescriptionComponent = {"_p_mtsDescriptionComponent", "mtsDescriptionComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDescriptionComponentClass = {"_p_mtsDescriptionComponentClass", "mtsDescriptionComponentClass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDescriptionConnection = {"_p_mtsDescriptionConnection", "mtsDescriptionConnection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDescriptionInterface = {"_p_mtsDescriptionInterface", "mtsDescriptionInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDescriptionInterfaceFullName = {"_p_mtsDescriptionInterfaceFullName", "mtsDescriptionInterfaceFullName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDescriptionLoadLibrary = {"_p_mtsDescriptionLoadLibrary", "mtsDescriptionLoadLibrary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleAnRot2 = {"_p_mtsDoubleAnRot2", "mtsDoubleAnRot2 *|mtsAnRot2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleAxAnRot3 = {"_p_mtsDoubleAxAnRot3", "mtsDoubleAxAnRot3 *|mtsAxAnRot3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleFrm4x4 = {"_p_mtsDoubleFrm4x4", "mtsDoubleFrm4x4 *|mtsFrm4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleMatFrm3 = {"_p_mtsDoubleMatFrm3", "mtsDoubleMatFrm3 *|mtsMatFrm3 *|mtsDoubleFrm3 *|mtsFrm3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleMatRot3 = {"_p_mtsDoubleMatRot3", "mtsDoubleMatRot3 *|mtsMatRot3 *|mtsDoubleRot3 *|mtsRot3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleQuat = {"_p_mtsDoubleQuat", "mtsDoubleQuat *|mtsQuat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleQuatFrm3 = {"_p_mtsDoubleQuatFrm3", "mtsDoubleQuatFrm3 *|mtsQuatFrm3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleQuatRot3 = {"_p_mtsDoubleQuatRot3", "mtsDoubleQuatRot3 *|mtsQuatRot3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsDoubleRodRot3 = {"_p_mtsDoubleRodRot3", "mtsDoubleRodRot3 *|mtsRodRot3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsEndUserInterfaceArg = {"_p_mtsEndUserInterfaceArg", "mtsEndUserInterfaceArg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsEventQueueingPolicy = {"_p_mtsEventQueueingPolicy", "enum mtsEventQueueingPolicy *|mtsEventQueueingPolicy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsEventVoidDescription = {"_p_mtsEventVoidDescription", "mtsEventVoidDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsEventWriteDescription = {"_p_mtsEventWriteDescription", "mtsEventWriteDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsExecutionResult = {"_p_mtsExecutionResult", "mtsExecutionResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsFunctionRead = {"_p_mtsFunctionRead", "prmTransformationDynamic::CommandType *|mtsFunctionRead *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObject = {"_p_mtsGenericObject", "mtsGenericObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_bool_t = {"_p_mtsGenericObjectProxyT_bool_t", "mtsBool *|mtsGenericObjectProxy< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_char_t = {"_p_mtsGenericObjectProxyT_char_t", "mtsGenericObjectProxy< char > *|mtsChar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_double_t = {"_p_mtsGenericObjectProxyT_double_t", "mtsDouble *|mtsGenericObjectProxy< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_float_t = {"_p_mtsGenericObjectProxyT_float_t", "mtsGenericObjectProxy< float > *|mtsFloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_int_t = {"_p_mtsGenericObjectProxyT_int_t", "mtsInt *|mtsGenericObjectProxy< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_long_long_t = {"_p_mtsGenericObjectProxyT_long_long_t", "mtsGenericObjectProxy< long long > *|mtsLongLong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_long_t = {"_p_mtsGenericObjectProxyT_long_t", "mtsGenericObjectProxy< long > *|mtsLong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t = {"_p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t", "mtsCommandQualifiedReadDescriptionProxy *|mtsGenericObjectProxy< mtsCommandQualifiedReadDescription > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsCommandReadDescription_t = {"_p_mtsGenericObjectProxyT_mtsCommandReadDescription_t", "mtsGenericObjectProxy< mtsCommandReadDescription > *|mtsCommandReadDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t = {"_p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t", "mtsGenericObjectProxy< mtsCommandVoidDescription > *|mtsCommandVoidDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t = {"_p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t", "mtsGenericObjectProxy< mtsCommandVoidReturnDescription > *|mtsCommandVoidReturnDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t = {"_p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t", "mtsGenericObjectProxy< mtsCommandWriteDescription > *|mtsCommandWriteDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t = {"_p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t", "mtsGenericObjectProxy< mtsCommandWriteReturnDescription > *|mtsCommandWriteReturnDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsComponentStateChange_t = {"_p_mtsGenericObjectProxyT_mtsComponentStateChange_t", "mtsGenericObjectProxy< mtsComponentStateChange > *|mtsComponentStateChangeProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsComponentState_t = {"_p_mtsGenericObjectProxyT_mtsComponentState_t", "mtsGenericObjectProxy< mtsComponentState > *|mtsComponentStateProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsComponentStatusControl_t = {"_p_mtsGenericObjectProxyT_mtsComponentStatusControl_t", "mtsComponentStatusControlProxy *|mtsGenericObjectProxy< mtsComponentStatusControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t = {"_p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t", "mtsGenericObjectProxy< mtsDescriptionComponentClass > *|mtsDescriptionComponentClassProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsDescriptionComponent_t = {"_p_mtsGenericObjectProxyT_mtsDescriptionComponent_t", "mtsDescriptionComponentProxy *|mtsGenericObjectProxy< mtsDescriptionComponent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsDescriptionConnection_t = {"_p_mtsGenericObjectProxyT_mtsDescriptionConnection_t", "mtsGenericObjectProxy< mtsDescriptionConnection > *|mtsDescriptionConnectionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t = {"_p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t", "mtsGenericObjectProxy< mtsDescriptionInterfaceFullName > *|mtsDescriptionInterfaceFullNameProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsDescriptionInterface_t = {"_p_mtsGenericObjectProxyT_mtsDescriptionInterface_t", "mtsGenericObjectProxy< mtsDescriptionInterface > *|mtsDescriptionInterfaceProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t = {"_p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t", "mtsGenericObjectProxy< mtsDescriptionLoadLibrary > *|mtsDescriptionLoadLibraryProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t = {"_p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t", "mtsGenericObjectProxy< mtsEndUserInterfaceArg > *|mtsEndUserInterfaceArgProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsEventVoidDescription_t = {"_p_mtsGenericObjectProxyT_mtsEventVoidDescription_t", "mtsGenericObjectProxy< mtsEventVoidDescription > *|mtsEventVoidDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsEventWriteDescription_t = {"_p_mtsGenericObjectProxyT_mtsEventWriteDescription_t", "mtsGenericObjectProxy< mtsEventWriteDescription > *|mtsEventWriteDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsExecutionResult_t = {"_p_mtsGenericObjectProxyT_mtsExecutionResult_t", "mtsGenericObjectProxy< mtsExecutionResult > *|mtsExecutionResultProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t = {"_p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t", "mtsGenericObjectProxy< mtsInterfaceProvidedDescription > *|mtsInterfaceProvidedDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t = {"_p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t", "mtsGenericObjectProxy< mtsInterfaceRequiredDescription > *|mtsInterfaceRequiredDescriptionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsMessage_t = {"_p_mtsGenericObjectProxyT_mtsMessage_t", "mtsGenericObjectProxy< mtsMessage > *|mtsMessageProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t = {"_p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t", "mtsGenericObjectProxy< mtsTaskConstructorArg > *|mtsTaskConstructorArgProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t = {"_p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t", "mtsGenericObjectProxy< mtsTaskContinuousConstructorArg > *|mtsTaskContinuousConstructorArgProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t = {"_p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t", "mtsGenericObjectProxy< mtsTaskPeriodicConstructorArg > *|mtsTaskPeriodicConstructorArgProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_prmPositionCartesianGet_t = {"_p_mtsGenericObjectProxyT_prmPositionCartesianGet_t", "mtsGenericObjectProxy< prmPositionCartesianGet > *|prmPositionCartesianGetProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_prmPositionJointGet_t = {"_p_mtsGenericObjectProxyT_prmPositionJointGet_t", "mtsGenericObjectProxy< prmPositionJointGet > *|prmPositionJointGetProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_prmPositionJointSet_t = {"_p_mtsGenericObjectProxyT_prmPositionJointSet_t", "mtsGenericObjectProxy< prmPositionJointSet > *|prmPositionJointSetProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t = {"_p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t", "mtsGenericObjectProxy< prmVelocityCartesianGet > *|prmVelocityCartesianGetProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_short_t = {"_p_mtsGenericObjectProxyT_short_t", "mtsGenericObjectProxy< short > *|mtsShort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__listT_std__string_t_t = {"_p_mtsGenericObjectProxyT_std__listT_std__string_t_t", "mtsGenericObjectProxy< std::list< std::string > > *|mtsStdStringListProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__string_t = {"_p_mtsGenericObjectProxyT_std__string_t", "mtsGenericObjectProxy< std::string > *|mtsStdString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t", "mtsGenericObjectProxy< std::vector< char,std::allocator< char > > > *|mtsStdCharVecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t", "mtsGenericObjectProxy< std::vector< double,std::allocator< double > > > *|mtsStdDoubleVecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t", "mtsGenericObjectProxy< std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > > > *|mtsDescriptionComponentClassVecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t", "mtsGenericObjectProxy< std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > > > *|mtsDescriptionConnectionVecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t", "mtsGenericObjectProxy< std::vector< mtsDescriptionInterfaceFullName,std::allocator< mtsDescriptionInterfaceFullName > > > *|mtsDescriptionInterfaceFullNameVecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", "mtsGenericObjectProxy< std::vector< std::string,std::allocator< std::string > > > *|mtsStdStringVecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t = {"_p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t", "mtsGenericObjectProxy< std::vector< vct3,std::allocator< vct3 > > > *|mtsStdVct3VecProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_unsigned_char_t = {"_p_mtsGenericObjectProxyT_unsigned_char_t", "mtsGenericObjectProxy< unsigned char > *|mtsUChar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_unsigned_int_t = {"_p_mtsGenericObjectProxyT_unsigned_int_t", "mtsUInt *|mtsGenericObjectProxy< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_unsigned_long_t = {"_p_mtsGenericObjectProxyT_unsigned_long_t", "mtsGenericObjectProxy< unsigned long > *|mtsULong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_unsigned_short_t = {"_p_mtsGenericObjectProxyT_unsigned_short_t", "mtsGenericObjectProxy< unsigned short > *|mtsUShort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct1_t = {"_p_mtsGenericObjectProxyT_vct1_t", "mtsGenericObjectProxy< vct1 > *|mtsVct1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct2_t = {"_p_mtsGenericObjectProxyT_vct2_t", "mtsVct2 *|mtsGenericObjectProxy< vct2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct2x2_t = {"_p_mtsGenericObjectProxyT_vct2x2_t", "mtsVct2x2 *|mtsGenericObjectProxy< vct2x2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct3_t = {"_p_mtsGenericObjectProxyT_vct3_t", "mtsGenericObjectProxy< vct3 > *|mtsVct3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct3x3_t = {"_p_mtsGenericObjectProxyT_vct3x3_t", "mtsGenericObjectProxy< vct3x3 > *|mtsVct3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct4_t = {"_p_mtsGenericObjectProxyT_vct4_t", "mtsGenericObjectProxy< vct4 > *|mtsVct4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct4x4_t = {"_p_mtsGenericObjectProxyT_vct4x4_t", "mtsGenericObjectProxy< vct4x4 > *|mtsVct4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct5_t = {"_p_mtsGenericObjectProxyT_vct5_t", "mtsVct5 *|mtsGenericObjectProxy< vct5 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct6_t = {"_p_mtsGenericObjectProxyT_vct6_t", "mtsGenericObjectProxy< vct6 > *|mtsVct6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct7_t = {"_p_mtsGenericObjectProxyT_vct7_t", "mtsVct7 *|mtsGenericObjectProxy< vct7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct8_t = {"_p_mtsGenericObjectProxyT_vct8_t", "mtsGenericObjectProxy< vct8 > *|mtsVct8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vct9_t = {"_p_mtsGenericObjectProxyT_vct9_t", "mtsVct9 *|mtsGenericObjectProxy< vct9 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool1_t = {"_p_mtsGenericObjectProxyT_vctBool1_t", "mtsGenericObjectProxy< vctBool1 > *|mtsVctBool1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool2_t = {"_p_mtsGenericObjectProxyT_vctBool2_t", "mtsGenericObjectProxy< vctBool2 > *|mtsVctBool2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool3_t = {"_p_mtsGenericObjectProxyT_vctBool3_t", "mtsGenericObjectProxy< vctBool3 > *|mtsVctBool3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool4_t = {"_p_mtsGenericObjectProxyT_vctBool4_t", "mtsVctBool4 *|mtsGenericObjectProxy< vctBool4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool5_t = {"_p_mtsGenericObjectProxyT_vctBool5_t", "mtsGenericObjectProxy< vctBool5 > *|mtsVctBool5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool6_t = {"_p_mtsGenericObjectProxyT_vctBool6_t", "mtsVctBool6 *|mtsGenericObjectProxy< vctBool6 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool7_t = {"_p_mtsGenericObjectProxyT_vctBool7_t", "mtsVctBool7 *|mtsGenericObjectProxy< vctBool7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool8_t = {"_p_mtsGenericObjectProxyT_vctBool8_t", "mtsGenericObjectProxy< vctBool8 > *|mtsVctBool8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBool9_t = {"_p_mtsGenericObjectProxyT_vctBool9_t", "mtsGenericObjectProxy< vctBool9 > *|mtsVctBool9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctBoolVec_t = {"_p_mtsGenericObjectProxyT_vctBoolVec_t", "mtsVctBoolVec *|mtsGenericObjectProxy< vctBoolVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar1_t = {"_p_mtsGenericObjectProxyT_vctChar1_t", "mtsVctChar1 *|mtsGenericObjectProxy< vctChar1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar2_t = {"_p_mtsGenericObjectProxyT_vctChar2_t", "mtsGenericObjectProxy< vctChar2 > *|mtsVctChar2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar3_t = {"_p_mtsGenericObjectProxyT_vctChar3_t", "mtsGenericObjectProxy< vctChar3 > *|mtsVctChar3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar4_t = {"_p_mtsGenericObjectProxyT_vctChar4_t", "mtsVctChar4 *|mtsGenericObjectProxy< vctChar4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar5_t = {"_p_mtsGenericObjectProxyT_vctChar5_t", "mtsGenericObjectProxy< vctChar5 > *|mtsVctChar5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar6_t = {"_p_mtsGenericObjectProxyT_vctChar6_t", "mtsGenericObjectProxy< vctChar6 > *|mtsVctChar6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar7_t = {"_p_mtsGenericObjectProxyT_vctChar7_t", "mtsVctChar7 *|mtsGenericObjectProxy< vctChar7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar8_t = {"_p_mtsGenericObjectProxyT_vctChar8_t", "mtsVctChar8 *|mtsGenericObjectProxy< vctChar8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctChar9_t = {"_p_mtsGenericObjectProxyT_vctChar9_t", "mtsGenericObjectProxy< vctChar9 > *|mtsVctChar9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctCharVec_t = {"_p_mtsGenericObjectProxyT_vctCharVec_t", "mtsVctCharVec *|mtsGenericObjectProxy< vctCharVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctDoubleMat_t = {"_p_mtsGenericObjectProxyT_vctDoubleMat_t", "mtsGenericObjectProxy< vctDoubleMat > *|mtsVctDoubleMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctDoubleVec_t = {"_p_mtsGenericObjectProxyT_vctDoubleVec_t", "mtsGenericObjectProxy< vctDoubleVec > *|mtsVctDoubleVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat1_t = {"_p_mtsGenericObjectProxyT_vctFloat1_t", "mtsGenericObjectProxy< vctFloat1 > *|mtsVctFloat1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat2_t = {"_p_mtsGenericObjectProxyT_vctFloat2_t", "mtsVctFloat2 *|mtsGenericObjectProxy< vctFloat2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat3_t = {"_p_mtsGenericObjectProxyT_vctFloat3_t", "mtsVctFloat3 *|mtsGenericObjectProxy< vctFloat3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat4_t = {"_p_mtsGenericObjectProxyT_vctFloat4_t", "mtsGenericObjectProxy< vctFloat4 > *|mtsVctFloat4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat5_t = {"_p_mtsGenericObjectProxyT_vctFloat5_t", "mtsGenericObjectProxy< vctFloat5 > *|mtsVctFloat5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat6_t = {"_p_mtsGenericObjectProxyT_vctFloat6_t", "mtsGenericObjectProxy< vctFloat6 > *|mtsVctFloat6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat7_t = {"_p_mtsGenericObjectProxyT_vctFloat7_t", "mtsVctFloat7 *|mtsGenericObjectProxy< vctFloat7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat8_t = {"_p_mtsGenericObjectProxyT_vctFloat8_t", "mtsGenericObjectProxy< vctFloat8 > *|mtsVctFloat8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloat9_t = {"_p_mtsGenericObjectProxyT_vctFloat9_t", "mtsVctFloat9 *|mtsGenericObjectProxy< vctFloat9 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloatMat_t = {"_p_mtsGenericObjectProxyT_vctFloatMat_t", "mtsVctFloatMat *|mtsGenericObjectProxy< vctFloatMat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFloatVec_t = {"_p_mtsGenericObjectProxyT_vctFloatVec_t", "mtsGenericObjectProxy< vctFloatVec > *|mtsVctFloatVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t = {"_p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t", "mtsGenericObjectProxy< vctFrame4x4< double,VCT_ROW_MAJOR > > *|mtsVctFrm4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t = {"_p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t", "mtsGenericObjectProxy< vctFrameBase< vctRot3 > > *|mtsVctFrm3 *|mtsGenericObjectProxy< vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt1_t = {"_p_mtsGenericObjectProxyT_vctInt1_t", "mtsVctInt1 *|mtsGenericObjectProxy< vctInt1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt2_t = {"_p_mtsGenericObjectProxyT_vctInt2_t", "mtsGenericObjectProxy< vctInt2 > *|mtsVctInt2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt3_t = {"_p_mtsGenericObjectProxyT_vctInt3_t", "mtsGenericObjectProxy< vctInt3 > *|mtsVctInt3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt4_t = {"_p_mtsGenericObjectProxyT_vctInt4_t", "mtsGenericObjectProxy< vctInt4 > *|mtsVctInt4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt5_t = {"_p_mtsGenericObjectProxyT_vctInt5_t", "mtsVctInt5 *|mtsGenericObjectProxy< vctInt5 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt6_t = {"_p_mtsGenericObjectProxyT_vctInt6_t", "mtsGenericObjectProxy< vctInt6 > *|mtsVctInt6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt7_t = {"_p_mtsGenericObjectProxyT_vctInt7_t", "mtsVctInt7 *|mtsGenericObjectProxy< vctInt7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt8_t = {"_p_mtsGenericObjectProxyT_vctInt8_t", "mtsVctInt8 *|mtsGenericObjectProxy< vctInt8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctInt9_t = {"_p_mtsGenericObjectProxyT_vctInt9_t", "mtsGenericObjectProxy< vctInt9 > *|mtsVctInt9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctIntMat_t = {"_p_mtsGenericObjectProxyT_vctIntMat_t", "mtsGenericObjectProxy< vctIntMat > *|mtsVctIntMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctIntVec_t = {"_p_mtsGenericObjectProxyT_vctIntVec_t", "mtsVctIntVec *|mtsGenericObjectProxy< vctIntVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong1_t = {"_p_mtsGenericObjectProxyT_vctLong1_t", "mtsVctLong1 *|mtsGenericObjectProxy< vctLong1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong2_t = {"_p_mtsGenericObjectProxyT_vctLong2_t", "mtsGenericObjectProxy< vctLong2 > *|mtsVctLong2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong3_t = {"_p_mtsGenericObjectProxyT_vctLong3_t", "mtsGenericObjectProxy< vctLong3 > *|mtsVctLong3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong4_t = {"_p_mtsGenericObjectProxyT_vctLong4_t", "mtsVctLong4 *|mtsGenericObjectProxy< vctLong4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong5_t = {"_p_mtsGenericObjectProxyT_vctLong5_t", "mtsGenericObjectProxy< vctLong5 > *|mtsVctLong5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong6_t = {"_p_mtsGenericObjectProxyT_vctLong6_t", "mtsGenericObjectProxy< vctLong6 > *|mtsVctLong6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong7_t = {"_p_mtsGenericObjectProxyT_vctLong7_t", "mtsVctLong7 *|mtsGenericObjectProxy< vctLong7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong8_t = {"_p_mtsGenericObjectProxyT_vctLong8_t", "mtsVctLong8 *|mtsGenericObjectProxy< vctLong8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLong9_t = {"_p_mtsGenericObjectProxyT_vctLong9_t", "mtsGenericObjectProxy< vctLong9 > *|mtsVctLong9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctLongVec_t = {"_p_mtsGenericObjectProxyT_vctLongVec_t", "mtsVctLongVec *|mtsGenericObjectProxy< vctLongVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t = {"_p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t", "mtsVctMatRot3 *|mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort1_t = {"_p_mtsGenericObjectProxyT_vctShort1_t", "mtsGenericObjectProxy< vctShort1 > *|mtsVctShort1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort2_t = {"_p_mtsGenericObjectProxyT_vctShort2_t", "mtsGenericObjectProxy< vctShort2 > *|mtsVctShort2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort3_t = {"_p_mtsGenericObjectProxyT_vctShort3_t", "mtsVctShort3 *|mtsGenericObjectProxy< vctShort3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort4_t = {"_p_mtsGenericObjectProxyT_vctShort4_t", "mtsGenericObjectProxy< vctShort4 > *|mtsVctShort4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort5_t = {"_p_mtsGenericObjectProxyT_vctShort5_t", "mtsVctShort5 *|mtsGenericObjectProxy< vctShort5 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort6_t = {"_p_mtsGenericObjectProxyT_vctShort6_t", "mtsGenericObjectProxy< vctShort6 > *|mtsVctShort6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort7_t = {"_p_mtsGenericObjectProxyT_vctShort7_t", "mtsVctShort7 *|mtsGenericObjectProxy< vctShort7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort8_t = {"_p_mtsGenericObjectProxyT_vctShort8_t", "mtsGenericObjectProxy< vctShort8 > *|mtsVctShort8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShort9_t = {"_p_mtsGenericObjectProxyT_vctShort9_t", "mtsGenericObjectProxy< vctShort9 > *|mtsVctShort9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctShortVec_t = {"_p_mtsGenericObjectProxyT_vctShortVec_t", "mtsVctShortVec *|mtsGenericObjectProxy< vctShortVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar1_t = {"_p_mtsGenericObjectProxyT_vctUChar1_t", "mtsVctUChar1 *|mtsGenericObjectProxy< vctUChar1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar2_t = {"_p_mtsGenericObjectProxyT_vctUChar2_t", "mtsGenericObjectProxy< vctUChar2 > *|mtsVctUChar2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar3_t = {"_p_mtsGenericObjectProxyT_vctUChar3_t", "mtsGenericObjectProxy< vctUChar3 > *|mtsVctUChar3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar4_t = {"_p_mtsGenericObjectProxyT_vctUChar4_t", "mtsVctUChar4 *|mtsGenericObjectProxy< vctUChar4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar5_t = {"_p_mtsGenericObjectProxyT_vctUChar5_t", "mtsGenericObjectProxy< vctUChar5 > *|mtsVctUChar5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar6_t = {"_p_mtsGenericObjectProxyT_vctUChar6_t", "mtsGenericObjectProxy< vctUChar6 > *|mtsVctUChar6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar7_t = {"_p_mtsGenericObjectProxyT_vctUChar7_t", "mtsVctUChar7 *|mtsGenericObjectProxy< vctUChar7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar8_t = {"_p_mtsGenericObjectProxyT_vctUChar8_t", "mtsVctUChar8 *|mtsGenericObjectProxy< vctUChar8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUChar9_t = {"_p_mtsGenericObjectProxyT_vctUChar9_t", "mtsGenericObjectProxy< vctUChar9 > *|mtsVctUChar9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUCharVec_t = {"_p_mtsGenericObjectProxyT_vctUCharVec_t", "mtsVctUCharVec *|mtsGenericObjectProxy< vctUCharVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt1_t = {"_p_mtsGenericObjectProxyT_vctUInt1_t", "mtsGenericObjectProxy< vctUInt1 > *|mtsVctUInt1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt2_t = {"_p_mtsGenericObjectProxyT_vctUInt2_t", "mtsGenericObjectProxy< vctUInt2 > *|mtsVctUInt2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt3_t = {"_p_mtsGenericObjectProxyT_vctUInt3_t", "mtsVctUInt3 *|mtsGenericObjectProxy< vctUInt3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt4_t = {"_p_mtsGenericObjectProxyT_vctUInt4_t", "mtsGenericObjectProxy< vctUInt4 > *|mtsVctUInt4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt5_t = {"_p_mtsGenericObjectProxyT_vctUInt5_t", "mtsVctUInt5 *|mtsGenericObjectProxy< vctUInt5 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt6_t = {"_p_mtsGenericObjectProxyT_vctUInt6_t", "mtsGenericObjectProxy< vctUInt6 > *|mtsVctUInt6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt7_t = {"_p_mtsGenericObjectProxyT_vctUInt7_t", "mtsVctUInt7 *|mtsGenericObjectProxy< vctUInt7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt8_t = {"_p_mtsGenericObjectProxyT_vctUInt8_t", "mtsGenericObjectProxy< vctUInt8 > *|mtsVctUInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUInt9_t = {"_p_mtsGenericObjectProxyT_vctUInt9_t", "mtsGenericObjectProxy< vctUInt9 > *|mtsVctUInt9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUIntVec_t = {"_p_mtsGenericObjectProxyT_vctUIntVec_t", "mtsVctUIntVec *|mtsGenericObjectProxy< vctUIntVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong1_t = {"_p_mtsGenericObjectProxyT_vctULong1_t", "mtsVctULong1 *|mtsGenericObjectProxy< vctULong1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong2_t = {"_p_mtsGenericObjectProxyT_vctULong2_t", "mtsGenericObjectProxy< vctULong2 > *|mtsVctULong2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong3_t = {"_p_mtsGenericObjectProxyT_vctULong3_t", "mtsGenericObjectProxy< vctULong3 > *|mtsVctULong3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong4_t = {"_p_mtsGenericObjectProxyT_vctULong4_t", "mtsVctULong4 *|mtsGenericObjectProxy< vctULong4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong5_t = {"_p_mtsGenericObjectProxyT_vctULong5_t", "mtsGenericObjectProxy< vctULong5 > *|mtsVctULong5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong6_t = {"_p_mtsGenericObjectProxyT_vctULong6_t", "mtsGenericObjectProxy< vctULong6 > *|mtsVctULong6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong7_t = {"_p_mtsGenericObjectProxyT_vctULong7_t", "mtsVctULong7 *|mtsGenericObjectProxy< vctULong7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong8_t = {"_p_mtsGenericObjectProxyT_vctULong8_t", "mtsVctULong8 *|mtsGenericObjectProxy< vctULong8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULong9_t = {"_p_mtsGenericObjectProxyT_vctULong9_t", "mtsGenericObjectProxy< vctULong9 > *|mtsVctULong9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctULongVec_t = {"_p_mtsGenericObjectProxyT_vctULongVec_t", "mtsVctULongVec *|mtsGenericObjectProxy< vctULongVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort1_t = {"_p_mtsGenericObjectProxyT_vctUShort1_t", "mtsGenericObjectProxy< vctUShort1 > *|mtsVctUShort1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort2_t = {"_p_mtsGenericObjectProxyT_vctUShort2_t", "mtsGenericObjectProxy< vctUShort2 > *|mtsVctUShort2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort3_t = {"_p_mtsGenericObjectProxyT_vctUShort3_t", "mtsVctUShort3 *|mtsGenericObjectProxy< vctUShort3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort4_t = {"_p_mtsGenericObjectProxyT_vctUShort4_t", "mtsGenericObjectProxy< vctUShort4 > *|mtsVctUShort4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort5_t = {"_p_mtsGenericObjectProxyT_vctUShort5_t", "mtsVctUShort5 *|mtsGenericObjectProxy< vctUShort5 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort6_t = {"_p_mtsGenericObjectProxyT_vctUShort6_t", "mtsGenericObjectProxy< vctUShort6 > *|mtsVctUShort6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort7_t = {"_p_mtsGenericObjectProxyT_vctUShort7_t", "mtsVctUShort7 *|mtsGenericObjectProxy< vctUShort7 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort8_t = {"_p_mtsGenericObjectProxyT_vctUShort8_t", "mtsGenericObjectProxy< vctUShort8 > *|mtsVctUShort8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShort9_t = {"_p_mtsGenericObjectProxyT_vctUShort9_t", "mtsGenericObjectProxy< vctUShort9 > *|mtsVctUShort9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsGenericObjectProxyT_vctUShortVec_t = {"_p_mtsGenericObjectProxyT_vctUShortVec_t", "mtsVctUShortVec *|mtsGenericObjectProxy< vctUShortVec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsInterfaceProvidedDescription = {"_p_mtsInterfaceProvidedDescription", "mtsInterfaceProvidedDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsInterfaceQueueingPolicy = {"_p_mtsInterfaceQueueingPolicy", "enum mtsInterfaceQueueingPolicy *|mtsInterfaceQueueingPolicy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsInterfaceRequiredDescription = {"_p_mtsInterfaceRequiredDescription", "mtsInterfaceRequiredDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_bool_t = {"_p_mtsMatrixT_bool_t", "mtsMatrix< bool > *|mtsBoolMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_char_t = {"_p_mtsMatrixT_char_t", "mtsMatrix< char > *|mtsCharMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_double_t = {"_p_mtsMatrixT_double_t", "mtsMatrix< double > *|mtsDoubleMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_float_t = {"_p_mtsMatrixT_float_t", "mtsFloatMat *|mtsMatrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_int_t = {"_p_mtsMatrixT_int_t", "mtsIntMat *|mtsMatrix< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_long_t = {"_p_mtsMatrixT_long_t", "mtsMatrix< long > *|mtsLongMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_short_t = {"_p_mtsMatrixT_short_t", "mtsMatrix< short > *|mtsShortMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_unsigned_char_t = {"_p_mtsMatrixT_unsigned_char_t", "mtsMatrix< unsigned char > *|mtsUCharMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_unsigned_int_t = {"_p_mtsMatrixT_unsigned_int_t", "mtsUIntMat *|mtsMatrix< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_unsigned_long_t = {"_p_mtsMatrixT_unsigned_long_t", "mtsMatrix< unsigned long > *|mtsULongMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMatrixT_unsigned_short_t = {"_p_mtsMatrixT_unsigned_short_t", "mtsMatrix< unsigned short > *|mtsUShortMat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsMessage = {"_p_mtsMessage", "mtsMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsRequiredType = {"_p_mtsRequiredType", "enum mtsRequiredType *|mtsRequiredType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsTaskConstructorArg = {"_p_mtsTaskConstructorArg", "mtsTaskConstructorArg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsTaskContinuousConstructorArg = {"_p_mtsTaskContinuousConstructorArg", "mtsTaskContinuousConstructorArg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsTaskPeriodicConstructorArg = {"_p_mtsTaskPeriodicConstructorArg", "mtsTaskPeriodicConstructorArg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_bool_t = {"_p_mtsVectorT_bool_t", "mtsVector< bool > *|mtsBoolVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_char_t = {"_p_mtsVectorT_char_t", "mtsVector< char > *|mtsCharVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_double_t = {"_p_mtsVectorT_double_t", "mtsDoubleVec *|mtsVector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_float_t = {"_p_mtsVectorT_float_t", "mtsVector< float > *|mtsFloatVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_int_t = {"_p_mtsVectorT_int_t", "mtsIntVec *|mtsVector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_long_t = {"_p_mtsVectorT_long_t", "mtsLongVec *|mtsVector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_short_t = {"_p_mtsVectorT_short_t", "mtsVector< short > *|mtsShortVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_std__string_t = {"_p_mtsVectorT_std__string_t", "mtsStdStringVec *|mtsVector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_unsigned_char_t = {"_p_mtsVectorT_unsigned_char_t", "mtsVector< unsigned char > *|mtsUCharVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_unsigned_int_t = {"_p_mtsVectorT_unsigned_int_t", "mtsUIntVec *|mtsVector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_unsigned_long_t = {"_p_mtsVectorT_unsigned_long_t", "mtsULongVec *|mtsVector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtsVectorT_unsigned_short_t = {"_p_mtsVectorT_unsigned_short_t", "mtsVector< unsigned short > *|mtsUShortVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ndimension_type = {"_p_ndimension_type", "ndimension_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nindex_type = {"_p_nindex_type", "nindex_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nsize_type = {"_p_nsize_type", "nsize_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nstride_type = {"_p_nstride_type", "nstride_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmBlocking = {"_p_prmBlocking", "prmBlocking *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmEventButton = {"_p_prmEventButton", "prmEventButton *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmEventButton__EventType = {"_p_prmEventButton__EventType", "enum prmEventButton::EventType *|prmEventButton::EventType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmForceCartesianGet = {"_p_prmForceCartesianGet", "prmForceCartesianGet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmForceCartesianSet = {"_p_prmForceCartesianSet", "prmForceCartesianSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmMotionBase = {"_p_prmMotionBase", "prmMotionBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmPositionCartesianGet = {"_p_prmPositionCartesianGet", "prmPositionCartesianGet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmPositionCartesianSet = {"_p_prmPositionCartesianSet", "prmPositionCartesianSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmPositionJointGet = {"_p_prmPositionJointGet", "prmPositionJointGet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmPositionJointSet = {"_p_prmPositionJointSet", "prmPositionJointSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmRobotState = {"_p_prmRobotState", "prmRobotState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmTransformationBase = {"_p_prmTransformationBase", "prmTransformationBasePtr|prmTransformationBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmTransformationDynamic = {"_p_prmTransformationDynamic", "prmTransformationDynamic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmTransformationFixed = {"_p_prmTransformationFixed", "prmTransformationFixed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmTransformationManager = {"_p_prmTransformationManager", "prmTransformationManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmVelocityCartesianGet = {"_p_prmVelocityCartesianGet", "prmVelocityCartesianGet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmVelocityCartesianSet = {"_p_prmVelocityCartesianSet", "prmVelocityCartesianSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmVelocityJointGet = {"_p_prmVelocityJointGet", "prmVelocityJointGet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prmVelocityJointSet = {"_p_prmVelocityJointSet", "prmVelocityJointSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptrdiff_t = {"_p_ptrdiff_t", "ptrdiff_t *|vct::difference_type *|vct::stride_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|cmnLogMask *|cmnLogLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|vct::size_type *|vct::index_type *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *|std::ios *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *|std::basic_streambuf< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t = {"_p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t = {"_p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__string_t = {"_p_std__listT_std__string_t", "std::list< std::string > *|stdStringList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_std__allocatorT_char_t_t = {"_p_std__vectorT_char_std__allocatorT_char_t_t", "std::vector< char,std::allocator< char > > *|stdCharVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|stdDoubleVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t = {"_p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t", "mtsCommandsQualifiedReadDescription *|std::vector< mtsCommandQualifiedReadDescription,std::allocator< mtsCommandQualifiedReadDescription > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t = {"_p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t", "mtsCommandsReadDescription *|std::vector< mtsCommandReadDescription,std::allocator< mtsCommandReadDescription > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t = {"_p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t", "mtsCommandsVoidDescription *|mtsEventHandlersVoidDescription *|std::vector< mtsCommandVoidDescription,std::allocator< mtsCommandVoidDescription > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t = {"_p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t", "mtsCommandsVoidReturnDescription *|std::vector< mtsCommandVoidReturnDescription,std::allocator< mtsCommandVoidReturnDescription > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t = {"_p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t", "mtsCommandsWriteDescription *|mtsEventHandlersWriteDescription *|std::vector< mtsCommandWriteDescription,std::allocator< mtsCommandWriteDescription > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t = {"_p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t", "std::vector< mtsCommandWriteReturnDescription,std::allocator< mtsCommandWriteReturnDescription > > *|mtsCommandsWriteReturnDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t = {"_p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t", "std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > > *|mtsDescriptionComponentClassVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t = {"_p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t", "mtsDescriptionConnectionVec *|std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t = {"_p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t", "mtsDescriptionInterfaceFullNameVec *|std::vector< mtsDescriptionInterfaceFullName,std::allocator< mtsDescriptionInterfaceFullName > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t = {"_p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t", "std::vector< mtsEventVoidDescription,std::allocator< mtsEventVoidDescription > > *|mtsEventsVoidDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t = {"_p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t", "std::vector< mtsEventWriteDescription,std::allocator< mtsEventWriteDescription > > *|mtsEventsWriteDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "stdStringVec *|mtsCommandPointerNames *|std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vct3_std__allocatorT_vct3_t_t = {"_p_std__vectorT_vct3_std__allocatorT_vct3_t_t", "std::vector< vct3,std::allocator< vct3 > > *|stdVct3Vec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streamoff = {"_p_streamoff", "std::basic_streambuf< char >::off_type *|std::basic_ostream< char >::off_type *|std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streampos = {"_p_streampos", "std::basic_streambuf< char >::pos_type *|std::basic_ostream< char >::pos_type *|std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stride_type = {"_p_stride_type", "stride_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "ConnectionIDType *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctAngleRotation2 = {"_p_vctAngleRotation2", "vctAngleRotation2 *|vctAnRot2 *|vctFloatAnRot2 *|vctDoubleAnRot2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctAxisAngleRotation3T_double_t = {"_p_vctAxisAngleRotation3T_double_t", "vctDoubleAxAnRot3 *|vctAxAnRot3 *|vctAxisAngleRotation3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctAxisAngleRotation3T_float_t = {"_p_vctAxisAngleRotation3T_float_t", "vctFloatAxAnRot3 *|vctAxisAngleRotation3< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctBarycentricVectorT_double_1_t = {"_p_vctBarycentricVectorT_double_1_t", "vctBarycentricVector< double,1 > *|vctBarycentric1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctBarycentricVectorT_double_2_t = {"_p_vctBarycentricVectorT_double_2_t", "vctBarycentric2 *|vctBarycentricVector< double,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctBarycentricVectorT_double_3_t = {"_p_vctBarycentricVectorT_double_3_t", "vctBarycentricVector< double,3 > *|vctBarycentric3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctBarycentricVectorT_double_4_t = {"_p_vctBarycentricVectorT_double_4_t", "vctBarycentric4 *|vctBarycentricVector< double,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t = {"_p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t", "vctEulerRotation3< vctEulerRotation3Order::YZX > *|vctEulerYZXRotation3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t = {"_p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t", "vctEulerZXZRotation3 *|vctEulerRotation3< vctEulerRotation3Order::ZXZ > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t = {"_p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t", "vctEulerRotation3< vctEulerRotation3Order::ZYX > *|vctEulerZYXRotation3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t = {"_p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t", "vctEulerRotation3< vctEulerRotation3Order::ZYZ > *|vctEulerZYZRotation3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFixedSizeConstVectorRefT_double_3_1_t = {"_p_vctFixedSizeConstVectorRefT_double_3_1_t", "vctFixedSizeConstVectorRef< double,3,1 > *|prmForceCartesianGet::ConstForceType *|prmForceCartesianGet::ConstTorqueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFixedSizeVectorRefT_double_3_1_t = {"_p_vctFixedSizeVectorRefT_double_3_1_t", "vctFixedSizeVectorRef< double,3,1 > *|prmForceCartesianGet::ForceType *|prmForceCartesianGet::TorqueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrame4x4T_double_VCT_ROW_MAJOR_t = {"_p_vctFrame4x4T_double_VCT_ROW_MAJOR_t", "vctFrame4x4< double,VCT_ROW_MAJOR > *|vctFrm4x4 *|vctDoubleFrm4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrame4x4T_float_VCT_ROW_MAJOR_t = {"_p_vctFrame4x4T_float_VCT_ROW_MAJOR_t", "vctFrame4x4< float,VCT_ROW_MAJOR > *|vctFloatFrm4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrameBaseT_vctMatrixRotation2T_double_t_t = {"_p_vctFrameBaseT_vctMatrixRotation2T_double_t_t", "vctFrameBase< vctMatrixRotation2< double > > *|vctFrm2 *|vctDoubleMatFrm2 *|vctMatFrm2 *|vctDoubleFrm2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrameBaseT_vctMatrixRotation2T_float_t_t = {"_p_vctFrameBaseT_vctMatrixRotation2T_float_t_t", "vctFloatMatFrm2 *|vctFloatFrm2 *|vctFrameBase< vctMatrixRotation2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t = {"_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t", "vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > > *|vctFrm3 *|vctDoubleMatFrm3 *|vctMatFrm3 *|vctDoubleFrm3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t = {"_p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t", "vctFrameBase< vctMatrixRotation3< float,VCT_ROW_MAJOR > > *|vctFloatMatFrm3 *|vctFloatFrm3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t = {"_p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t", "vctFrameBase< vctQuaternionRotation3< double > > *|vctDoubleQuatFrm3 *|vctQuatFrm3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t = {"_p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t", "vctFrameBase< vctQuaternionRotation3< float > > *|vctFloatQuatFrm3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctMatrixRotation2T_double_t = {"_p_vctMatrixRotation2T_double_t", "vctRot2 *|vctDoubleMatRot2 *|vctMatRot2 *|vctMatrixRotation2< double > *|vctDoubleRot2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctMatrixRotation2T_float_t = {"_p_vctMatrixRotation2T_float_t", "vctMatrixRotation2< float > *|vctFloatMatRot2 *|vctFloatRot2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t = {"_p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t", "vctRot3 *|vctDoubleMatRot3 *|vctMatRot3 *|vctDoubleRot3 *|vctMatrixRotation3< double,VCT_ROW_MAJOR > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t = {"_p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t", "vctFloatMatRot3 *|vctFloatRot3 *|vctMatrixRotation3< float,VCT_ROW_MAJOR > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctQuaternionRotation3T_double_t = {"_p_vctQuaternionRotation3T_double_t", "vctDoubleQuatRot3 *|vctQuatRot3 *|vctQuaternionRotation3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctQuaternionRotation3T_float_t = {"_p_vctQuaternionRotation3T_float_t", "vctFloatQuatRot3 *|vctQuaternionRotation3< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctQuaternionT_double_t = {"_p_vctQuaternionT_double_t", "vctQuat *|vctDoubleQuat *|vctQuaternion< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctQuaternionT_float_t = {"_p_vctQuaternionT_float_t", "vctFloatQuat *|vctQuaternion< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctRodriguezRotation3T_double_t = {"_p_vctRodriguezRotation3T_double_t", "vctDoubleRodRot3 *|vctRodRot3 *|vctRodriguezRotation3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vctRodriguezRotation3T_float_t = {"_p_vctRodriguezRotation3T_float_t", "vctFloatRodRot3 *|vctRodriguezRotation3< float > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ActionType,
  &_swigt__p_AngleType,
  &_swigt__p_BaseClassType,
  &_swigt__p_BaseType,
  &_swigt__p_BoolType,
  &_swigt__p_CallableType,
  &_swigt__p_ChannelContainerType,
  &_swigt__p_ChannelType,
  &_swigt__p_CollectorFileFloatingNotation,
  &_swigt__p_CollectorFileFormat,
  &_swigt__p_CommandInternalMapType,
  &_swigt__p_CommandQualifiedReadMapType,
  &_swigt__p_CommandReadMapType,
  &_swigt__p_CommandType,
  &_swigt__p_CommandVoidMapType,
  &_swigt__p_CommandVoidReturnMapType,
  &_swigt__p_CommandWriteMapType,
  &_swigt__p_CommandWriteReturnMapType,
  &_swigt__p_ConstForceType,
  &_swigt__p_ConstIteratorType,
  &_swigt__p_ConstTorqueType,
  &_swigt__p_ContainerType,
  &_swigt__p_DeRefType,
  &_swigt__p_ElementType,
  &_swigt__p_EntryType,
  &_swigt__p_EventType,
  &_swigt__p_EventVoidMapType,
  &_swigt__p_EventWriteMapType,
  &_swigt__p_ForceType,
  &_swigt__p_IteratorType,
  &_swigt__p_MaskType,
  &_swigt__p_MatrixType,
  &_swigt__p_MultiplexerConstIteratorType,
  &_swigt__p_MultiplexerContainerType,
  &_swigt__p_MultiplexerIteratorType,
  &_swigt__p_NodeListType,
  &_swigt__p_NormType,
  &_swigt__p_RefType,
  &_swigt__p_RotationType,
  &_swigt__p_ServicesContainerType,
  &_swigt__p_StreamBufType,
  &_swigt__p_ThisType,
  &_swigt__p_TimeTicksType,
  &_swigt__p_TorqueType,
  &_swigt__p_TranslationType,
  &_swigt__p_Type,
  &_swigt__p_TypeTraits,
  &_swigt__p_VaArgPromotion,
  &_swigt__p_VectorType,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_cmnClassServicesBase,
  &_swigt__p_cmnDataFormat,
  &_swigt__p_cmnGenericObject,
  &_swigt__p_cmnGenericObjectProxyT_bool_t,
  &_swigt__p_cmnGenericObjectProxyT_char_t,
  &_swigt__p_cmnGenericObjectProxyT_double_t,
  &_swigt__p_cmnGenericObjectProxyT_int_t,
  &_swigt__p_cmnGenericObjectProxyT_long_long_t,
  &_swigt__p_cmnGenericObjectProxyT_long_t,
  &_swigt__p_cmnGenericObjectProxyT_short_t,
  &_swigt__p_cmnGenericObjectProxyT_unsigned_char_t,
  &_swigt__p_cmnGenericObjectProxyT_unsigned_int_t,
  &_swigt__p_cmnGenericObjectProxyT_unsigned_long_long_t,
  &_swigt__p_cmnGenericObjectProxyT_unsigned_long_t,
  &_swigt__p_cmnGenericObjectProxyT_unsigned_short_t,
  &_swigt__p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_cmnPath,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_dimension_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_index_type,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_iterator,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_mtsBlockingType,
  &_swigt__p_mtsCollectorBase,
  &_swigt__p_mtsCollectorState,
  &_swigt__p_mtsCommandQualifiedReadDescription,
  &_swigt__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t,
  &_swigt__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t,
  &_swigt__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t,
  &_swigt__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t,
  &_swigt__p_mtsCommandQueueingPolicy,
  &_swigt__p_mtsCommandReadDescription,
  &_swigt__p_mtsCommandVoidDescription,
  &_swigt__p_mtsCommandVoidReturnDescription,
  &_swigt__p_mtsCommandWriteDescription,
  &_swigt__p_mtsCommandWriteReturnDescription,
  &_swigt__p_mtsComponent,
  &_swigt__p_mtsComponentConstructorNameAndArgT_double_t,
  &_swigt__p_mtsComponentConstructorNameAndArgT_int_t,
  &_swigt__p_mtsComponentConstructorNameAndArgT_long_t,
  &_swigt__p_mtsComponentConstructorNameAndArgT_std__string_t,
  &_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_int_t,
  &_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_long_t,
  &_swigt__p_mtsComponentState,
  &_swigt__p_mtsComponentStateChange,
  &_swigt__p_mtsComponentStatusControl,
  &_swigt__p_mtsComponentWithManagement,
  &_swigt__p_mtsDescriptionComponent,
  &_swigt__p_mtsDescriptionComponentClass,
  &_swigt__p_mtsDescriptionConnection,
  &_swigt__p_mtsDescriptionInterface,
  &_swigt__p_mtsDescriptionInterfaceFullName,
  &_swigt__p_mtsDescriptionLoadLibrary,
  &_swigt__p_mtsDoubleAnRot2,
  &_swigt__p_mtsDoubleAxAnRot3,
  &_swigt__p_mtsDoubleFrm4x4,
  &_swigt__p_mtsDoubleMatFrm3,
  &_swigt__p_mtsDoubleMatRot2,
  &_swigt__p_mtsDoubleMatRot3,
  &_swigt__p_mtsDoubleQuat,
  &_swigt__p_mtsDoubleQuatFrm3,
  &_swigt__p_mtsDoubleQuatRot3,
  &_swigt__p_mtsDoubleRodRot3,
  &_swigt__p_mtsEndUserInterfaceArg,
  &_swigt__p_mtsEventQueueingPolicy,
  &_swigt__p_mtsEventVoidDescription,
  &_swigt__p_mtsEventWriteDescription,
  &_swigt__p_mtsExecutionResult,
  &_swigt__p_mtsFloatAnRot2,
  &_swigt__p_mtsFloatAxAnRot3,
  &_swigt__p_mtsFloatFrm4x4,
  &_swigt__p_mtsFloatMatFrm3,
  &_swigt__p_mtsFloatMatRot2,
  &_swigt__p_mtsFloatMatRot3,
  &_swigt__p_mtsFloatQuat,
  &_swigt__p_mtsFloatQuatFrm3,
  &_swigt__p_mtsFloatQuatRot3,
  &_swigt__p_mtsFloatRodRot3,
  &_swigt__p_mtsFunctionRead,
  &_swigt__p_mtsGenericObject,
  &_swigt__p_mtsGenericObjectProxyBaseT_bool_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_double_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_float_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_int_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_long_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_mtsComponentState_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_short_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_std__string_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_unsigned_int_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_unsigned_long_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_unsigned_short_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct2x2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct3x3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct4x4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vct9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBool9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctBoolVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctChar9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctCharVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloat9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloatMat_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFloatVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctInt9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctIntMat_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctIntVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLong9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctLongVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShort9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctShortVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUChar9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUCharVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUInt9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUIntVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULong9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctULongVec_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort1_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort2_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort3_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort4_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort5_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort6_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort7_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort8_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShort9_t,
  &_swigt__p_mtsGenericObjectProxyBaseT_vctUShortVec_t,
  &_swigt__p_mtsGenericObjectProxyT_bool_t,
  &_swigt__p_mtsGenericObjectProxyT_char_t,
  &_swigt__p_mtsGenericObjectProxyT_double_t,
  &_swigt__p_mtsGenericObjectProxyT_float_t,
  &_swigt__p_mtsGenericObjectProxyT_int_t,
  &_swigt__p_mtsGenericObjectProxyT_long_long_t,
  &_swigt__p_mtsGenericObjectProxyT_long_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsCommandReadDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsComponentStateChange_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsComponentState_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsComponentStatusControl_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsDescriptionComponent_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsDescriptionConnection_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsDescriptionInterface_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsEventVoidDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsEventWriteDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsExecutionResult_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsMessage_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t,
  &_swigt__p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t,
  &_swigt__p_mtsGenericObjectProxyT_prmPositionCartesianGet_t,
  &_swigt__p_mtsGenericObjectProxyT_prmPositionJointGet_t,
  &_swigt__p_mtsGenericObjectProxyT_prmPositionJointSet_t,
  &_swigt__p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t,
  &_swigt__p_mtsGenericObjectProxyT_short_t,
  &_swigt__p_mtsGenericObjectProxyT_std__listT_std__string_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__string_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t,
  &_swigt__p_mtsGenericObjectProxyT_unsigned_char_t,
  &_swigt__p_mtsGenericObjectProxyT_unsigned_int_t,
  &_swigt__p_mtsGenericObjectProxyT_unsigned_long_t,
  &_swigt__p_mtsGenericObjectProxyT_unsigned_short_t,
  &_swigt__p_mtsGenericObjectProxyT_vct1_t,
  &_swigt__p_mtsGenericObjectProxyT_vct2_t,
  &_swigt__p_mtsGenericObjectProxyT_vct2x2_t,
  &_swigt__p_mtsGenericObjectProxyT_vct3_t,
  &_swigt__p_mtsGenericObjectProxyT_vct3x3_t,
  &_swigt__p_mtsGenericObjectProxyT_vct4_t,
  &_swigt__p_mtsGenericObjectProxyT_vct4x4_t,
  &_swigt__p_mtsGenericObjectProxyT_vct5_t,
  &_swigt__p_mtsGenericObjectProxyT_vct6_t,
  &_swigt__p_mtsGenericObjectProxyT_vct7_t,
  &_swigt__p_mtsGenericObjectProxyT_vct8_t,
  &_swigt__p_mtsGenericObjectProxyT_vct9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBool9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctBoolVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctChar9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctCharVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctDoubleMat_t,
  &_swigt__p_mtsGenericObjectProxyT_vctDoubleVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloat9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloatMat_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFloatVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t,
  &_swigt__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctInt9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctIntMat_t,
  &_swigt__p_mtsGenericObjectProxyT_vctIntVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLong9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctLongVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShort9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctShortVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUChar9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUCharVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUInt9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUIntVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULong9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctULongVec_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort1_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort2_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort3_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort4_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort5_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort6_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort7_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort8_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShort9_t,
  &_swigt__p_mtsGenericObjectProxyT_vctUShortVec_t,
  &_swigt__p_mtsInterface,
  &_swigt__p_mtsInterfaceProvided,
  &_swigt__p_mtsInterfaceProvidedDescription,
  &_swigt__p_mtsInterfaceQueueingPolicy,
  &_swigt__p_mtsInterfaceRequired,
  &_swigt__p_mtsInterfaceRequiredDescription,
  &_swigt__p_mtsIntervalStatistics,
  &_swigt__p_mtsManagerComponentServices,
  &_swigt__p_mtsManagerLocal,
  &_swigt__p_mtsManagerLocalInterface,
  &_swigt__p_mtsMatrixT_bool_t,
  &_swigt__p_mtsMatrixT_char_t,
  &_swigt__p_mtsMatrixT_double_t,
  &_swigt__p_mtsMatrixT_float_t,
  &_swigt__p_mtsMatrixT_int_t,
  &_swigt__p_mtsMatrixT_long_t,
  &_swigt__p_mtsMatrixT_short_t,
  &_swigt__p_mtsMatrixT_unsigned_char_t,
  &_swigt__p_mtsMatrixT_unsigned_int_t,
  &_swigt__p_mtsMatrixT_unsigned_long_t,
  &_swigt__p_mtsMatrixT_unsigned_short_t,
  &_swigt__p_mtsMessage,
  &_swigt__p_mtsRequiredType,
  &_swigt__p_mtsStateIndex,
  &_swigt__p_mtsTask,
  &_swigt__p_mtsTaskConstructorArg,
  &_swigt__p_mtsTaskContinuous,
  &_swigt__p_mtsTaskContinuousConstructorArg,
  &_swigt__p_mtsTaskFromSignal,
  &_swigt__p_mtsTaskMain,
  &_swigt__p_mtsTaskPeriodic,
  &_swigt__p_mtsTaskPeriodicConstructorArg,
  &_swigt__p_mtsVectorT_bool_t,
  &_swigt__p_mtsVectorT_char_t,
  &_swigt__p_mtsVectorT_double_t,
  &_swigt__p_mtsVectorT_float_t,
  &_swigt__p_mtsVectorT_int_t,
  &_swigt__p_mtsVectorT_long_t,
  &_swigt__p_mtsVectorT_short_t,
  &_swigt__p_mtsVectorT_std__string_t,
  &_swigt__p_mtsVectorT_unsigned_char_t,
  &_swigt__p_mtsVectorT_unsigned_int_t,
  &_swigt__p_mtsVectorT_unsigned_long_t,
  &_swigt__p_mtsVectorT_unsigned_short_t,
  &_swigt__p_ndimension_type,
  &_swigt__p_nindex_type,
  &_swigt__p_nsize_type,
  &_swigt__p_nstride_type,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_osaSerialPort,
  &_swigt__p_osaTimeServer,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_prmBlocking,
  &_swigt__p_prmEventButton,
  &_swigt__p_prmEventButton__EventType,
  &_swigt__p_prmForceCartesianGet,
  &_swigt__p_prmForceCartesianSet,
  &_swigt__p_prmMotionBase,
  &_swigt__p_prmPositionCartesianGet,
  &_swigt__p_prmPositionCartesianSet,
  &_swigt__p_prmPositionJointGet,
  &_swigt__p_prmPositionJointSet,
  &_swigt__p_prmRobotState,
  &_swigt__p_prmTransformationBase,
  &_swigt__p_prmTransformationDynamic,
  &_swigt__p_prmTransformationFixed,
  &_swigt__p_prmTransformationManager,
  &_swigt__p_prmVelocityCartesianGet,
  &_swigt__p_prmVelocityCartesianSet,
  &_swigt__p_prmVelocityJointGet,
  &_swigt__p_prmVelocityJointSet,
  &_swigt__p_ptrdiff_t,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__listT_std__string_t,
  &_swigt__p_std__locale,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_char_std__allocatorT_char_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t,
  &_swigt__p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t,
  &_swigt__p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t,
  &_swigt__p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t,
  &_swigt__p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t,
  &_swigt__p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t,
  &_swigt__p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t,
  &_swigt__p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t,
  &_swigt__p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t,
  &_swigt__p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t,
  &_swigt__p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_vct3_std__allocatorT_vct3_t_t,
  &_swigt__p_streamoff,
  &_swigt__p_streampos,
  &_swigt__p_stride_type,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_vctAngleRotation2,
  &_swigt__p_vctAxisAngleRotation3T_double_t,
  &_swigt__p_vctAxisAngleRotation3T_float_t,
  &_swigt__p_vctBarycentricVectorT_double_1_t,
  &_swigt__p_vctBarycentricVectorT_double_2_t,
  &_swigt__p_vctBarycentricVectorT_double_3_t,
  &_swigt__p_vctBarycentricVectorT_double_4_t,
  &_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t,
  &_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t,
  &_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t,
  &_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t,
  &_swigt__p_vctFixedSizeConstVectorRefT_double_3_1_t,
  &_swigt__p_vctFixedSizeVectorRefT_double_3_1_t,
  &_swigt__p_vctFrame4x4T_double_VCT_ROW_MAJOR_t,
  &_swigt__p_vctFrame4x4T_float_VCT_ROW_MAJOR_t,
  &_swigt__p_vctFrameBaseT_vctMatrixRotation2T_double_t_t,
  &_swigt__p_vctFrameBaseT_vctMatrixRotation2T_float_t_t,
  &_swigt__p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,
  &_swigt__p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t,
  &_swigt__p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t,
  &_swigt__p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t,
  &_swigt__p_vctMatrixRotation2T_double_t,
  &_swigt__p_vctMatrixRotation2T_float_t,
  &_swigt__p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t,
  &_swigt__p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t,
  &_swigt__p_vctQuaternionRotation3T_double_t,
  &_swigt__p_vctQuaternionRotation3T_float_t,
  &_swigt__p_vctQuaternionT_double_t,
  &_swigt__p_vctQuaternionT_float_t,
  &_swigt__p_vctRodriguezRotation3T_double_t,
  &_swigt__p_vctRodriguezRotation3T_float_t,
};

static swig_cast_info _swigc__p_ActionType[] = {  {&_swigt__p_ActionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AngleType[] = {  {&_swigt__p_AngleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseClassType[] = {  {&_swigt__p_BaseClassType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseType[] = {  {&_swigt__p_BaseType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoolType[] = {  {&_swigt__p_BoolType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CallableType[] = {  {&_swigt__p_CallableType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelContainerType[] = {  {&_swigt__p_ChannelContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelType[] = {  {&_swigt__p_ChannelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollectorFileFloatingNotation[] = {  {&_swigt__p_CollectorFileFloatingNotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollectorFileFormat[] = {  {&_swigt__p_CollectorFileFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandInternalMapType[] = {  {&_swigt__p_CommandInternalMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandQualifiedReadMapType[] = {  {&_swigt__p_CommandQualifiedReadMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandReadMapType[] = {  {&_swigt__p_CommandReadMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandType[] = {  {&_swigt__p_CommandType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandVoidMapType[] = {  {&_swigt__p_CommandVoidMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandVoidReturnMapType[] = {  {&_swigt__p_CommandVoidReturnMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandWriteMapType[] = {  {&_swigt__p_CommandWriteMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommandWriteReturnMapType[] = {  {&_swigt__p_CommandWriteReturnMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstForceType[] = {  {&_swigt__p_ConstForceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstIteratorType[] = {  {&_swigt__p_ConstIteratorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstTorqueType[] = {  {&_swigt__p_ConstTorqueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContainerType[] = {  {&_swigt__p_ContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeRefType[] = {  {&_swigt__p_DeRefType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElementType[] = {  {&_swigt__p_ElementType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntryType[] = {  {&_swigt__p_EntryType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventType[] = {  {&_swigt__p_EventType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventVoidMapType[] = {  {&_swigt__p_EventVoidMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventWriteMapType[] = {  {&_swigt__p_EventWriteMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ForceType[] = {  {&_swigt__p_ForceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IteratorType[] = {  {&_swigt__p_IteratorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskType[] = {  {&_swigt__p_MaskType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiplexerConstIteratorType[] = {  {&_swigt__p_MultiplexerConstIteratorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiplexerContainerType[] = {  {&_swigt__p_MultiplexerContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiplexerIteratorType[] = {  {&_swigt__p_MultiplexerIteratorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeListType[] = {  {&_swigt__p_NodeListType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NormType[] = {  {&_swigt__p_NormType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefType[] = {  {&_swigt__p_RefType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RotationType[] = {  {&_swigt__p_RotationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ServicesContainerType[] = {  {&_swigt__p_ServicesContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamBufType[] = {  {&_swigt__p_StreamBufType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThisType[] = {  {&_swigt__p_ThisType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TimeTicksType[] = {  {&_swigt__p_TimeTicksType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TorqueType[] = {  {&_swigt__p_TorqueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TranslationType[] = {  {&_swigt__p_TranslationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeTraits[] = {  {&_swigt__p_TypeTraits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VaArgPromotion[] = {  {&_swigt__p_VaArgPromotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType[] = {  {&_swigt__p_VectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnClassServicesBase[] = {  {&_swigt__p_cmnClassServicesBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnDataFormat[] = {  {&_swigt__p_cmnDataFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_unsigned_int_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_int_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_std__string_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBoolVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBoolVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatQuat[] = {{&_swigt__p_mtsFloatQuat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct4x4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct4x4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct3x3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct3x3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct2x2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct2x2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsInterface[] = {{&_swigt__p_mtsInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsManagerLocalInterface[] = {{&_swigt__p_mtsManagerLocalInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatMatRot2[] = {{&_swigt__p_mtsFloatMatRot2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleMatRot2[] = {{&_swigt__p_mtsDoubleMatRot2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatMatRot3[] = {{&_swigt__p_mtsFloatMatRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatQuatRot3[] = {{&_swigt__p_mtsFloatQuatRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskMain[] = {{&_swigt__p_mtsTaskMain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_double_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskContinuous[] = {{&_swigt__p_mtsTaskContinuous, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_float_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osaTimeServer[] = {{&_swigt__p_osaTimeServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTask[] = {{&_swigt__p_mtsTask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsInterfaceProvided[] = {{&_swigt__p_mtsInterfaceProvided, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloatVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloatVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctIntVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctIntVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUIntVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUIntVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShortVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShortVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShortVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShortVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_mtsComponentState_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_mtsComponentState_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_bool_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsIntervalStatistics[] = {{&_swigt__p_mtsIntervalStatistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatRodRot3[] = {{&_swigt__p_mtsFloatRodRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUCharVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUCharVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctCharVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctCharVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnPath[] = {{&_swigt__p_cmnPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsInterfaceRequired[] = {{&_swigt__p_mtsInterfaceRequired, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULongVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULongVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLongVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLongVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCollectorState[] = {{&_swigt__p_mtsCollectorState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_short_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_unsigned_short_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsManagerLocal[] = {{&_swigt__p_mtsManagerLocal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsStateIndex[] = {{&_swigt__p_mtsStateIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskPeriodic[] = {{&_swigt__p_mtsTaskPeriodic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentWithManagement[] = {{&_swigt__p_mtsComponentWithManagement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatFrm4x4[] = {{&_swigt__p_mtsFloatFrm4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort5_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskFromSignal[] = {{&_swigt__p_mtsTaskFromSignal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatAnRot2[] = {{&_swigt__p_mtsFloatAnRot2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloatMat_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloatMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatAxAnRot3[] = {{&_swigt__p_mtsFloatAxAnRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctIntMat_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctIntMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort6_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatMatFrm3[] = {{&_swigt__p_mtsFloatMatFrm3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFloatQuatFrm3[] = {{&_swigt__p_mtsFloatQuatFrm3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong2_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCollectorBase[] = {{&_swigt__p_mtsCollectorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vct9_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vct9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUShort7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctShort7_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctShort7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUChar4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctChar4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctChar4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctBool4_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctBool4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctInt8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctInt8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctUInt8_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctULong3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctULong3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctLong3_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctLong3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsManagerComponentServices[] = {{&_swigt__p_mtsManagerComponentServices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osaSerialPort[] = {{&_swigt__p_osaSerialPort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_unsigned_long_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_long_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyBaseT_vctFloat1_t[] = {{&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObject[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort8_t, _p_mtsGenericObjectProxyT_vctUShort8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort8_t, _p_mtsGenericObjectProxyBaseT_vctUShort8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort8_t, _p_mtsGenericObjectProxyT_vctShort8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort8_t, _p_mtsGenericObjectProxyBaseT_vctShort8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_unsigned_int_t, _p_mtsGenericObjectProxyT_unsigned_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_int_t, _p_mtsGenericObjectProxyBaseT_unsigned_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_unsigned_int_t, _p_cmnGenericObjectProxyT_unsigned_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_int_t, _p_mtsMatrixT_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_int_t, _p_mtsVectorT_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_int_t, _p_mtsGenericObjectProxyT_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_int_t, _p_mtsGenericObjectProxyBaseT_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_int_t, _p_mtsComponentConstructorNameAndArgT_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_int_t, _p_cmnGenericObjectProxyT_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_int_t, _p_mtsVectorT_unsigned_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__string_t, _p_mtsGenericObjectProxyBaseT_std__string_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__string_t, _p_mtsGenericObjectProxyT_std__string_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_std__string_t, _p_mtsVectorT_std__string_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar5_t, _p_mtsGenericObjectProxyBaseT_vctChar5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar5_t, _p_mtsGenericObjectProxyT_vctChar5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar5_t, _p_mtsGenericObjectProxyBaseT_vctUChar5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar5_t, _p_mtsGenericObjectProxyT_vctUChar5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool5_t, _p_mtsGenericObjectProxyBaseT_vctBool5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool5_t, _p_mtsGenericObjectProxyT_vctBool5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt9_t, _p_mtsGenericObjectProxyT_vctInt9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt9_t, _p_mtsGenericObjectProxyBaseT_vctInt9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt9_t, _p_mtsGenericObjectProxyBaseT_vctUInt9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt9_t, _p_mtsGenericObjectProxyT_vctUInt9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong4_t, _p_mtsGenericObjectProxyT_vctULong4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong4_t, _p_mtsGenericObjectProxyBaseT_vctULong4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong4_t, _p_mtsGenericObjectProxyT_vctLong4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong4_t, _p_mtsGenericObjectProxyBaseT_vctLong4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmPositionJointSet, _p_prmPositionJointSetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmVelocityJointSet, _p_prmVelocityJointSetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBoolVec_t, _p_mtsGenericObjectProxyT_vctBoolVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBoolVec_t, _p_mtsGenericObjectProxyBaseT_vctBoolVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmEventButton, _p_prmEventButtonTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat2_t, _p_mtsGenericObjectProxyBaseT_vctFloat2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat2_t, _p_mtsGenericObjectProxyT_vctFloat2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort9_t, _p_mtsGenericObjectProxyT_vctUShort9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort9_t, _p_mtsGenericObjectProxyBaseT_vctUShort9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort9_t, _p_mtsGenericObjectProxyT_vctShort9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort9_t, _p_mtsGenericObjectProxyBaseT_vctShort9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar6_t, _p_mtsGenericObjectProxyT_vctUChar6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar6_t, _p_mtsGenericObjectProxyBaseT_vctUChar6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar6_t, _p_mtsGenericObjectProxyT_vctChar6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar6_t, _p_mtsGenericObjectProxyBaseT_vctChar6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatQuat, _p_mtsFloatQuatTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool6_t, _p_mtsGenericObjectProxyT_vctBool6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool6_t, _p_mtsGenericObjectProxyBaseT_vctBool6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct4x4_t, _p_mtsGenericObjectProxyT_vct4x4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct4x4_t, _p_mtsGenericObjectProxyBaseT_vct4x4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct1_t, _p_mtsGenericObjectProxyT_vct1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct1_t, _p_mtsGenericObjectProxyBaseT_vct1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct3x3_t, _p_mtsGenericObjectProxyT_vct3x3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct3x3_t, _p_mtsGenericObjectProxyBaseT_vct3x3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct2x2_t, _p_mtsGenericObjectProxyT_vct2x2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct2x2_t, _p_mtsGenericObjectProxyBaseT_vct2x2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong5_t, _p_mtsGenericObjectProxyBaseT_vctLong5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong5_t, _p_mtsGenericObjectProxyT_vctLong5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong5_t, _p_mtsGenericObjectProxyBaseT_vctULong5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong5_t, _p_mtsGenericObjectProxyT_vctULong5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsInterface, _p_mtsInterfaceTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsManagerLocalInterface, _p_mtsManagerLocalInterfaceTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat3_t, _p_mtsGenericObjectProxyBaseT_vctFloat3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat3_t, _p_mtsGenericObjectProxyT_vctFloat3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObject, _p_mtsGenericObjectTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObject, 0, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctDoubleMat_t, _p_mtsGenericObjectProxyT_vctDoubleMat_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t, _p_mtsGenericObjectProxyBaseT_vctDoubleMat_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatMatRot2, _p_mtsFloatMatRot2To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleMatRot2, _p_mtsDoubleMatRot2To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatMatRot3, _p_mtsFloatMatRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleMatRot3, _p_mtsDoubleMatRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatQuatRot3, _p_mtsFloatQuatRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleQuatRot3, _p_mtsDoubleQuatRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmForceCartesianGet, _p_prmForceCartesianGetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmVelocityCartesianGet, _p_prmVelocityCartesianGetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmPositionCartesianGet, _p_prmPositionCartesianGetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskMain, _p_mtsTaskMainTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar7_t, _p_mtsGenericObjectProxyBaseT_vctChar7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar7_t, _p_mtsGenericObjectProxyT_vctChar7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar7_t, _p_mtsGenericObjectProxyBaseT_vctUChar7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar7_t, _p_mtsGenericObjectProxyT_vctUChar7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool7_t, _p_mtsGenericObjectProxyBaseT_vctBool7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool7_t, _p_mtsGenericObjectProxyT_vctBool7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_double_t, _p_mtsComponentConstructorNameAndArgT_double_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_double_t, _p_mtsGenericObjectProxyBaseT_double_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_double_t, _p_mtsGenericObjectProxyT_double_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_double_t, _p_mtsVectorT_double_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_double_t, _p_mtsMatrixT_double_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskContinuous, _p_mtsTaskContinuousTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_double_t, _p_cmnGenericObjectProxyT_double_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct2_t, _p_mtsGenericObjectProxyBaseT_vct2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct2_t, _p_mtsGenericObjectProxyT_vct2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong6_t, _p_mtsGenericObjectProxyT_vctULong6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong6_t, _p_mtsGenericObjectProxyBaseT_vctULong6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong6_t, _p_mtsGenericObjectProxyT_vctLong6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong6_t, _p_mtsGenericObjectProxyBaseT_vctLong6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_float_t, _p_mtsGenericObjectProxyBaseT_float_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_float_t, _p_mtsGenericObjectProxyT_float_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_float_t, _p_mtsVectorT_float_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmMotionBase, _p_prmMotionBaseTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat4_t, _p_mtsGenericObjectProxyBaseT_vctFloat4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat4_t, _p_mtsGenericObjectProxyT_vctFloat4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_osaTimeServer, _p_osaTimeServerTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, _p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTask, _p_mtsTaskTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt1_t, _p_mtsGenericObjectProxyT_vctInt1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt1_t, _p_mtsGenericObjectProxyBaseT_vctInt1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt1_t, _p_mtsGenericObjectProxyT_vctUInt1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt1_t, _p_mtsGenericObjectProxyBaseT_vctUInt1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t, _p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsInterfaceProvided, _p_mtsInterfaceProvidedTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar8_t, _p_mtsGenericObjectProxyBaseT_vctChar8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar8_t, _p_mtsGenericObjectProxyT_vctChar8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar8_t, _p_mtsGenericObjectProxyBaseT_vctUChar8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar8_t, _p_mtsGenericObjectProxyT_vctUChar8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloatVec_t, _p_mtsGenericObjectProxyBaseT_vctFloatVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloatVec_t, _p_mtsGenericObjectProxyT_vctFloatVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctIntVec_t, _p_mtsGenericObjectProxyBaseT_vctIntVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctIntVec_t, _p_mtsGenericObjectProxyT_vctIntVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUIntVec_t, _p_mtsGenericObjectProxyBaseT_vctUIntVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUIntVec_t, _p_mtsGenericObjectProxyT_vctUIntVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShortVec_t, _p_mtsGenericObjectProxyBaseT_vctShortVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShortVec_t, _p_mtsGenericObjectProxyT_vctShortVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShortVec_t, _p_mtsGenericObjectProxyBaseT_vctUShortVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShortVec_t, _p_mtsGenericObjectProxyT_vctUShortVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool8_t, _p_mtsGenericObjectProxyBaseT_vctBool8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool8_t, _p_mtsGenericObjectProxyT_vctBool8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct3_t, _p_mtsGenericObjectProxyBaseT_vct3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct3_t, _p_mtsGenericObjectProxyT_vct3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmPositionCartesianSet, _p_prmPositionCartesianSetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmVelocityCartesianSet, _p_prmVelocityCartesianSetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmForceCartesianSet, _p_prmForceCartesianSetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_std__string_t, _p_mtsComponentConstructorNameAndArgT_std__string_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong7_t, _p_mtsGenericObjectProxyBaseT_vctULong7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong7_t, _p_mtsGenericObjectProxyT_vctLong7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong7_t, _p_mtsGenericObjectProxyBaseT_vctLong7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong7_t, _p_mtsGenericObjectProxyT_vctULong7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort1_t, _p_mtsGenericObjectProxyT_vctUShort1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort1_t, _p_mtsGenericObjectProxyBaseT_vctUShort1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort1_t, _p_mtsGenericObjectProxyBaseT_vctShort1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort1_t, _p_mtsGenericObjectProxyT_vctShort1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmRobotState, _p_prmRobotStateTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat5_t, _p_mtsGenericObjectProxyT_vctFloat5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat5_t, _p_mtsGenericObjectProxyBaseT_vctFloat5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt2_t, _p_mtsGenericObjectProxyT_vctInt2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt2_t, _p_mtsGenericObjectProxyBaseT_vctInt2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt2_t, _p_mtsGenericObjectProxyT_vctUInt2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt2_t, _p_mtsGenericObjectProxyBaseT_vctUInt2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_mtsComponentState_t, _p_mtsGenericObjectProxyBaseT_mtsComponentState_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_mtsComponentState_t, _p_mtsGenericObjectProxyT_mtsComponentState_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_bool_t, _p_mtsGenericObjectProxyT_bool_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_bool_t, _p_mtsGenericObjectProxyBaseT_bool_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_bool_t, _p_mtsVectorT_bool_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_bool_t, _p_cmnGenericObjectProxyT_bool_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_int_t, _p_mtsComponentConstructorNameAndArgT_unsigned_int_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar9_t, _p_mtsGenericObjectProxyT_vctChar9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar9_t, _p_mtsGenericObjectProxyBaseT_vctUChar9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar9_t, _p_mtsGenericObjectProxyT_vctUChar9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar9_t, _p_mtsGenericObjectProxyBaseT_vctChar9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool9_t, _p_mtsGenericObjectProxyBaseT_vctBool9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool9_t, _p_mtsGenericObjectProxyT_vctBool9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct4_t, _p_mtsGenericObjectProxyBaseT_vct4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct4_t, _p_mtsGenericObjectProxyT_vct4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong8_t, _p_mtsGenericObjectProxyT_vctULong8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong8_t, _p_mtsGenericObjectProxyBaseT_vctULong8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong8_t, _p_mtsGenericObjectProxyT_vctLong8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong8_t, _p_mtsGenericObjectProxyBaseT_vctLong8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort2_t, _p_mtsGenericObjectProxyT_vctShort2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort2_t, _p_mtsGenericObjectProxyBaseT_vctShort2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort2_t, _p_mtsGenericObjectProxyBaseT_vctUShort2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort2_t, _p_mtsGenericObjectProxyT_vctUShort2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsIntervalStatistics, _p_mtsIntervalStatisticsTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleRodRot3, _p_mtsDoubleRodRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatRodRot3, _p_mtsFloatRodRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat6_t, _p_mtsGenericObjectProxyBaseT_vctFloat6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat6_t, _p_mtsGenericObjectProxyT_vctFloat6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskConstructorArg, _p_mtsTaskConstructorArgTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskContinuousConstructorArg, _p_mtsTaskContinuousConstructorArgTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskPeriodicConstructorArg, _p_mtsTaskPeriodicConstructorArgTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt3_t, _p_mtsGenericObjectProxyBaseT_vctInt3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt3_t, _p_mtsGenericObjectProxyT_vctInt3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt3_t, _p_mtsGenericObjectProxyBaseT_vctUInt3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt3_t, _p_mtsGenericObjectProxyT_vctUInt3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUCharVec_t, _p_mtsGenericObjectProxyT_vctUCharVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUCharVec_t, _p_mtsGenericObjectProxyBaseT_vctUCharVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctCharVec_t, _p_mtsGenericObjectProxyT_vctCharVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctCharVec_t, _p_mtsGenericObjectProxyBaseT_vctCharVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct5_t, _p_mtsGenericObjectProxyT_vct5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct5_t, _p_mtsGenericObjectProxyBaseT_vct5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnPath, _p_cmnPathTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t, _p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsInterfaceRequired, _p_mtsInterfaceRequiredTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong9_t, _p_mtsGenericObjectProxyBaseT_vctLong9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong9_t, _p_mtsGenericObjectProxyT_vctLong9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong9_t, _p_mtsGenericObjectProxyBaseT_vctULong9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong9_t, _p_mtsGenericObjectProxyT_vctULong9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULongVec_t, _p_mtsGenericObjectProxyT_vctULongVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULongVec_t, _p_mtsGenericObjectProxyBaseT_vctULongVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLongVec_t, _p_mtsGenericObjectProxyT_vctLongVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLongVec_t, _p_mtsGenericObjectProxyBaseT_vctLongVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort3_t, _p_mtsGenericObjectProxyT_vctUShort3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort3_t, _p_mtsGenericObjectProxyBaseT_vctUShort3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort3_t, _p_mtsGenericObjectProxyBaseT_vctShort3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort3_t, _p_mtsGenericObjectProxyT_vctShort3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t, _p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t, _p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsCollectorState, _p_mtsCollectorStateTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat7_t, _p_mtsGenericObjectProxyT_vctFloat7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat7_t, _p_mtsGenericObjectProxyBaseT_vctFloat7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleQuat, _p_mtsDoubleQuatTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_short_t, _p_mtsMatrixT_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_short_t, _p_mtsVectorT_unsigned_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_short_t, _p_mtsVectorT_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_short_t, _p_mtsGenericObjectProxyBaseT_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_short_t, _p_mtsGenericObjectProxyT_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_short_t, _p_mtsGenericObjectProxyBaseT_unsigned_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_unsigned_short_t, _p_mtsGenericObjectProxyT_unsigned_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_short_t, _p_cmnGenericObjectProxyT_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_unsigned_short_t, _p_cmnGenericObjectProxyT_unsigned_short_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt4_t, _p_mtsGenericObjectProxyBaseT_vctInt4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt4_t, _p_mtsGenericObjectProxyT_vctInt4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt4_t, _p_mtsGenericObjectProxyBaseT_vctUInt4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt4_t, _p_mtsGenericObjectProxyT_vctUInt4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_char_t, _p_mtsVectorT_unsigned_char_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_char_t, _p_mtsVectorT_char_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsManagerLocal, _p_mtsManagerLocalTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct6_t, _p_mtsGenericObjectProxyBaseT_vct6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct6_t, _p_mtsGenericObjectProxyT_vct6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t, _p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort4_t, _p_mtsGenericObjectProxyT_vctShort4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort4_t, _p_mtsGenericObjectProxyBaseT_vctShort4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort4_t, _p_mtsGenericObjectProxyBaseT_vctUShort4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort4_t, _p_mtsGenericObjectProxyT_vctUShort4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsStateIndex, _p_mtsStateIndexTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskPeriodic, _p_mtsTaskPeriodicTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, _p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat8_t, _p_mtsGenericObjectProxyBaseT_vctFloat8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat8_t, _p_mtsGenericObjectProxyT_vctFloat8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar1_t, _p_mtsGenericObjectProxyBaseT_vctChar1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar1_t, _p_mtsGenericObjectProxyT_vctChar1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar1_t, _p_mtsGenericObjectProxyBaseT_vctUChar1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar1_t, _p_mtsGenericObjectProxyT_vctUChar1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool1_t, _p_mtsGenericObjectProxyBaseT_vctBool1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool1_t, _p_mtsGenericObjectProxyT_vctBool1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt5_t, _p_mtsGenericObjectProxyT_vctInt5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt5_t, _p_mtsGenericObjectProxyBaseT_vctInt5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt5_t, _p_mtsGenericObjectProxyT_vctUInt5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt5_t, _p_mtsGenericObjectProxyBaseT_vctUInt5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentWithManagement, _p_mtsComponentWithManagementTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct7_t, _p_mtsGenericObjectProxyBaseT_vct7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct7_t, _p_mtsGenericObjectProxyT_vct7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatFrm4x4, _p_mtsFloatFrm4x4To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleFrm4x4, _p_mtsDoubleFrm4x4To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t, _p_mtsGenericObjectProxyBaseT_vctDoubleVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctDoubleVec_t, _p_mtsGenericObjectProxyT_vctDoubleVec_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort5_t, _p_mtsGenericObjectProxyT_vctShort5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort5_t, _p_mtsGenericObjectProxyBaseT_vctShort5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort5_t, _p_mtsGenericObjectProxyBaseT_vctUShort5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort5_t, _p_mtsGenericObjectProxyT_vctUShort5_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmTransformationManager, _p_prmTransformationManagerTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat9_t, _p_mtsGenericObjectProxyBaseT_vctFloat9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat9_t, _p_mtsGenericObjectProxyT_vctFloat9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar2_t, _p_mtsGenericObjectProxyBaseT_vctChar2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar2_t, _p_mtsGenericObjectProxyT_vctChar2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar2_t, _p_mtsGenericObjectProxyBaseT_vctUChar2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar2_t, _p_mtsGenericObjectProxyT_vctUChar2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_long_t, _p_mtsComponentConstructorNameAndArgT_unsigned_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool2_t, _p_mtsGenericObjectProxyBaseT_vctBool2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool2_t, _p_mtsGenericObjectProxyT_vctBool2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt6_t, _p_mtsGenericObjectProxyT_vctInt6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt6_t, _p_mtsGenericObjectProxyBaseT_vctInt6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt6_t, _p_mtsGenericObjectProxyT_vctUInt6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt6_t, _p_mtsGenericObjectProxyBaseT_vctUInt6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsTaskFromSignal, _p_mtsTaskFromSignalTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong1_t, _p_mtsGenericObjectProxyT_vctULong1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong1_t, _p_mtsGenericObjectProxyBaseT_vctULong1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong1_t, _p_mtsGenericObjectProxyBaseT_vctLong1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong1_t, _p_mtsGenericObjectProxyT_vctLong1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t, _p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatAnRot2, _p_mtsFloatAnRot2To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloatMat_t, _p_mtsGenericObjectProxyBaseT_vctFloatMat_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloatMat_t, _p_mtsGenericObjectProxyT_vctFloatMat_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleAnRot2, _p_mtsDoubleAnRot2To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatAxAnRot3, _p_mtsFloatAxAnRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleAxAnRot3, _p_mtsDoubleAxAnRot3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctIntMat_t, _p_mtsGenericObjectProxyBaseT_vctIntMat_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctIntMat_t, _p_mtsGenericObjectProxyT_vctIntMat_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct8_t, _p_mtsGenericObjectProxyBaseT_vct8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct8_t, _p_mtsGenericObjectProxyT_vct8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort6_t, _p_mtsGenericObjectProxyT_vctShort6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort6_t, _p_mtsGenericObjectProxyBaseT_vctShort6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort6_t, _p_mtsGenericObjectProxyBaseT_vctUShort6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort6_t, _p_mtsGenericObjectProxyT_vctUShort6_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar3_t, _p_mtsGenericObjectProxyBaseT_vctChar3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar3_t, _p_mtsGenericObjectProxyT_vctChar3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar3_t, _p_mtsGenericObjectProxyBaseT_vctUChar3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar3_t, _p_mtsGenericObjectProxyT_vctUChar3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatMatFrm3, _p_mtsFloatMatFrm3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleMatFrm3, _p_mtsDoubleMatFrm3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsFloatQuatFrm3, _p_mtsFloatQuatFrm3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsDoubleQuatFrm3, _p_mtsDoubleQuatFrm3To_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool3_t, _p_mtsGenericObjectProxyBaseT_vctBool3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool3_t, _p_mtsGenericObjectProxyT_vctBool3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt7_t, _p_mtsGenericObjectProxyBaseT_vctInt7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt7_t, _p_mtsGenericObjectProxyT_vctInt7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt7_t, _p_mtsGenericObjectProxyBaseT_vctUInt7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt7_t, _p_mtsGenericObjectProxyT_vctUInt7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong2_t, _p_mtsGenericObjectProxyT_vctLong2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong2_t, _p_mtsGenericObjectProxyBaseT_vctLong2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong2_t, _p_mtsGenericObjectProxyBaseT_vctULong2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong2_t, _p_mtsGenericObjectProxyT_vctULong2_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponent, _p_mtsComponentTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsCollectorBase, _p_mtsCollectorBaseTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct9_t, _p_mtsGenericObjectProxyT_vct9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct9_t, _p_mtsGenericObjectProxyBaseT_vct9_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort7_t, _p_mtsGenericObjectProxyT_vctUShort7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort7_t, _p_mtsGenericObjectProxyBaseT_vctUShort7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort7_t, _p_mtsGenericObjectProxyBaseT_vctShort7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort7_t, _p_mtsGenericObjectProxyT_vctShort7_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar4_t, _p_mtsGenericObjectProxyT_vctUChar4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar4_t, _p_mtsGenericObjectProxyBaseT_vctUChar4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar4_t, _p_mtsGenericObjectProxyT_vctChar4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar4_t, _p_mtsGenericObjectProxyBaseT_vctChar4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmPositionJointGet, _p_prmPositionJointGetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_prmVelocityJointGet, _p_prmVelocityJointGetTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool4_t, _p_mtsGenericObjectProxyT_vctBool4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool4_t, _p_mtsGenericObjectProxyBaseT_vctBool4_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt8_t, _p_mtsGenericObjectProxyBaseT_vctInt8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt8_t, _p_mtsGenericObjectProxyT_vctInt8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt8_t, _p_mtsGenericObjectProxyBaseT_vctUInt8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt8_t, _p_mtsGenericObjectProxyT_vctUInt8_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong3_t, _p_mtsGenericObjectProxyBaseT_vctULong3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong3_t, _p_mtsGenericObjectProxyT_vctULong3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong3_t, _p_mtsGenericObjectProxyBaseT_vctLong3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong3_t, _p_mtsGenericObjectProxyT_vctLong3_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsManagerComponentServices, _p_mtsManagerComponentServicesTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_osaSerialPort, _p_osaSerialPortTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_unsigned_long_t, _p_mtsGenericObjectProxyT_unsigned_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_long_t, _p_mtsGenericObjectProxyBaseT_unsigned_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_long_t, _p_mtsGenericObjectProxyT_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_long_t, _p_mtsGenericObjectProxyBaseT_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_long_t, _p_mtsComponentConstructorNameAndArgT_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_long_t, _p_mtsVectorT_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_long_t, _p_mtsVectorT_unsigned_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_long_t, _p_mtsMatrixT_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat1_t, _p_mtsGenericObjectProxyBaseT_vctFloat1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat1_t, _p_mtsGenericObjectProxyT_vctFloat1_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_long_t, _p_cmnGenericObjectProxyT_long_tTo_p_cmnGenericObject, 0, 0},  {&_swigt__p_cmnGenericObjectProxyT_unsigned_long_t, _p_cmnGenericObjectProxyT_unsigned_long_tTo_p_cmnGenericObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_bool_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_char_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_double_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_int_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_long_long_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_long_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_short_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_unsigned_char_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_unsigned_int_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_unsigned_long_long_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_unsigned_long_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnGenericObjectProxyT_unsigned_short_t[] = {  {&_swigt__p_cmnGenericObjectProxyT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dimension_type[] = {  {&_swigt__p_dimension_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_index_type[] = {  {&_swigt__p_index_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsBlockingType[] = {  {&_swigt__p_mtsBlockingType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandQualifiedReadDescription[] = {  {&_swigt__p_mtsCommandQualifiedReadDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t[] = {  {&_swigt__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t[] = {  {&_swigt__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t[] = {  {&_swigt__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t[] = {  {&_swigt__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandQueueingPolicy[] = {  {&_swigt__p_mtsCommandQueueingPolicy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandReadDescription[] = {  {&_swigt__p_mtsCommandReadDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandVoidDescription[] = {  {&_swigt__p_mtsCommandVoidDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandVoidReturnDescription[] = {  {&_swigt__p_mtsCommandVoidReturnDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandWriteDescription[] = {  {&_swigt__p_mtsCommandWriteDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsCommandWriteReturnDescription[] = {  {&_swigt__p_mtsCommandWriteReturnDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponent[] = {  {&_swigt__p_mtsComponent, 0, 0, 0},  {&_swigt__p_mtsTaskMain, _p_mtsTaskMainTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsTask, _p_mtsTaskTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsTaskContinuous, _p_mtsTaskContinuousTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsComponentWithManagement, _p_mtsComponentWithManagementTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsTaskFromSignal, _p_mtsTaskFromSignalTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsCollectorState, _p_mtsCollectorStateTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsTaskPeriodic, _p_mtsTaskPeriodicTo_p_mtsComponent, 0, 0},  {&_swigt__p_mtsCollectorBase, _p_mtsCollectorBaseTo_p_mtsComponent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentConstructorNameAndArgT_double_t[] = {  {&_swigt__p_mtsComponentConstructorNameAndArgT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentConstructorNameAndArgT_int_t[] = {  {&_swigt__p_mtsComponentConstructorNameAndArgT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentConstructorNameAndArgT_long_t[] = {  {&_swigt__p_mtsComponentConstructorNameAndArgT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentConstructorNameAndArgT_std__string_t[] = {  {&_swigt__p_mtsComponentConstructorNameAndArgT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentConstructorNameAndArgT_unsigned_int_t[] = {  {&_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentConstructorNameAndArgT_unsigned_long_t[] = {  {&_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentState[] = {  {&_swigt__p_mtsComponentState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentStateChange[] = {  {&_swigt__p_mtsComponentStateChange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsComponentStatusControl[] = {  {&_swigt__p_mtsComponentStatusControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDescriptionComponent[] = {  {&_swigt__p_mtsDescriptionComponent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDescriptionComponentClass[] = {  {&_swigt__p_mtsDescriptionComponentClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDescriptionConnection[] = {  {&_swigt__p_mtsDescriptionConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDescriptionInterface[] = {  {&_swigt__p_mtsDescriptionInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDescriptionInterfaceFullName[] = {  {&_swigt__p_mtsDescriptionInterfaceFullName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDescriptionLoadLibrary[] = {  {&_swigt__p_mtsDescriptionLoadLibrary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleAnRot2[] = {  {&_swigt__p_mtsDoubleAnRot2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleAxAnRot3[] = {  {&_swigt__p_mtsDoubleAxAnRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleFrm4x4[] = {  {&_swigt__p_mtsDoubleFrm4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleMatFrm3[] = {  {&_swigt__p_mtsDoubleMatFrm3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleMatRot3[] = {  {&_swigt__p_mtsDoubleMatRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleQuat[] = {  {&_swigt__p_mtsDoubleQuat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleQuatFrm3[] = {  {&_swigt__p_mtsDoubleQuatFrm3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleQuatRot3[] = {  {&_swigt__p_mtsDoubleQuatRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsDoubleRodRot3[] = {  {&_swigt__p_mtsDoubleRodRot3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsEndUserInterfaceArg[] = {  {&_swigt__p_mtsEndUserInterfaceArg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsEventQueueingPolicy[] = {  {&_swigt__p_mtsEventQueueingPolicy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsEventVoidDescription[] = {  {&_swigt__p_mtsEventVoidDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsEventWriteDescription[] = {  {&_swigt__p_mtsEventWriteDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsExecutionResult[] = {  {&_swigt__p_mtsExecutionResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsFunctionRead[] = {  {&_swigt__p_mtsFunctionRead, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObject[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort8_t, _p_mtsGenericObjectProxyT_vctUShort8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort8_t, _p_mtsGenericObjectProxyBaseT_vctUShort8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort8_t, _p_mtsGenericObjectProxyBaseT_vctShort8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort8_t, _p_mtsGenericObjectProxyT_vctShort8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_int_t, _p_mtsVectorT_unsigned_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_unsigned_int_t, _p_mtsGenericObjectProxyT_unsigned_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_int_t, _p_mtsGenericObjectProxyBaseT_unsigned_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_int_t, _p_mtsMatrixT_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_int_t, _p_mtsVectorT_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_int_t, _p_mtsGenericObjectProxyT_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_int_t, _p_mtsGenericObjectProxyBaseT_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_int_t, _p_mtsComponentConstructorNameAndArgT_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__string_t, _p_mtsGenericObjectProxyT_std__string_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__string_t, _p_mtsGenericObjectProxyBaseT_std__string_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_std__string_t, _p_mtsVectorT_std__string_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar5_t, _p_mtsGenericObjectProxyBaseT_vctChar5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar5_t, _p_mtsGenericObjectProxyT_vctChar5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar5_t, _p_mtsGenericObjectProxyBaseT_vctUChar5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar5_t, _p_mtsGenericObjectProxyT_vctUChar5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool5_t, _p_mtsGenericObjectProxyBaseT_vctBool5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool5_t, _p_mtsGenericObjectProxyT_vctBool5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt9_t, _p_mtsGenericObjectProxyT_vctInt9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt9_t, _p_mtsGenericObjectProxyBaseT_vctInt9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt9_t, _p_mtsGenericObjectProxyT_vctUInt9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt9_t, _p_mtsGenericObjectProxyBaseT_vctUInt9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong4_t, _p_mtsGenericObjectProxyT_vctULong4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong4_t, _p_mtsGenericObjectProxyBaseT_vctULong4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong4_t, _p_mtsGenericObjectProxyT_vctLong4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong4_t, _p_mtsGenericObjectProxyBaseT_vctLong4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmPositionJointSet, _p_prmPositionJointSetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmVelocityJointSet, _p_prmVelocityJointSetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBoolVec_t, _p_mtsGenericObjectProxyBaseT_vctBoolVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBoolVec_t, _p_mtsGenericObjectProxyT_vctBoolVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmEventButton, _p_prmEventButtonTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat2_t, _p_mtsGenericObjectProxyT_vctFloat2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat2_t, _p_mtsGenericObjectProxyBaseT_vctFloat2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort9_t, _p_mtsGenericObjectProxyT_vctUShort9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort9_t, _p_mtsGenericObjectProxyBaseT_vctUShort9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort9_t, _p_mtsGenericObjectProxyBaseT_vctShort9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort9_t, _p_mtsGenericObjectProxyT_vctShort9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar6_t, _p_mtsGenericObjectProxyT_vctUChar6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar6_t, _p_mtsGenericObjectProxyBaseT_vctUChar6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar6_t, _p_mtsGenericObjectProxyT_vctChar6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar6_t, _p_mtsGenericObjectProxyBaseT_vctChar6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatQuat, _p_mtsFloatQuatTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool6_t, _p_mtsGenericObjectProxyT_vctBool6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool6_t, _p_mtsGenericObjectProxyBaseT_vctBool6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct4x4_t, _p_mtsGenericObjectProxyT_vct4x4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct4x4_t, _p_mtsGenericObjectProxyBaseT_vct4x4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct1_t, _p_mtsGenericObjectProxyBaseT_vct1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct1_t, _p_mtsGenericObjectProxyT_vct1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct3x3_t, _p_mtsGenericObjectProxyT_vct3x3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct3x3_t, _p_mtsGenericObjectProxyBaseT_vct3x3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct2x2_t, _p_mtsGenericObjectProxyT_vct2x2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct2x2_t, _p_mtsGenericObjectProxyBaseT_vct2x2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong5_t, _p_mtsGenericObjectProxyBaseT_vctLong5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong5_t, _p_mtsGenericObjectProxyT_vctLong5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong5_t, _p_mtsGenericObjectProxyBaseT_vctULong5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong5_t, _p_mtsGenericObjectProxyT_vctULong5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat3_t, _p_mtsGenericObjectProxyT_vctFloat3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat3_t, _p_mtsGenericObjectProxyBaseT_vctFloat3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObject, 0, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctDoubleMat_t, _p_mtsGenericObjectProxyT_vctDoubleMat_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t, _p_mtsGenericObjectProxyBaseT_vctDoubleMat_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatMatRot2, _p_mtsFloatMatRot2To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleMatRot2, _p_mtsDoubleMatRot2To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleQuatRot3, _p_mtsDoubleQuatRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatQuatRot3, _p_mtsFloatQuatRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleMatRot3, _p_mtsDoubleMatRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatMatRot3, _p_mtsFloatMatRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmVelocityCartesianGet, _p_prmVelocityCartesianGetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmForceCartesianGet, _p_prmForceCartesianGetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmPositionCartesianGet, _p_prmPositionCartesianGetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar7_t, _p_mtsGenericObjectProxyBaseT_vctChar7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar7_t, _p_mtsGenericObjectProxyT_vctChar7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar7_t, _p_mtsGenericObjectProxyBaseT_vctUChar7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar7_t, _p_mtsGenericObjectProxyT_vctUChar7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool7_t, _p_mtsGenericObjectProxyBaseT_vctBool7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool7_t, _p_mtsGenericObjectProxyT_vctBool7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_double_t, _p_mtsComponentConstructorNameAndArgT_double_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_double_t, _p_mtsGenericObjectProxyBaseT_double_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_double_t, _p_mtsGenericObjectProxyT_double_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_double_t, _p_mtsVectorT_double_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_double_t, _p_mtsMatrixT_double_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct2_t, _p_mtsGenericObjectProxyBaseT_vct2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct2_t, _p_mtsGenericObjectProxyT_vct2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong6_t, _p_mtsGenericObjectProxyT_vctULong6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong6_t, _p_mtsGenericObjectProxyBaseT_vctULong6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong6_t, _p_mtsGenericObjectProxyT_vctLong6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong6_t, _p_mtsGenericObjectProxyBaseT_vctLong6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_float_t, _p_mtsGenericObjectProxyBaseT_float_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_float_t, _p_mtsGenericObjectProxyT_float_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_float_t, _p_mtsVectorT_float_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmMotionBase, _p_prmMotionBaseTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat4_t, _p_mtsGenericObjectProxyBaseT_vctFloat4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat4_t, _p_mtsGenericObjectProxyT_vctFloat4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, _p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt1_t, _p_mtsGenericObjectProxyT_vctInt1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt1_t, _p_mtsGenericObjectProxyBaseT_vctInt1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt1_t, _p_mtsGenericObjectProxyT_vctUInt1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt1_t, _p_mtsGenericObjectProxyBaseT_vctUInt1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t, _p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar8_t, _p_mtsGenericObjectProxyBaseT_vctChar8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar8_t, _p_mtsGenericObjectProxyT_vctChar8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar8_t, _p_mtsGenericObjectProxyBaseT_vctUChar8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar8_t, _p_mtsGenericObjectProxyT_vctUChar8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloatVec_t, _p_mtsGenericObjectProxyBaseT_vctFloatVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloatVec_t, _p_mtsGenericObjectProxyT_vctFloatVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctIntVec_t, _p_mtsGenericObjectProxyBaseT_vctIntVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctIntVec_t, _p_mtsGenericObjectProxyT_vctIntVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUIntVec_t, _p_mtsGenericObjectProxyBaseT_vctUIntVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUIntVec_t, _p_mtsGenericObjectProxyT_vctUIntVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShortVec_t, _p_mtsGenericObjectProxyBaseT_vctShortVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShortVec_t, _p_mtsGenericObjectProxyT_vctShortVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShortVec_t, _p_mtsGenericObjectProxyBaseT_vctUShortVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShortVec_t, _p_mtsGenericObjectProxyT_vctUShortVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool8_t, _p_mtsGenericObjectProxyBaseT_vctBool8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool8_t, _p_mtsGenericObjectProxyT_vctBool8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct3_t, _p_mtsGenericObjectProxyBaseT_vct3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct3_t, _p_mtsGenericObjectProxyT_vct3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmPositionCartesianSet, _p_prmPositionCartesianSetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmVelocityCartesianSet, _p_prmVelocityCartesianSetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmForceCartesianSet, _p_prmForceCartesianSetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_std__string_t, _p_mtsComponentConstructorNameAndArgT_std__string_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong7_t, _p_mtsGenericObjectProxyBaseT_vctULong7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong7_t, _p_mtsGenericObjectProxyT_vctLong7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong7_t, _p_mtsGenericObjectProxyBaseT_vctLong7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong7_t, _p_mtsGenericObjectProxyT_vctULong7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort1_t, _p_mtsGenericObjectProxyT_vctUShort1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort1_t, _p_mtsGenericObjectProxyBaseT_vctUShort1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort1_t, _p_mtsGenericObjectProxyBaseT_vctShort1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort1_t, _p_mtsGenericObjectProxyT_vctShort1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmRobotState, _p_prmRobotStateTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat5_t, _p_mtsGenericObjectProxyT_vctFloat5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat5_t, _p_mtsGenericObjectProxyBaseT_vctFloat5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt2_t, _p_mtsGenericObjectProxyT_vctInt2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt2_t, _p_mtsGenericObjectProxyBaseT_vctInt2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt2_t, _p_mtsGenericObjectProxyT_vctUInt2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt2_t, _p_mtsGenericObjectProxyBaseT_vctUInt2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_mtsComponentState_t, _p_mtsGenericObjectProxyBaseT_mtsComponentState_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_mtsComponentState_t, _p_mtsGenericObjectProxyT_mtsComponentState_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_bool_t, _p_mtsGenericObjectProxyT_bool_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_bool_t, _p_mtsGenericObjectProxyBaseT_bool_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_bool_t, _p_mtsVectorT_bool_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_int_t, _p_mtsComponentConstructorNameAndArgT_unsigned_int_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar9_t, _p_mtsGenericObjectProxyT_vctChar9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar9_t, _p_mtsGenericObjectProxyBaseT_vctUChar9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar9_t, _p_mtsGenericObjectProxyT_vctUChar9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar9_t, _p_mtsGenericObjectProxyBaseT_vctChar9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool9_t, _p_mtsGenericObjectProxyT_vctBool9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool9_t, _p_mtsGenericObjectProxyBaseT_vctBool9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct4_t, _p_mtsGenericObjectProxyT_vct4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct4_t, _p_mtsGenericObjectProxyBaseT_vct4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong8_t, _p_mtsGenericObjectProxyT_vctULong8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong8_t, _p_mtsGenericObjectProxyBaseT_vctULong8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong8_t, _p_mtsGenericObjectProxyT_vctLong8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong8_t, _p_mtsGenericObjectProxyBaseT_vctLong8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort2_t, _p_mtsGenericObjectProxyT_vctShort2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort2_t, _p_mtsGenericObjectProxyBaseT_vctShort2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort2_t, _p_mtsGenericObjectProxyBaseT_vctUShort2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort2_t, _p_mtsGenericObjectProxyT_vctUShort2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsIntervalStatistics, _p_mtsIntervalStatisticsTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleRodRot3, _p_mtsDoubleRodRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatRodRot3, _p_mtsFloatRodRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat6_t, _p_mtsGenericObjectProxyBaseT_vctFloat6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat6_t, _p_mtsGenericObjectProxyT_vctFloat6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsTaskConstructorArg, _p_mtsTaskConstructorArgTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsTaskContinuousConstructorArg, _p_mtsTaskContinuousConstructorArgTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsTaskPeriodicConstructorArg, _p_mtsTaskPeriodicConstructorArgTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt3_t, _p_mtsGenericObjectProxyBaseT_vctInt3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt3_t, _p_mtsGenericObjectProxyT_vctInt3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt3_t, _p_mtsGenericObjectProxyBaseT_vctUInt3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt3_t, _p_mtsGenericObjectProxyT_vctUInt3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUCharVec_t, _p_mtsGenericObjectProxyT_vctUCharVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUCharVec_t, _p_mtsGenericObjectProxyBaseT_vctUCharVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctCharVec_t, _p_mtsGenericObjectProxyT_vctCharVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctCharVec_t, _p_mtsGenericObjectProxyBaseT_vctCharVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct5_t, _p_mtsGenericObjectProxyT_vct5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct5_t, _p_mtsGenericObjectProxyBaseT_vct5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t, _p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong9_t, _p_mtsGenericObjectProxyBaseT_vctLong9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong9_t, _p_mtsGenericObjectProxyT_vctLong9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong9_t, _p_mtsGenericObjectProxyBaseT_vctULong9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong9_t, _p_mtsGenericObjectProxyT_vctULong9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULongVec_t, _p_mtsGenericObjectProxyT_vctULongVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULongVec_t, _p_mtsGenericObjectProxyBaseT_vctULongVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLongVec_t, _p_mtsGenericObjectProxyT_vctLongVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLongVec_t, _p_mtsGenericObjectProxyBaseT_vctLongVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort3_t, _p_mtsGenericObjectProxyT_vctUShort3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort3_t, _p_mtsGenericObjectProxyBaseT_vctUShort3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort3_t, _p_mtsGenericObjectProxyBaseT_vctShort3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort3_t, _p_mtsGenericObjectProxyT_vctShort3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t, _p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t, _p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat7_t, _p_mtsGenericObjectProxyT_vctFloat7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat7_t, _p_mtsGenericObjectProxyBaseT_vctFloat7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleQuat, _p_mtsDoubleQuatTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_short_t, _p_mtsMatrixT_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_short_t, _p_mtsVectorT_unsigned_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_short_t, _p_mtsVectorT_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_short_t, _p_mtsGenericObjectProxyBaseT_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_short_t, _p_mtsGenericObjectProxyT_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_short_t, _p_mtsGenericObjectProxyBaseT_unsigned_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_unsigned_short_t, _p_mtsGenericObjectProxyT_unsigned_short_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt4_t, _p_mtsGenericObjectProxyBaseT_vctInt4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt4_t, _p_mtsGenericObjectProxyT_vctInt4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt4_t, _p_mtsGenericObjectProxyBaseT_vctUInt4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt4_t, _p_mtsGenericObjectProxyT_vctUInt4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_char_t, _p_mtsVectorT_unsigned_char_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_char_t, _p_mtsVectorT_char_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct6_t, _p_mtsGenericObjectProxyBaseT_vct6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct6_t, _p_mtsGenericObjectProxyT_vct6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t, _p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort4_t, _p_mtsGenericObjectProxyT_vctShort4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort4_t, _p_mtsGenericObjectProxyBaseT_vctShort4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort4_t, _p_mtsGenericObjectProxyBaseT_vctUShort4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort4_t, _p_mtsGenericObjectProxyT_vctUShort4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsStateIndex, _p_mtsStateIndexTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, _p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat8_t, _p_mtsGenericObjectProxyBaseT_vctFloat8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat8_t, _p_mtsGenericObjectProxyT_vctFloat8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar1_t, _p_mtsGenericObjectProxyBaseT_vctChar1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar1_t, _p_mtsGenericObjectProxyT_vctChar1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar1_t, _p_mtsGenericObjectProxyBaseT_vctUChar1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar1_t, _p_mtsGenericObjectProxyT_vctUChar1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool1_t, _p_mtsGenericObjectProxyBaseT_vctBool1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool1_t, _p_mtsGenericObjectProxyT_vctBool1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt5_t, _p_mtsGenericObjectProxyT_vctInt5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt5_t, _p_mtsGenericObjectProxyBaseT_vctInt5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt5_t, _p_mtsGenericObjectProxyT_vctUInt5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt5_t, _p_mtsGenericObjectProxyBaseT_vctUInt5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct7_t, _p_mtsGenericObjectProxyBaseT_vct7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct7_t, _p_mtsGenericObjectProxyT_vct7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatFrm4x4, _p_mtsFloatFrm4x4To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleFrm4x4, _p_mtsDoubleFrm4x4To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t, _p_mtsGenericObjectProxyBaseT_vctDoubleVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctDoubleVec_t, _p_mtsGenericObjectProxyT_vctDoubleVec_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort5_t, _p_mtsGenericObjectProxyT_vctShort5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort5_t, _p_mtsGenericObjectProxyBaseT_vctShort5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort5_t, _p_mtsGenericObjectProxyBaseT_vctUShort5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort5_t, _p_mtsGenericObjectProxyT_vctUShort5_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat9_t, _p_mtsGenericObjectProxyBaseT_vctFloat9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat9_t, _p_mtsGenericObjectProxyT_vctFloat9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar2_t, _p_mtsGenericObjectProxyBaseT_vctChar2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar2_t, _p_mtsGenericObjectProxyT_vctChar2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar2_t, _p_mtsGenericObjectProxyBaseT_vctUChar2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar2_t, _p_mtsGenericObjectProxyT_vctUChar2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_unsigned_long_t, _p_mtsComponentConstructorNameAndArgT_unsigned_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool2_t, _p_mtsGenericObjectProxyBaseT_vctBool2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool2_t, _p_mtsGenericObjectProxyT_vctBool2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt6_t, _p_mtsGenericObjectProxyT_vctInt6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt6_t, _p_mtsGenericObjectProxyBaseT_vctInt6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt6_t, _p_mtsGenericObjectProxyT_vctUInt6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt6_t, _p_mtsGenericObjectProxyBaseT_vctUInt6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong1_t, _p_mtsGenericObjectProxyT_vctULong1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong1_t, _p_mtsGenericObjectProxyBaseT_vctULong1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong1_t, _p_mtsGenericObjectProxyBaseT_vctLong1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong1_t, _p_mtsGenericObjectProxyT_vctLong1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t, _p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatAnRot2, _p_mtsFloatAnRot2To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloatMat_t, _p_mtsGenericObjectProxyBaseT_vctFloatMat_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloatMat_t, _p_mtsGenericObjectProxyT_vctFloatMat_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleAnRot2, _p_mtsDoubleAnRot2To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatAxAnRot3, _p_mtsFloatAxAnRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleAxAnRot3, _p_mtsDoubleAxAnRot3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctIntMat_t, _p_mtsGenericObjectProxyBaseT_vctIntMat_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctIntMat_t, _p_mtsGenericObjectProxyT_vctIntMat_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct8_t, _p_mtsGenericObjectProxyBaseT_vct8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct8_t, _p_mtsGenericObjectProxyT_vct8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort6_t, _p_mtsGenericObjectProxyT_vctShort6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort6_t, _p_mtsGenericObjectProxyBaseT_vctShort6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort6_t, _p_mtsGenericObjectProxyBaseT_vctUShort6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort6_t, _p_mtsGenericObjectProxyT_vctUShort6_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t, _p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar3_t, _p_mtsGenericObjectProxyBaseT_vctChar3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar3_t, _p_mtsGenericObjectProxyT_vctChar3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar3_t, _p_mtsGenericObjectProxyBaseT_vctUChar3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar3_t, _p_mtsGenericObjectProxyT_vctUChar3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatMatFrm3, _p_mtsFloatMatFrm3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleMatFrm3, _p_mtsDoubleMatFrm3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsFloatQuatFrm3, _p_mtsFloatQuatFrm3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsDoubleQuatFrm3, _p_mtsDoubleQuatFrm3To_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool3_t, _p_mtsGenericObjectProxyBaseT_vctBool3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool3_t, _p_mtsGenericObjectProxyT_vctBool3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt7_t, _p_mtsGenericObjectProxyBaseT_vctInt7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt7_t, _p_mtsGenericObjectProxyT_vctInt7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt7_t, _p_mtsGenericObjectProxyBaseT_vctUInt7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt7_t, _p_mtsGenericObjectProxyT_vctUInt7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong2_t, _p_mtsGenericObjectProxyT_vctLong2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong2_t, _p_mtsGenericObjectProxyBaseT_vctLong2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong2_t, _p_mtsGenericObjectProxyBaseT_vctULong2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong2_t, _p_mtsGenericObjectProxyT_vctULong2_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vct9_t, _p_mtsGenericObjectProxyT_vct9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vct9_t, _p_mtsGenericObjectProxyBaseT_vct9_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t, _p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUShort7_t, _p_mtsGenericObjectProxyT_vctUShort7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUShort7_t, _p_mtsGenericObjectProxyBaseT_vctUShort7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctShort7_t, _p_mtsGenericObjectProxyBaseT_vctShort7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctShort7_t, _p_mtsGenericObjectProxyT_vctShort7_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUChar4_t, _p_mtsGenericObjectProxyT_vctUChar4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUChar4_t, _p_mtsGenericObjectProxyBaseT_vctUChar4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctChar4_t, _p_mtsGenericObjectProxyT_vctChar4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctChar4_t, _p_mtsGenericObjectProxyBaseT_vctChar4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmPositionJointGet, _p_prmPositionJointGetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_prmVelocityJointGet, _p_prmVelocityJointGetTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctBool4_t, _p_mtsGenericObjectProxyT_vctBool4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctBool4_t, _p_mtsGenericObjectProxyBaseT_vctBool4_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctInt8_t, _p_mtsGenericObjectProxyBaseT_vctInt8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctInt8_t, _p_mtsGenericObjectProxyT_vctInt8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctUInt8_t, _p_mtsGenericObjectProxyBaseT_vctUInt8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctUInt8_t, _p_mtsGenericObjectProxyT_vctUInt8_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctLong3_t, _p_mtsGenericObjectProxyT_vctLong3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctLong3_t, _p_mtsGenericObjectProxyBaseT_vctLong3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctULong3_t, _p_mtsGenericObjectProxyBaseT_vctULong3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctULong3_t, _p_mtsGenericObjectProxyT_vctULong3_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_long_t, _p_mtsGenericObjectProxyT_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_unsigned_long_t, _p_mtsGenericObjectProxyBaseT_unsigned_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_unsigned_long_t, _p_mtsGenericObjectProxyT_unsigned_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_long_t, _p_mtsGenericObjectProxyBaseT_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsComponentConstructorNameAndArgT_long_t, _p_mtsComponentConstructorNameAndArgT_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_long_t, _p_mtsVectorT_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsVectorT_unsigned_long_t, _p_mtsVectorT_unsigned_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsMatrixT_long_t, _p_mtsMatrixT_long_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyBaseT_vctFloat1_t, _p_mtsGenericObjectProxyBaseT_vctFloat1_tTo_p_mtsGenericObject, 0, 0},  {&_swigt__p_mtsGenericObjectProxyT_vctFloat1_t, _p_mtsGenericObjectProxyT_vctFloat1_tTo_p_mtsGenericObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_bool_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_char_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_double_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_float_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_int_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_long_long_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_long_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsCommandReadDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsCommandReadDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsComponentStateChange_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsComponentStateChange_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsComponentState_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsComponentState_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsComponentStatusControl_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsComponentStatusControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsDescriptionComponent_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsDescriptionComponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsDescriptionConnection_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsDescriptionConnection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsDescriptionInterface_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsDescriptionInterface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsEventVoidDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsEventVoidDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsEventWriteDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsEventWriteDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsExecutionResult_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsExecutionResult_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsMessage_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsMessage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_prmPositionCartesianGet_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_prmPositionCartesianGet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_prmPositionJointGet_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_prmPositionJointGet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_prmPositionJointSet_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_prmPositionJointSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_short_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__listT_std__string_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__listT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__string_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_unsigned_char_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_unsigned_int_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_unsigned_long_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_unsigned_short_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct2x2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct2x2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct3x3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct3x3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct4x4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct4x4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vct9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vct9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBool9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBool9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctBoolVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctBoolVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctChar9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctChar9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctCharVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctCharVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctDoubleMat_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctDoubleMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctDoubleVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctDoubleVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloat9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloat9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloatMat_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloatMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFloatVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFloatVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctInt9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctInt9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctIntMat_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctIntMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctIntVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctIntVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLong9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLong9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctLongVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctLongVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShort9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShort9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctShortVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctShortVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUChar9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUChar9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUCharVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUCharVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUInt9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUInt9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUIntVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUIntVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULong9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULong9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctULongVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctULongVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort1_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort2_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort3_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort4_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort5_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort6_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort7_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort7_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort8_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShort9_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShort9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsGenericObjectProxyT_vctUShortVec_t[] = {  {&_swigt__p_mtsGenericObjectProxyT_vctUShortVec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsInterfaceProvidedDescription[] = {  {&_swigt__p_mtsInterfaceProvidedDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsInterfaceQueueingPolicy[] = {  {&_swigt__p_mtsInterfaceQueueingPolicy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsInterfaceRequiredDescription[] = {  {&_swigt__p_mtsInterfaceRequiredDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_bool_t[] = {  {&_swigt__p_mtsMatrixT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_char_t[] = {  {&_swigt__p_mtsMatrixT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_double_t[] = {  {&_swigt__p_mtsMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_float_t[] = {  {&_swigt__p_mtsMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_int_t[] = {  {&_swigt__p_mtsMatrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_long_t[] = {  {&_swigt__p_mtsMatrixT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_short_t[] = {  {&_swigt__p_mtsMatrixT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_unsigned_char_t[] = {  {&_swigt__p_mtsMatrixT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_unsigned_int_t[] = {  {&_swigt__p_mtsMatrixT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_unsigned_long_t[] = {  {&_swigt__p_mtsMatrixT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMatrixT_unsigned_short_t[] = {  {&_swigt__p_mtsMatrixT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsMessage[] = {  {&_swigt__p_mtsMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsRequiredType[] = {  {&_swigt__p_mtsRequiredType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskConstructorArg[] = {  {&_swigt__p_mtsTaskConstructorArg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskContinuousConstructorArg[] = {  {&_swigt__p_mtsTaskContinuousConstructorArg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsTaskPeriodicConstructorArg[] = {  {&_swigt__p_mtsTaskPeriodicConstructorArg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_bool_t[] = {  {&_swigt__p_mtsVectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_char_t[] = {  {&_swigt__p_mtsVectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_double_t[] = {  {&_swigt__p_mtsVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_float_t[] = {  {&_swigt__p_mtsVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_int_t[] = {  {&_swigt__p_mtsVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_long_t[] = {  {&_swigt__p_mtsVectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_short_t[] = {  {&_swigt__p_mtsVectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_std__string_t[] = {  {&_swigt__p_mtsVectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_unsigned_char_t[] = {  {&_swigt__p_mtsVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_unsigned_int_t[] = {  {&_swigt__p_mtsVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_unsigned_long_t[] = {  {&_swigt__p_mtsVectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtsVectorT_unsigned_short_t[] = {  {&_swigt__p_mtsVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ndimension_type[] = {  {&_swigt__p_ndimension_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nindex_type[] = {  {&_swigt__p_nindex_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nsize_type[] = {  {&_swigt__p_nsize_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nstride_type[] = {  {&_swigt__p_nstride_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmBlocking[] = {  {&_swigt__p_prmBlocking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmEventButton[] = {  {&_swigt__p_prmEventButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmEventButton__EventType[] = {  {&_swigt__p_prmEventButton__EventType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmForceCartesianGet[] = {  {&_swigt__p_prmForceCartesianGet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmForceCartesianSet[] = {  {&_swigt__p_prmForceCartesianSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmMotionBase[] = {  {&_swigt__p_prmVelocityJointSet, _p_prmVelocityJointSetTo_p_prmMotionBase, 0, 0},  {&_swigt__p_prmMotionBase, 0, 0, 0},  {&_swigt__p_prmPositionCartesianSet, _p_prmPositionCartesianSetTo_p_prmMotionBase, 0, 0},  {&_swigt__p_prmVelocityCartesianSet, _p_prmVelocityCartesianSetTo_p_prmMotionBase, 0, 0},  {&_swigt__p_prmForceCartesianSet, _p_prmForceCartesianSetTo_p_prmMotionBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmPositionCartesianGet[] = {  {&_swigt__p_prmPositionCartesianGet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmPositionCartesianSet[] = {  {&_swigt__p_prmPositionCartesianSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmPositionJointGet[] = {  {&_swigt__p_prmPositionJointGet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmPositionJointSet[] = {  {&_swigt__p_prmPositionJointSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmRobotState[] = {  {&_swigt__p_prmRobotState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmTransformationBase[] = {  {&_swigt__p_prmTransformationDynamic, _p_prmTransformationDynamicTo_p_prmTransformationBase, 0, 0},  {&_swigt__p_prmTransformationFixed, _p_prmTransformationFixedTo_p_prmTransformationBase, 0, 0},  {&_swigt__p_prmTransformationBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmTransformationDynamic[] = {  {&_swigt__p_prmTransformationDynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmTransformationFixed[] = {  {&_swigt__p_prmTransformationFixed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmTransformationManager[] = {  {&_swigt__p_prmTransformationManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmVelocityCartesianGet[] = {  {&_swigt__p_prmVelocityCartesianGet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmVelocityCartesianSet[] = {  {&_swigt__p_prmVelocityCartesianSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmVelocityJointGet[] = {  {&_swigt__p_prmVelocityJointGet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prmVelocityJointSet[] = {  {&_swigt__p_prmVelocityJointSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptrdiff_t[] = {  {&_swigt__p_ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t, _p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_tTo_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t, _p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_tTo_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__string_t[] = {  {&_swigt__p_std__listT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__vectorT_char_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t[] = {  {&_swigt__p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t[] = {  {&_swigt__p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t[] = {  {&_swigt__p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t[] = {  {&_swigt__p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vct3_std__allocatorT_vct3_t_t[] = {  {&_swigt__p_std__vectorT_vct3_std__allocatorT_vct3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamoff[] = {  {&_swigt__p_streamoff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streampos[] = {  {&_swigt__p_streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stride_type[] = {  {&_swigt__p_stride_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctAngleRotation2[] = {  {&_swigt__p_vctAngleRotation2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctAxisAngleRotation3T_double_t[] = {  {&_swigt__p_vctAxisAngleRotation3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctAxisAngleRotation3T_float_t[] = {  {&_swigt__p_vctAxisAngleRotation3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctBarycentricVectorT_double_1_t[] = {  {&_swigt__p_vctBarycentricVectorT_double_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctBarycentricVectorT_double_2_t[] = {  {&_swigt__p_vctBarycentricVectorT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctBarycentricVectorT_double_3_t[] = {  {&_swigt__p_vctBarycentricVectorT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctBarycentricVectorT_double_4_t[] = {  {&_swigt__p_vctBarycentricVectorT_double_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t[] = {  {&_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t[] = {  {&_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t[] = {  {&_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t[] = {  {&_swigt__p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFixedSizeConstVectorRefT_double_3_1_t[] = {  {&_swigt__p_vctFixedSizeConstVectorRefT_double_3_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFixedSizeVectorRefT_double_3_1_t[] = {  {&_swigt__p_vctFixedSizeVectorRefT_double_3_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrame4x4T_double_VCT_ROW_MAJOR_t[] = {  {&_swigt__p_vctFrame4x4T_double_VCT_ROW_MAJOR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrame4x4T_float_VCT_ROW_MAJOR_t[] = {  {&_swigt__p_vctFrame4x4T_float_VCT_ROW_MAJOR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrameBaseT_vctMatrixRotation2T_double_t_t[] = {  {&_swigt__p_vctFrameBaseT_vctMatrixRotation2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrameBaseT_vctMatrixRotation2T_float_t_t[] = {  {&_swigt__p_vctFrameBaseT_vctMatrixRotation2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t[] = {  {&_swigt__p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0, 0, 0},  {&_swigt__p_mtsDoubleMatFrm3, _p_mtsDoubleMatFrm3To_p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t[] = {  {&_swigt__p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t[] = {  {&_swigt__p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t[] = {  {&_swigt__p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctMatrixRotation2T_double_t[] = {  {&_swigt__p_vctMatrixRotation2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctMatrixRotation2T_float_t[] = {  {&_swigt__p_vctMatrixRotation2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t[] = {  {&_swigt__p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t[] = {  {&_swigt__p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctQuaternionRotation3T_double_t[] = {  {&_swigt__p_vctQuaternionRotation3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctQuaternionRotation3T_float_t[] = {  {&_swigt__p_vctQuaternionRotation3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctQuaternionT_double_t[] = {  {&_swigt__p_vctQuaternionT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctQuaternionT_float_t[] = {  {&_swigt__p_vctQuaternionT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctRodriguezRotation3T_double_t[] = {  {&_swigt__p_vctRodriguezRotation3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vctRodriguezRotation3T_float_t[] = {  {&_swigt__p_vctRodriguezRotation3T_float_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ActionType,
  _swigc__p_AngleType,
  _swigc__p_BaseClassType,
  _swigc__p_BaseType,
  _swigc__p_BoolType,
  _swigc__p_CallableType,
  _swigc__p_ChannelContainerType,
  _swigc__p_ChannelType,
  _swigc__p_CollectorFileFloatingNotation,
  _swigc__p_CollectorFileFormat,
  _swigc__p_CommandInternalMapType,
  _swigc__p_CommandQualifiedReadMapType,
  _swigc__p_CommandReadMapType,
  _swigc__p_CommandType,
  _swigc__p_CommandVoidMapType,
  _swigc__p_CommandVoidReturnMapType,
  _swigc__p_CommandWriteMapType,
  _swigc__p_CommandWriteReturnMapType,
  _swigc__p_ConstForceType,
  _swigc__p_ConstIteratorType,
  _swigc__p_ConstTorqueType,
  _swigc__p_ContainerType,
  _swigc__p_DeRefType,
  _swigc__p_ElementType,
  _swigc__p_EntryType,
  _swigc__p_EventType,
  _swigc__p_EventVoidMapType,
  _swigc__p_EventWriteMapType,
  _swigc__p_ForceType,
  _swigc__p_IteratorType,
  _swigc__p_MaskType,
  _swigc__p_MatrixType,
  _swigc__p_MultiplexerConstIteratorType,
  _swigc__p_MultiplexerContainerType,
  _swigc__p_MultiplexerIteratorType,
  _swigc__p_NodeListType,
  _swigc__p_NormType,
  _swigc__p_RefType,
  _swigc__p_RotationType,
  _swigc__p_ServicesContainerType,
  _swigc__p_StreamBufType,
  _swigc__p_ThisType,
  _swigc__p_TimeTicksType,
  _swigc__p_TorqueType,
  _swigc__p_TranslationType,
  _swigc__p_Type,
  _swigc__p_TypeTraits,
  _swigc__p_VaArgPromotion,
  _swigc__p_VectorType,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_cmnCallbackStreambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_cmnClassServicesBase,
  _swigc__p_cmnDataFormat,
  _swigc__p_cmnGenericObject,
  _swigc__p_cmnGenericObjectProxyT_bool_t,
  _swigc__p_cmnGenericObjectProxyT_char_t,
  _swigc__p_cmnGenericObjectProxyT_double_t,
  _swigc__p_cmnGenericObjectProxyT_int_t,
  _swigc__p_cmnGenericObjectProxyT_long_long_t,
  _swigc__p_cmnGenericObjectProxyT_long_t,
  _swigc__p_cmnGenericObjectProxyT_short_t,
  _swigc__p_cmnGenericObjectProxyT_unsigned_char_t,
  _swigc__p_cmnGenericObjectProxyT_unsigned_int_t,
  _swigc__p_cmnGenericObjectProxyT_unsigned_long_long_t,
  _swigc__p_cmnGenericObjectProxyT_unsigned_long_t,
  _swigc__p_cmnGenericObjectProxyT_unsigned_short_t,
  _swigc__p_cmnLODMultiplexerStreambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_cmnPath,
  _swigc__p_const_iterator,
  _swigc__p_const_reverse_iterator,
  _swigc__p_difference_type,
  _swigc__p_dimension_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_index_type,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_iterator,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_mtsBlockingType,
  _swigc__p_mtsCollectorBase,
  _swigc__p_mtsCollectorState,
  _swigc__p_mtsCommandQualifiedReadDescription,
  _swigc__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandRead_t,
  _swigc__p_mtsCommandQueuedVoidReturnBaseT_mtsCommandVoidReturn_t,
  _swigc__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandQualifiedRead_t,
  _swigc__p_mtsCommandQueuedWriteReturnBaseT_mtsCommandWriteReturn_t,
  _swigc__p_mtsCommandQueueingPolicy,
  _swigc__p_mtsCommandReadDescription,
  _swigc__p_mtsCommandVoidDescription,
  _swigc__p_mtsCommandVoidReturnDescription,
  _swigc__p_mtsCommandWriteDescription,
  _swigc__p_mtsCommandWriteReturnDescription,
  _swigc__p_mtsComponent,
  _swigc__p_mtsComponentConstructorNameAndArgT_double_t,
  _swigc__p_mtsComponentConstructorNameAndArgT_int_t,
  _swigc__p_mtsComponentConstructorNameAndArgT_long_t,
  _swigc__p_mtsComponentConstructorNameAndArgT_std__string_t,
  _swigc__p_mtsComponentConstructorNameAndArgT_unsigned_int_t,
  _swigc__p_mtsComponentConstructorNameAndArgT_unsigned_long_t,
  _swigc__p_mtsComponentState,
  _swigc__p_mtsComponentStateChange,
  _swigc__p_mtsComponentStatusControl,
  _swigc__p_mtsComponentWithManagement,
  _swigc__p_mtsDescriptionComponent,
  _swigc__p_mtsDescriptionComponentClass,
  _swigc__p_mtsDescriptionConnection,
  _swigc__p_mtsDescriptionInterface,
  _swigc__p_mtsDescriptionInterfaceFullName,
  _swigc__p_mtsDescriptionLoadLibrary,
  _swigc__p_mtsDoubleAnRot2,
  _swigc__p_mtsDoubleAxAnRot3,
  _swigc__p_mtsDoubleFrm4x4,
  _swigc__p_mtsDoubleMatFrm3,
  _swigc__p_mtsDoubleMatRot2,
  _swigc__p_mtsDoubleMatRot3,
  _swigc__p_mtsDoubleQuat,
  _swigc__p_mtsDoubleQuatFrm3,
  _swigc__p_mtsDoubleQuatRot3,
  _swigc__p_mtsDoubleRodRot3,
  _swigc__p_mtsEndUserInterfaceArg,
  _swigc__p_mtsEventQueueingPolicy,
  _swigc__p_mtsEventVoidDescription,
  _swigc__p_mtsEventWriteDescription,
  _swigc__p_mtsExecutionResult,
  _swigc__p_mtsFloatAnRot2,
  _swigc__p_mtsFloatAxAnRot3,
  _swigc__p_mtsFloatFrm4x4,
  _swigc__p_mtsFloatMatFrm3,
  _swigc__p_mtsFloatMatRot2,
  _swigc__p_mtsFloatMatRot3,
  _swigc__p_mtsFloatQuat,
  _swigc__p_mtsFloatQuatFrm3,
  _swigc__p_mtsFloatQuatRot3,
  _swigc__p_mtsFloatRodRot3,
  _swigc__p_mtsFunctionRead,
  _swigc__p_mtsGenericObject,
  _swigc__p_mtsGenericObjectProxyBaseT_bool_t,
  _swigc__p_mtsGenericObjectProxyBaseT_double_t,
  _swigc__p_mtsGenericObjectProxyBaseT_float_t,
  _swigc__p_mtsGenericObjectProxyBaseT_int_t,
  _swigc__p_mtsGenericObjectProxyBaseT_long_t,
  _swigc__p_mtsGenericObjectProxyBaseT_mtsComponentState_t,
  _swigc__p_mtsGenericObjectProxyBaseT_mtsInterfaceProvidedDescription_t,
  _swigc__p_mtsGenericObjectProxyBaseT_mtsInterfaceRequiredDescription_t,
  _swigc__p_mtsGenericObjectProxyBaseT_short_t,
  _swigc__p_mtsGenericObjectProxyBaseT_std__string_t,
  _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_char_std__allocatorT_char_t_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_unsigned_int_t,
  _swigc__p_mtsGenericObjectProxyBaseT_unsigned_long_t,
  _swigc__p_mtsGenericObjectProxyBaseT_unsigned_short_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct2x2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct3x3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct4x4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vct9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBool9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctBoolVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctChar9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctCharVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctDoubleMat_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctDoubleVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloat9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloatMat_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFloatVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctFrameBaseT_vctRot3_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctInt9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctIntMat_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctIntVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLong9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctLongVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShort9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctShortVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUChar9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUCharVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUInt9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUIntVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULong9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctULongVec_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort1_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort2_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort3_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort4_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort5_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort6_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort7_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort8_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShort9_t,
  _swigc__p_mtsGenericObjectProxyBaseT_vctUShortVec_t,
  _swigc__p_mtsGenericObjectProxyT_bool_t,
  _swigc__p_mtsGenericObjectProxyT_char_t,
  _swigc__p_mtsGenericObjectProxyT_double_t,
  _swigc__p_mtsGenericObjectProxyT_float_t,
  _swigc__p_mtsGenericObjectProxyT_int_t,
  _swigc__p_mtsGenericObjectProxyT_long_long_t,
  _swigc__p_mtsGenericObjectProxyT_long_t,
  _swigc__p_mtsGenericObjectProxyT_mtsCommandQualifiedReadDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsCommandReadDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsCommandVoidDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsCommandVoidReturnDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsCommandWriteDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsCommandWriteReturnDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsComponentStateChange_t,
  _swigc__p_mtsGenericObjectProxyT_mtsComponentState_t,
  _swigc__p_mtsGenericObjectProxyT_mtsComponentStatusControl_t,
  _swigc__p_mtsGenericObjectProxyT_mtsDescriptionComponentClass_t,
  _swigc__p_mtsGenericObjectProxyT_mtsDescriptionComponent_t,
  _swigc__p_mtsGenericObjectProxyT_mtsDescriptionConnection_t,
  _swigc__p_mtsGenericObjectProxyT_mtsDescriptionInterfaceFullName_t,
  _swigc__p_mtsGenericObjectProxyT_mtsDescriptionInterface_t,
  _swigc__p_mtsGenericObjectProxyT_mtsDescriptionLoadLibrary_t,
  _swigc__p_mtsGenericObjectProxyT_mtsEndUserInterfaceArg_t,
  _swigc__p_mtsGenericObjectProxyT_mtsEventVoidDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsEventWriteDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsExecutionResult_t,
  _swigc__p_mtsGenericObjectProxyT_mtsInterfaceProvidedDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsInterfaceRequiredDescription_t,
  _swigc__p_mtsGenericObjectProxyT_mtsMessage_t,
  _swigc__p_mtsGenericObjectProxyT_mtsTaskConstructorArg_t,
  _swigc__p_mtsGenericObjectProxyT_mtsTaskContinuousConstructorArg_t,
  _swigc__p_mtsGenericObjectProxyT_mtsTaskPeriodicConstructorArg_t,
  _swigc__p_mtsGenericObjectProxyT_prmPositionCartesianGet_t,
  _swigc__p_mtsGenericObjectProxyT_prmPositionJointGet_t,
  _swigc__p_mtsGenericObjectProxyT_prmPositionJointSet_t,
  _swigc__p_mtsGenericObjectProxyT_prmVelocityCartesianGet_t,
  _swigc__p_mtsGenericObjectProxyT_short_t,
  _swigc__p_mtsGenericObjectProxyT_std__listT_std__string_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__string_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_char_std__allocatorT_char_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_std__vectorT_vct3_std__allocatorT_vct3_t_t_t,
  _swigc__p_mtsGenericObjectProxyT_unsigned_char_t,
  _swigc__p_mtsGenericObjectProxyT_unsigned_int_t,
  _swigc__p_mtsGenericObjectProxyT_unsigned_long_t,
  _swigc__p_mtsGenericObjectProxyT_unsigned_short_t,
  _swigc__p_mtsGenericObjectProxyT_vct1_t,
  _swigc__p_mtsGenericObjectProxyT_vct2_t,
  _swigc__p_mtsGenericObjectProxyT_vct2x2_t,
  _swigc__p_mtsGenericObjectProxyT_vct3_t,
  _swigc__p_mtsGenericObjectProxyT_vct3x3_t,
  _swigc__p_mtsGenericObjectProxyT_vct4_t,
  _swigc__p_mtsGenericObjectProxyT_vct4x4_t,
  _swigc__p_mtsGenericObjectProxyT_vct5_t,
  _swigc__p_mtsGenericObjectProxyT_vct6_t,
  _swigc__p_mtsGenericObjectProxyT_vct7_t,
  _swigc__p_mtsGenericObjectProxyT_vct8_t,
  _swigc__p_mtsGenericObjectProxyT_vct9_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool1_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool2_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool3_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool4_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool5_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool6_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool7_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool8_t,
  _swigc__p_mtsGenericObjectProxyT_vctBool9_t,
  _swigc__p_mtsGenericObjectProxyT_vctBoolVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar1_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar2_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar3_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar4_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar5_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar6_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar7_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar8_t,
  _swigc__p_mtsGenericObjectProxyT_vctChar9_t,
  _swigc__p_mtsGenericObjectProxyT_vctCharVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctDoubleMat_t,
  _swigc__p_mtsGenericObjectProxyT_vctDoubleVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat1_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat2_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat3_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat4_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat5_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat6_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat7_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat8_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloat9_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloatMat_t,
  _swigc__p_mtsGenericObjectProxyT_vctFloatVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctFrame4x4T_double_VCT_ROW_MAJOR_t_t,
  _swigc__p_mtsGenericObjectProxyT_vctFrameBaseT_vctRot3_t_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt1_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt2_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt3_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt4_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt5_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt6_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt7_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt8_t,
  _swigc__p_mtsGenericObjectProxyT_vctInt9_t,
  _swigc__p_mtsGenericObjectProxyT_vctIntMat_t,
  _swigc__p_mtsGenericObjectProxyT_vctIntVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong1_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong2_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong3_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong4_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong5_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong6_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong7_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong8_t,
  _swigc__p_mtsGenericObjectProxyT_vctLong9_t,
  _swigc__p_mtsGenericObjectProxyT_vctLongVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort1_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort2_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort3_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort4_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort5_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort6_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort7_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort8_t,
  _swigc__p_mtsGenericObjectProxyT_vctShort9_t,
  _swigc__p_mtsGenericObjectProxyT_vctShortVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar1_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar2_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar3_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar4_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar5_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar6_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar7_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar8_t,
  _swigc__p_mtsGenericObjectProxyT_vctUChar9_t,
  _swigc__p_mtsGenericObjectProxyT_vctUCharVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt1_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt2_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt3_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt4_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt5_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt6_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt7_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt8_t,
  _swigc__p_mtsGenericObjectProxyT_vctUInt9_t,
  _swigc__p_mtsGenericObjectProxyT_vctUIntVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong1_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong2_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong3_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong4_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong5_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong6_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong7_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong8_t,
  _swigc__p_mtsGenericObjectProxyT_vctULong9_t,
  _swigc__p_mtsGenericObjectProxyT_vctULongVec_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort1_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort2_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort3_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort4_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort5_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort6_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort7_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort8_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShort9_t,
  _swigc__p_mtsGenericObjectProxyT_vctUShortVec_t,
  _swigc__p_mtsInterface,
  _swigc__p_mtsInterfaceProvided,
  _swigc__p_mtsInterfaceProvidedDescription,
  _swigc__p_mtsInterfaceQueueingPolicy,
  _swigc__p_mtsInterfaceRequired,
  _swigc__p_mtsInterfaceRequiredDescription,
  _swigc__p_mtsIntervalStatistics,
  _swigc__p_mtsManagerComponentServices,
  _swigc__p_mtsManagerLocal,
  _swigc__p_mtsManagerLocalInterface,
  _swigc__p_mtsMatrixT_bool_t,
  _swigc__p_mtsMatrixT_char_t,
  _swigc__p_mtsMatrixT_double_t,
  _swigc__p_mtsMatrixT_float_t,
  _swigc__p_mtsMatrixT_int_t,
  _swigc__p_mtsMatrixT_long_t,
  _swigc__p_mtsMatrixT_short_t,
  _swigc__p_mtsMatrixT_unsigned_char_t,
  _swigc__p_mtsMatrixT_unsigned_int_t,
  _swigc__p_mtsMatrixT_unsigned_long_t,
  _swigc__p_mtsMatrixT_unsigned_short_t,
  _swigc__p_mtsMessage,
  _swigc__p_mtsRequiredType,
  _swigc__p_mtsStateIndex,
  _swigc__p_mtsTask,
  _swigc__p_mtsTaskConstructorArg,
  _swigc__p_mtsTaskContinuous,
  _swigc__p_mtsTaskContinuousConstructorArg,
  _swigc__p_mtsTaskFromSignal,
  _swigc__p_mtsTaskMain,
  _swigc__p_mtsTaskPeriodic,
  _swigc__p_mtsTaskPeriodicConstructorArg,
  _swigc__p_mtsVectorT_bool_t,
  _swigc__p_mtsVectorT_char_t,
  _swigc__p_mtsVectorT_double_t,
  _swigc__p_mtsVectorT_float_t,
  _swigc__p_mtsVectorT_int_t,
  _swigc__p_mtsVectorT_long_t,
  _swigc__p_mtsVectorT_short_t,
  _swigc__p_mtsVectorT_std__string_t,
  _swigc__p_mtsVectorT_unsigned_char_t,
  _swigc__p_mtsVectorT_unsigned_int_t,
  _swigc__p_mtsVectorT_unsigned_long_t,
  _swigc__p_mtsVectorT_unsigned_short_t,
  _swigc__p_ndimension_type,
  _swigc__p_nindex_type,
  _swigc__p_nsize_type,
  _swigc__p_nstride_type,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_osaSerialPort,
  _swigc__p_osaTimeServer,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_prmBlocking,
  _swigc__p_prmEventButton,
  _swigc__p_prmEventButton__EventType,
  _swigc__p_prmForceCartesianGet,
  _swigc__p_prmForceCartesianSet,
  _swigc__p_prmMotionBase,
  _swigc__p_prmPositionCartesianGet,
  _swigc__p_prmPositionCartesianSet,
  _swigc__p_prmPositionJointGet,
  _swigc__p_prmPositionJointSet,
  _swigc__p_prmRobotState,
  _swigc__p_prmTransformationBase,
  _swigc__p_prmTransformationDynamic,
  _swigc__p_prmTransformationFixed,
  _swigc__p_prmTransformationManager,
  _swigc__p_prmVelocityCartesianGet,
  _swigc__p_prmVelocityCartesianSet,
  _swigc__p_prmVelocityJointGet,
  _swigc__p_prmVelocityJointSet,
  _swigc__p_ptrdiff_t,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__listT_std__string_t,
  _swigc__p_std__locale,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_char_std__allocatorT_char_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_mtsCommandQualifiedReadDescription_std__allocatorT_mtsCommandQualifiedReadDescription_t_t,
  _swigc__p_std__vectorT_mtsCommandReadDescription_std__allocatorT_mtsCommandReadDescription_t_t,
  _swigc__p_std__vectorT_mtsCommandVoidDescription_std__allocatorT_mtsCommandVoidDescription_t_t,
  _swigc__p_std__vectorT_mtsCommandVoidReturnDescription_std__allocatorT_mtsCommandVoidReturnDescription_t_t,
  _swigc__p_std__vectorT_mtsCommandWriteDescription_std__allocatorT_mtsCommandWriteDescription_t_t,
  _swigc__p_std__vectorT_mtsCommandWriteReturnDescription_std__allocatorT_mtsCommandWriteReturnDescription_t_t,
  _swigc__p_std__vectorT_mtsDescriptionComponentClass_std__allocatorT_mtsDescriptionComponentClass_t_t,
  _swigc__p_std__vectorT_mtsDescriptionConnection_std__allocatorT_mtsDescriptionConnection_t_t,
  _swigc__p_std__vectorT_mtsDescriptionInterfaceFullName_std__allocatorT_mtsDescriptionInterfaceFullName_t_t,
  _swigc__p_std__vectorT_mtsEventVoidDescription_std__allocatorT_mtsEventVoidDescription_t_t,
  _swigc__p_std__vectorT_mtsEventWriteDescription_std__allocatorT_mtsEventWriteDescription_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_vct3_std__allocatorT_vct3_t_t,
  _swigc__p_streamoff,
  _swigc__p_streampos,
  _swigc__p_stride_type,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_vctAngleRotation2,
  _swigc__p_vctAxisAngleRotation3T_double_t,
  _swigc__p_vctAxisAngleRotation3T_float_t,
  _swigc__p_vctBarycentricVectorT_double_1_t,
  _swigc__p_vctBarycentricVectorT_double_2_t,
  _swigc__p_vctBarycentricVectorT_double_3_t,
  _swigc__p_vctBarycentricVectorT_double_4_t,
  _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__YZX_t,
  _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__ZXZ_t,
  _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__ZYX_t,
  _swigc__p_vctEulerRotation3T_vctEulerRotation3Order__ZYZ_t,
  _swigc__p_vctFixedSizeConstVectorRefT_double_3_1_t,
  _swigc__p_vctFixedSizeVectorRefT_double_3_1_t,
  _swigc__p_vctFrame4x4T_double_VCT_ROW_MAJOR_t,
  _swigc__p_vctFrame4x4T_float_VCT_ROW_MAJOR_t,
  _swigc__p_vctFrameBaseT_vctMatrixRotation2T_double_t_t,
  _swigc__p_vctFrameBaseT_vctMatrixRotation2T_float_t_t,
  _swigc__p_vctFrameBaseT_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t_t,
  _swigc__p_vctFrameBaseT_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t_t,
  _swigc__p_vctFrameBaseT_vctQuaternionRotation3T_double_t_t,
  _swigc__p_vctFrameBaseT_vctQuaternionRotation3T_float_t_t,
  _swigc__p_vctMatrixRotation2T_double_t,
  _swigc__p_vctMatrixRotation2T_float_t,
  _swigc__p_vctMatrixRotation3T_double_VCT_ROW_MAJOR_t,
  _swigc__p_vctMatrixRotation3T_float_VCT_ROW_MAJOR_t,
  _swigc__p_vctQuaternionRotation3T_double_t,
  _swigc__p_vctQuaternionRotation3T_float_t,
  _swigc__p_vctQuaternionT_double_t,
  _swigc__p_vctQuaternionT_float_t,
  _swigc__p_vctRodriguezRotation3T_double_t,
  _swigc__p_vctRodriguezRotation3T_float_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, "endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, "ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, "flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "ios_base_boolalpha", Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(globals, "ios_base_dec", Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(globals, "ios_base_fixed", Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(globals, "ios_base_hex", Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(globals, "ios_base_internal", Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(globals, "ios_base_left", Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(globals, "ios_base_oct", Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(globals, "ios_base_right", Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(globals, "ios_base_scientific", Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(globals, "ios_base_showbase", Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(globals, "ios_base_showpoint", Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(globals, "ios_base_showpos", Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(globals, "ios_base_skipws", Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(globals, "ios_base_unitbuf", Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(globals, "ios_base_uppercase", Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(globals, "ios_base_adjustfield", Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(globals, "ios_base_basefield", Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(globals, "ios_base_floatfield", Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(globals, "ios_base_badbit", Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(globals, "ios_base_eofbit", Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(globals, "ios_base_failbit", Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(globals, "ios_base_goodbit", Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(globals, "ios_base_app", Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(globals, "ios_base_ate", Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(globals, "ios_base_binary", Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(globals, "ios_base_ios_base_in", Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(globals, "ios_base_out", Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(globals, "ios_base_trunc", Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(globals, "ios_base_beg", Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(globals, "ios_base_cur", Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(globals, "ios_base_end", Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(globals, "cin", Swig_var_cin_get, Swig_var_cin_set);
  SWIG_addvarlink(globals, "cout", Swig_var_cout_get, Swig_var_cout_set);
  SWIG_addvarlink(globals, "cerr", Swig_var_cerr_get, Swig_var_cerr_set);
  SWIG_addvarlink(globals, "clog", Swig_var_clog_get, Swig_var_clog_set);
  
  
  
  
  import_array() // numpy initialization
  
  SWIG_Python_SetConstant(d, "prmEventButton_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmEventButton::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmEventButton_InitialLoD",SWIG_From_int(static_cast< int >(prmEventButton::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmEventButton_PRESSED",SWIG_From_int(static_cast< int >(prmEventButton::PRESSED)));
  SWIG_Python_SetConstant(d, "prmEventButton_RELEASED",SWIG_From_int(static_cast< int >(prmEventButton::RELEASED)));
  SWIG_Python_SetConstant(d, "prmEventButton_CLICKED",SWIG_From_int(static_cast< int >(prmEventButton::CLICKED)));
  SWIG_Python_SetConstant(d, "prmEventButton_DOUBLE_CLICKED",SWIG_From_int(static_cast< int >(prmEventButton::DOUBLE_CLICKED)));
  SWIG_Python_SetConstant(d, "prmEventButton_UNDEFINED",SWIG_From_int(static_cast< int >(prmEventButton::UNDEFINED)));
  SWIG_Python_SetConstant(d, "prmPositionCartesianGet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmPositionCartesianGet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmPositionCartesianGet_InitialLoD",SWIG_From_int(static_cast< int >(prmPositionCartesianGet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmPositionCartesianSet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmPositionCartesianSet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmPositionCartesianSet_InitialLoD",SWIG_From_int(static_cast< int >(prmPositionCartesianSet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmVelocityCartesianGet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmVelocityCartesianGet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmVelocityCartesianGet_InitialLoD",SWIG_From_int(static_cast< int >(prmVelocityCartesianGet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmVelocityCartesianSet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmVelocityCartesianSet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmVelocityCartesianSet_InitialLoD",SWIG_From_int(static_cast< int >(prmVelocityCartesianSet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmForceCartesianGet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmForceCartesianGet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmForceCartesianGet_InitialLoD",SWIG_From_int(static_cast< int >(prmForceCartesianGet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmForceCartesianSet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmForceCartesianSet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmForceCartesianSet_InitialLoD",SWIG_From_int(static_cast< int >(prmForceCartesianSet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmPositionJointGet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmPositionJointGet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmPositionJointGet_InitialLoD",SWIG_From_int(static_cast< int >(prmPositionJointGet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmPositionJointSet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmPositionJointSet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmPositionJointSet_InitialLoD",SWIG_From_int(static_cast< int >(prmPositionJointSet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmVelocityJointGet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmVelocityJointGet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmVelocityJointGet_InitialLoD",SWIG_From_int(static_cast< int >(prmVelocityJointGet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmVelocityJointSet_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmVelocityJointSet::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmVelocityJointSet_InitialLoD",SWIG_From_int(static_cast< int >(prmVelocityJointSet::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmTransformationBase_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmTransformationBase::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmTransformationBase_InitialLoD",SWIG_From_int(static_cast< int >(prmTransformationBase::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmTransformationManager_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmTransformationManager::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmTransformationManager_InitialLoD",SWIG_From_int(static_cast< int >(prmTransformationManager::InitialLoD)));
  SWIG_addvarlink(globals, "prmTransformationManager_TheWorld", Swig_var_prmTransformationManager_TheWorld_get, Swig_var_prmTransformationManager_TheWorld_set);
  SWIG_Python_SetConstant(d, "prmTransformationDynamic_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmTransformationDynamic::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmTransformationDynamic_InitialLoD",SWIG_From_int(static_cast< int >(prmTransformationDynamic::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmTransformationFixed_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmTransformationFixed::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmTransformationFixed_InitialLoD",SWIG_From_int(static_cast< int >(prmTransformationFixed::InitialLoD)));
  SWIG_Python_SetConstant(d, "prmRobotState_HAS_DYNAMIC_CREATION",SWIG_From_int(static_cast< int >(prmRobotState::HAS_DYNAMIC_CREATION)));
  SWIG_Python_SetConstant(d, "prmRobotState_InitialLoD",SWIG_From_int(static_cast< int >(prmRobotState::InitialLoD)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

