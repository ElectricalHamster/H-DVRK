// Generated by gencpp from file cisst_msgs/mtsIntervalStatistics.msg
// DO NOT EDIT!


#ifndef CISST_MSGS_MESSAGE_MTSINTERVALSTATISTICS_H
#define CISST_MSGS_MESSAGE_MTSINTERVALSTATISTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cisst_msgs
{
template <class ContainerAllocator>
struct mtsIntervalStatistics_
{
  typedef mtsIntervalStatistics_<ContainerAllocator> Type;

  mtsIntervalStatistics_()
    : header()
    , PeriodAvg(0.0)
    , PeriodStdDev(0.0)
    , PeriodMin(0.0)
    , PeriodMax(0.0)
    , ComputeTimeAvg(0.0)
    , ComputeTimeStdDev(0.0)
    , ComputeTimeMin(0.0)
    , ComputeTimeMax(0.0)
    , NumberOfSamples(0)
    , NumberOfOverruns(0)
    , StatisticsInterval(0.0)
    , UserData(0)  {
    }
  mtsIntervalStatistics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , PeriodAvg(0.0)
    , PeriodStdDev(0.0)
    , PeriodMin(0.0)
    , PeriodMax(0.0)
    , ComputeTimeAvg(0.0)
    , ComputeTimeStdDev(0.0)
    , ComputeTimeMin(0.0)
    , ComputeTimeMax(0.0)
    , NumberOfSamples(0)
    , NumberOfOverruns(0)
    , StatisticsInterval(0.0)
    , UserData(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _PeriodAvg_type;
  _PeriodAvg_type PeriodAvg;

   typedef double _PeriodStdDev_type;
  _PeriodStdDev_type PeriodStdDev;

   typedef double _PeriodMin_type;
  _PeriodMin_type PeriodMin;

   typedef double _PeriodMax_type;
  _PeriodMax_type PeriodMax;

   typedef double _ComputeTimeAvg_type;
  _ComputeTimeAvg_type ComputeTimeAvg;

   typedef double _ComputeTimeStdDev_type;
  _ComputeTimeStdDev_type ComputeTimeStdDev;

   typedef double _ComputeTimeMin_type;
  _ComputeTimeMin_type ComputeTimeMin;

   typedef double _ComputeTimeMax_type;
  _ComputeTimeMax_type ComputeTimeMax;

   typedef int64_t _NumberOfSamples_type;
  _NumberOfSamples_type NumberOfSamples;

   typedef int64_t _NumberOfOverruns_type;
  _NumberOfOverruns_type NumberOfOverruns;

   typedef double _StatisticsInterval_type;
  _StatisticsInterval_type StatisticsInterval;

   typedef int64_t _UserData_type;
  _UserData_type UserData;





  typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const> ConstPtr;

}; // struct mtsIntervalStatistics_

typedef ::cisst_msgs::mtsIntervalStatistics_<std::allocator<void> > mtsIntervalStatistics;

typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics > mtsIntervalStatisticsPtr;
typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics const> mtsIntervalStatisticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator1> & lhs, const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.PeriodAvg == rhs.PeriodAvg &&
    lhs.PeriodStdDev == rhs.PeriodStdDev &&
    lhs.PeriodMin == rhs.PeriodMin &&
    lhs.PeriodMax == rhs.PeriodMax &&
    lhs.ComputeTimeAvg == rhs.ComputeTimeAvg &&
    lhs.ComputeTimeStdDev == rhs.ComputeTimeStdDev &&
    lhs.ComputeTimeMin == rhs.ComputeTimeMin &&
    lhs.ComputeTimeMax == rhs.ComputeTimeMax &&
    lhs.NumberOfSamples == rhs.NumberOfSamples &&
    lhs.NumberOfOverruns == rhs.NumberOfOverruns &&
    lhs.StatisticsInterval == rhs.StatisticsInterval &&
    lhs.UserData == rhs.UserData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator1> & lhs, const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cisst_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc177c4951f85470a8a9c80c56822cfb";
  }

  static const char* value(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc177c4951f85470ULL;
  static const uint64_t static_value2 = 0xa8a9c80c56822cfbULL;
};

template<class ContainerAllocator>
struct DataType< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cisst_msgs/mtsIntervalStatistics";
  }

  static const char* value(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# average period \n"
"float64 PeriodAvg\n"
"# deviation on periodicity\n"
"float64 PeriodStdDev\n"
"# min and max time between\n"
"float64 PeriodMin\n"
"float64 PeriodMax\n"
"# same 4 values for compute time\n"
"float64 ComputeTimeAvg\n"
"float64 ComputeTimeStdDev\n"
"float64 ComputeTimeMin\n"
"float64 ComputeTimeMax\n"
"# number of samples used to compute these status\n"
"int64 NumberOfSamples\n"
"# number of overruns base on previous interval average\n"
"int64 NumberOfOverruns\n"
"# time window covered by these stats\n"
"float64 StatisticsInterval\n"
"\n"
"# user data\n"
"int64 UserData\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.PeriodAvg);
      stream.next(m.PeriodStdDev);
      stream.next(m.PeriodMin);
      stream.next(m.PeriodMax);
      stream.next(m.ComputeTimeAvg);
      stream.next(m.ComputeTimeStdDev);
      stream.next(m.ComputeTimeMin);
      stream.next(m.ComputeTimeMax);
      stream.next(m.NumberOfSamples);
      stream.next(m.NumberOfOverruns);
      stream.next(m.StatisticsInterval);
      stream.next(m.UserData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mtsIntervalStatistics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "PeriodAvg: ";
    Printer<double>::stream(s, indent + "  ", v.PeriodAvg);
    s << indent << "PeriodStdDev: ";
    Printer<double>::stream(s, indent + "  ", v.PeriodStdDev);
    s << indent << "PeriodMin: ";
    Printer<double>::stream(s, indent + "  ", v.PeriodMin);
    s << indent << "PeriodMax: ";
    Printer<double>::stream(s, indent + "  ", v.PeriodMax);
    s << indent << "ComputeTimeAvg: ";
    Printer<double>::stream(s, indent + "  ", v.ComputeTimeAvg);
    s << indent << "ComputeTimeStdDev: ";
    Printer<double>::stream(s, indent + "  ", v.ComputeTimeStdDev);
    s << indent << "ComputeTimeMin: ";
    Printer<double>::stream(s, indent + "  ", v.ComputeTimeMin);
    s << indent << "ComputeTimeMax: ";
    Printer<double>::stream(s, indent + "  ", v.ComputeTimeMax);
    s << indent << "NumberOfSamples: ";
    Printer<int64_t>::stream(s, indent + "  ", v.NumberOfSamples);
    s << indent << "NumberOfOverruns: ";
    Printer<int64_t>::stream(s, indent + "  ", v.NumberOfOverruns);
    s << indent << "StatisticsInterval: ";
    Printer<double>::stream(s, indent + "  ", v.StatisticsInterval);
    s << indent << "UserData: ";
    Printer<int64_t>::stream(s, indent + "  ", v.UserData);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CISST_MSGS_MESSAGE_MTSINTERVALSTATISTICS_H
