// Generated by gencpp from file crtk_msgs/operating_state.msg
// DO NOT EDIT!


#ifndef CRTK_MSGS_MESSAGE_OPERATING_STATE_H
#define CRTK_MSGS_MESSAGE_OPERATING_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace crtk_msgs
{
template <class ContainerAllocator>
struct operating_state_
{
  typedef operating_state_<ContainerAllocator> Type;

  operating_state_()
    : header()
    , state()
    , is_homed(false)
    , is_busy(false)  {
    }
  operating_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(_alloc)
    , is_homed(false)
    , is_busy(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;

   typedef uint8_t _is_homed_type;
  _is_homed_type is_homed;

   typedef uint8_t _is_busy_type;
  _is_busy_type is_busy;





  typedef boost::shared_ptr< ::crtk_msgs::operating_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crtk_msgs::operating_state_<ContainerAllocator> const> ConstPtr;

}; // struct operating_state_

typedef ::crtk_msgs::operating_state_<std::allocator<void> > operating_state;

typedef boost::shared_ptr< ::crtk_msgs::operating_state > operating_statePtr;
typedef boost::shared_ptr< ::crtk_msgs::operating_state const> operating_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crtk_msgs::operating_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crtk_msgs::operating_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crtk_msgs::operating_state_<ContainerAllocator1> & lhs, const ::crtk_msgs::operating_state_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.is_homed == rhs.is_homed &&
    lhs.is_busy == rhs.is_busy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crtk_msgs::operating_state_<ContainerAllocator1> & lhs, const ::crtk_msgs::operating_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crtk_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::crtk_msgs::operating_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crtk_msgs::operating_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crtk_msgs::operating_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crtk_msgs::operating_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crtk_msgs::operating_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crtk_msgs::operating_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crtk_msgs::operating_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1bd4021639d9d9c5fbfff78d6ff3158";
  }

  static const char* value(const ::crtk_msgs::operating_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1bd4021639d9d9cULL;
  static const uint64_t static_value2 = 0x5fbfff78d6ff3158ULL;
};

template<class ContainerAllocator>
struct DataType< ::crtk_msgs::operating_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crtk_msgs/operating_state";
  }

  static const char* value(const ::crtk_msgs::operating_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crtk_msgs::operating_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# See https://github.com/collaborative-robotics/documentation/wiki/Robot-API-status\n"
"#\n"
"# Standard states include DISABLED, ENABLED, PAUSED and FAULT\n"
"#\n"
"Header  header\n"
"string  state\n"
"bool    is_homed\n"
"bool    is_busy\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::crtk_msgs::operating_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crtk_msgs::operating_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.is_homed);
      stream.next(m.is_busy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct operating_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crtk_msgs::operating_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crtk_msgs::operating_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
    s << indent << "is_homed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_homed);
    s << indent << "is_busy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_busy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRTK_MSGS_MESSAGE_OPERATING_STATE_H
